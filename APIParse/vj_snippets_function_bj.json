{
        "fnBJDebugMsg": {
           "prefix": "fnBJDebugMsg",
           "body": "BJDebugMsg(${1:string_msg}",
            "completion": "BJDebugMsg( msg)",
           "description": "function BJDebugMsg takes string msg returns nothing",
           "scope": "source.vjass"
       },
        "fnRMinBJ": {
           "prefix": "fnRMinBJ",
           "body": "RMinBJ(${1:real_b}",
            "completion": "RMinBJ( b)",
           "description": "function RMinBJ takes real a, real b returns real",
           "scope": "source.vjass"
       },
        "fnRMaxBJ": {
           "prefix": "fnRMaxBJ",
           "body": "RMaxBJ(${1:real_b}",
            "completion": "RMaxBJ( b)",
           "description": "function RMaxBJ takes real a, real b returns real",
           "scope": "source.vjass"
       },
        "fnRAbsBJ": {
           "prefix": "fnRAbsBJ",
           "body": "RAbsBJ(${1:real_a}",
            "completion": "RAbsBJ( a)",
           "description": "function RAbsBJ takes real a returns real",
           "scope": "source.vjass"
       },
        "fnRSignBJ": {
           "prefix": "fnRSignBJ",
           "body": "RSignBJ(${1:real_a}",
            "completion": "RSignBJ( a)",
           "description": "function RSignBJ takes real a returns real",
           "scope": "source.vjass"
       },
        "fnIMinBJ": {
           "prefix": "fnIMinBJ",
           "body": "IMinBJ(${1:integer_b}",
            "completion": "IMinBJ( b)",
           "description": "function IMinBJ takes integer a, integer b returns integer",
           "scope": "source.vjass"
       },
        "fnIMaxBJ": {
           "prefix": "fnIMaxBJ",
           "body": "IMaxBJ(${1:integer_b}",
            "completion": "IMaxBJ( b)",
           "description": "function IMaxBJ takes integer a, integer b returns integer",
           "scope": "source.vjass"
       },
        "fnIAbsBJ": {
           "prefix": "fnIAbsBJ",
           "body": "IAbsBJ(${1:integer_a}",
            "completion": "IAbsBJ( a)",
           "description": "function IAbsBJ takes integer a returns integer",
           "scope": "source.vjass"
       },
        "fnISignBJ": {
           "prefix": "fnISignBJ",
           "body": "ISignBJ(${1:integer_a}",
            "completion": "ISignBJ( a)",
           "description": "function ISignBJ takes integer a returns integer",
           "scope": "source.vjass"
       },
        "fnSinBJ": {
           "prefix": "fnSinBJ",
           "body": "SinBJ(${1:real_degrees}",
            "completion": "SinBJ( degrees)",
           "description": "function SinBJ takes real degrees returns real",
           "scope": "source.vjass"
       },
        "fnCosBJ": {
           "prefix": "fnCosBJ",
           "body": "CosBJ(${1:real_degrees}",
            "completion": "CosBJ( degrees)",
           "description": "function CosBJ takes real degrees returns real",
           "scope": "source.vjass"
       },
        "fnTanBJ": {
           "prefix": "fnTanBJ",
           "body": "TanBJ(${1:real_degrees}",
            "completion": "TanBJ( degrees)",
           "description": "function TanBJ takes real degrees returns real",
           "scope": "source.vjass"
       },
        "fnAsinBJ": {
           "prefix": "fnAsinBJ",
           "body": "AsinBJ(${1:real_degrees}",
            "completion": "AsinBJ( degrees)",
           "description": "function AsinBJ takes real degrees returns real",
           "scope": "source.vjass"
       },
        "fnAcosBJ": {
           "prefix": "fnAcosBJ",
           "body": "AcosBJ(${1:real_degrees}",
            "completion": "AcosBJ( degrees)",
           "description": "function AcosBJ takes real degrees returns real",
           "scope": "source.vjass"
       },
        "fnAtanBJ": {
           "prefix": "fnAtanBJ",
           "body": "AtanBJ(${1:real_degrees}",
            "completion": "AtanBJ( degrees)",
           "description": "function AtanBJ takes real degrees returns real",
           "scope": "source.vjass"
       },
        "fnAtan2BJ": {
           "prefix": "fnAtan2BJ",
           "body": "Atan2BJ(${1:real_x}",
            "completion": "Atan2BJ( x)",
           "description": "function Atan2BJ takes real y, real x returns real",
           "scope": "source.vjass"
       },
        "fnAngleBetweenPoints": {
           "prefix": "fnAngleBetweenPoints",
           "body": "AngleBetweenPoints(${1:location_locB}",
            "completion": "AngleBetweenPoints( locB)",
           "description": "function AngleBetweenPoints takes location locA, location locB returns real",
           "scope": "source.vjass"
       },
        "fnDistanceBetweenPoints": {
           "prefix": "fnDistanceBetweenPoints",
           "body": "DistanceBetweenPoints(${1:location_locB}",
            "completion": "DistanceBetweenPoints( locB)",
           "description": "function DistanceBetweenPoints takes location locA, location locB returns real",
           "scope": "source.vjass"
       },
        "fnPolarProjectionBJ": {
           "prefix": "fnPolarProjectionBJ",
           "body": "PolarProjectionBJ(${1:real_angle},${2:location_source}",
            "completion": "PolarProjectionBJ( angle, source)",
           "description": "function PolarProjectionBJ takes location source, real dist, real angle returns location",
           "scope": "source.vjass"
       },
        "fnGetRandomDirectionDeg": {
           "prefix": "fnGetRandomDirectionDeg",
           "body": "GetRandomDirectionDeg(",
            "completion": "GetRandomDirectionDeg()",
           "description": "function GetRandomDirectionDeg takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnGetRandomPercentageBJ": {
           "prefix": "fnGetRandomPercentageBJ",
           "body": "GetRandomPercentageBJ(",
            "completion": "GetRandomPercentageBJ()",
           "description": "function GetRandomPercentageBJ takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnGetRandomLocInRect": {
           "prefix": "fnGetRandomLocInRect",
           "body": "GetRandomLocInRect(${1:rect_whichRect}",
            "completion": "GetRandomLocInRect( whichRect)",
           "description": "function GetRandomLocInRect takes rect whichRect returns location",
           "scope": "source.vjass"
       },
        "fnModuloInteger": {
           "prefix": "fnModuloInteger",
           "body": "ModuloInteger(${1:integer_divisor}",
            "completion": "ModuloInteger( divisor)",
           "description": "function ModuloInteger takes integer dividend, integer divisor returns integer",
           "scope": "source.vjass"
       },
        "fnModuloReal": {
           "prefix": "fnModuloReal",
           "body": "ModuloReal(${1:real_divisor}",
            "completion": "ModuloReal( divisor)",
           "description": "function ModuloReal takes real dividend, real divisor returns real",
           "scope": "source.vjass"
       },
        "fnOffsetLocation": {
           "prefix": "fnOffsetLocation",
           "body": "OffsetLocation(${1:real_dy},${2:location_loc}",
            "completion": "OffsetLocation( dy, loc)",
           "description": "function OffsetLocation takes location loc, real dx, real dy returns location",
           "scope": "source.vjass"
       },
        "fnOffsetRectBJ": {
           "prefix": "fnOffsetRectBJ",
           "body": "OffsetRectBJ(${1:real_dy},${2:rect_r}",
            "completion": "OffsetRectBJ( dy, r)",
           "description": "function OffsetRectBJ takes rect r, real dx, real dy returns rect",
           "scope": "source.vjass"
       },
        "fnRectFromCenterSizeBJ": {
           "prefix": "fnRectFromCenterSizeBJ",
           "body": "RectFromCenterSizeBJ(${1:real_height},${2:location_center}",
            "completion": "RectFromCenterSizeBJ( height, center)",
           "description": "function RectFromCenterSizeBJ takes location center, real width, real height returns rect",
           "scope": "source.vjass"
       },
        "fnRectContainsCoords": {
           "prefix": "fnRectContainsCoords",
           "body": "RectContainsCoords(${1:real_y},${2:rect_r}",
            "completion": "RectContainsCoords( y, r)",
           "description": "function RectContainsCoords takes rect r, real x, real y returns boolean",
           "scope": "source.vjass"
       },
        "fnRectContainsLoc": {
           "prefix": "fnRectContainsLoc",
           "body": "RectContainsLoc(${1:location_loc},${2:rect_r}",
            "completion": "RectContainsLoc( loc, r)",
           "description": "function RectContainsLoc takes rect r, location loc returns boolean",
           "scope": "source.vjass"
       },
        "fnRectContainsUnit": {
           "prefix": "fnRectContainsUnit",
           "body": "RectContainsUnit(${1:unit_whichUnit},${2:rect_r}",
            "completion": "RectContainsUnit( whichUnit, r)",
           "description": "function RectContainsUnit takes rect r, unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnRectContainsItem": {
           "prefix": "fnRectContainsItem",
           "body": "RectContainsItem(${1:item_whichItem},${2:rect_r}",
            "completion": "RectContainsItem( whichItem, r)",
           "description": "function RectContainsItem takes item whichItem, rect r returns boolean",
           "scope": "source.vjass"
       },
        "fnConditionalTriggerExecute": {
           "prefix": "fnConditionalTriggerExecute",
           "body": "ConditionalTriggerExecute(${1:trigger_trig}",
            "completion": "ConditionalTriggerExecute( trig)",
           "description": "function ConditionalTriggerExecute takes trigger trig returns nothing",
           "scope": "source.vjass"
       },
        "fnTriggerExecuteBJ": {
           "prefix": "fnTriggerExecuteBJ",
           "body": "TriggerExecuteBJ(${1:boolean_checkConditions},${2:trigger_trig}",
            "completion": "TriggerExecuteBJ( checkConditions, trig)",
           "description": "function TriggerExecuteBJ takes trigger trig, boolean checkConditions returns boolean",
           "scope": "source.vjass"
       },
        "fnPostTriggerExecuteBJ": {
           "prefix": "fnPostTriggerExecuteBJ",
           "body": "PostTriggerExecuteBJ(${1:boolean_checkConditions},${2:trigger_trig}",
            "completion": "PostTriggerExecuteBJ( checkConditions, trig)",
           "description": "function PostTriggerExecuteBJ takes trigger trig, boolean checkConditions returns boolean",
           "scope": "source.vjass"
       },
        "fnQueuedTriggerCheck": {
           "prefix": "fnQueuedTriggerCheck",
           "body": "QueuedTriggerCheck(",
            "completion": "QueuedTriggerCheck()",
           "description": "function QueuedTriggerCheck takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnQueuedTriggerGetIndex": {
           "prefix": "fnQueuedTriggerGetIndex",
           "body": "QueuedTriggerGetIndex(${1:trigger_trig}",
            "completion": "QueuedTriggerGetIndex( trig)",
           "description": "function QueuedTriggerGetIndex takes trigger trig returns integer",
           "scope": "source.vjass"
       },
        "fnQueuedTriggerRemoveByIndex": {
           "prefix": "fnQueuedTriggerRemoveByIndex",
           "body": "QueuedTriggerRemoveByIndex(${1:integer_trigIndex}",
            "completion": "QueuedTriggerRemoveByIndex( trigIndex)",
           "description": "function QueuedTriggerRemoveByIndex takes integer trigIndex returns boolean",
           "scope": "source.vjass"
       },
        "fnQueuedTriggerAttemptExec": {
           "prefix": "fnQueuedTriggerAttemptExec",
           "body": "QueuedTriggerAttemptExec(",
            "completion": "QueuedTriggerAttemptExec()",
           "description": "function QueuedTriggerAttemptExec takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnQueuedTriggerAddBJ": {
           "prefix": "fnQueuedTriggerAddBJ",
           "body": "QueuedTriggerAddBJ(${1:boolean_checkConditions},${2:trigger_trig}",
            "completion": "QueuedTriggerAddBJ( checkConditions, trig)",
           "description": "function QueuedTriggerAddBJ takes trigger trig, boolean checkConditions returns boolean",
           "scope": "source.vjass"
       },
        "fnQueuedTriggerRemoveBJ": {
           "prefix": "fnQueuedTriggerRemoveBJ",
           "body": "QueuedTriggerRemoveBJ(${1:trigger_trig}",
            "completion": "QueuedTriggerRemoveBJ( trig)",
           "description": "function QueuedTriggerRemoveBJ takes trigger trig returns nothing",
           "scope": "source.vjass"
       },
        "fnQueuedTriggerDoneBJ": {
           "prefix": "fnQueuedTriggerDoneBJ",
           "body": "QueuedTriggerDoneBJ(",
            "completion": "QueuedTriggerDoneBJ()",
           "description": "function QueuedTriggerDoneBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnQueuedTriggerClearBJ": {
           "prefix": "fnQueuedTriggerClearBJ",
           "body": "QueuedTriggerClearBJ(",
            "completion": "QueuedTriggerClearBJ()",
           "description": "function QueuedTriggerClearBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnQueuedTriggerClearInactiveBJ": {
           "prefix": "fnQueuedTriggerClearInactiveBJ",
           "body": "QueuedTriggerClearInactiveBJ(",
            "completion": "QueuedTriggerClearInactiveBJ()",
           "description": "function QueuedTriggerClearInactiveBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnQueuedTriggerCountBJ": {
           "prefix": "fnQueuedTriggerCountBJ",
           "body": "QueuedTriggerCountBJ(",
            "completion": "QueuedTriggerCountBJ()",
           "description": "function QueuedTriggerCountBJ takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnIsTriggerQueueEmptyBJ": {
           "prefix": "fnIsTriggerQueueEmptyBJ",
           "body": "IsTriggerQueueEmptyBJ(",
            "completion": "IsTriggerQueueEmptyBJ()",
           "description": "function IsTriggerQueueEmptyBJ takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnIsTriggerQueuedBJ": {
           "prefix": "fnIsTriggerQueuedBJ",
           "body": "IsTriggerQueuedBJ(${1:trigger_trig}",
            "completion": "IsTriggerQueuedBJ( trig)",
           "description": "function IsTriggerQueuedBJ takes trigger trig returns boolean",
           "scope": "source.vjass"
       },
        "fnGetForLoopIndexA": {
           "prefix": "fnGetForLoopIndexA",
           "body": "GetForLoopIndexA(",
            "completion": "GetForLoopIndexA()",
           "description": "function GetForLoopIndexA takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnSetForLoopIndexA": {
           "prefix": "fnSetForLoopIndexA",
           "body": "SetForLoopIndexA(${1:integer_newIndex}",
            "completion": "SetForLoopIndexA( newIndex)",
           "description": "function SetForLoopIndexA takes integer newIndex returns nothing",
           "scope": "source.vjass"
       },
        "fnGetForLoopIndexB": {
           "prefix": "fnGetForLoopIndexB",
           "body": "GetForLoopIndexB(",
            "completion": "GetForLoopIndexB()",
           "description": "function GetForLoopIndexB takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnSetForLoopIndexB": {
           "prefix": "fnSetForLoopIndexB",
           "body": "SetForLoopIndexB(${1:integer_newIndex}",
            "completion": "SetForLoopIndexB( newIndex)",
           "description": "function SetForLoopIndexB takes integer newIndex returns nothing",
           "scope": "source.vjass"
       },
        "fnPolledWait": {
           "prefix": "fnPolledWait",
           "body": "PolledWait(${1:real_duration}",
            "completion": "PolledWait( duration)",
           "description": "function PolledWait takes real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnIntegerTertiaryOp": {
           "prefix": "fnIntegerTertiaryOp",
           "body": "IntegerTertiaryOp(${1:integer_valueB},${2:boolean_flag}",
            "completion": "IntegerTertiaryOp( valueB, flag)",
           "description": "function IntegerTertiaryOp takes boolean flag, integer valueA, integer valueB returns integer",
           "scope": "source.vjass"
       },
        "fnDoNothing": {
           "prefix": "fnDoNothing",
           "body": "DoNothing(",
            "completion": "DoNothing()",
           "description": "function DoNothing takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCommentString": {
           "prefix": "fnCommentString",
           "body": "CommentString(${1:string_commentString}",
            "completion": "CommentString( commentString)",
           "description": "function CommentString takes string commentString returns nothing",
           "scope": "source.vjass"
       },
        "fnStringIdentity": {
           "prefix": "fnStringIdentity",
           "body": "StringIdentity(${1:string_theString}",
            "completion": "StringIdentity( theString)",
           "description": "function StringIdentity takes string theString returns string",
           "scope": "source.vjass"
       },
        "fnGetBooleanAnd": {
           "prefix": "fnGetBooleanAnd",
           "body": "GetBooleanAnd(${1:boolean_valueB}",
            "completion": "GetBooleanAnd( valueB)",
           "description": "function GetBooleanAnd takes boolean valueA, boolean valueB returns boolean",
           "scope": "source.vjass"
       },
        "fnGetBooleanOr": {
           "prefix": "fnGetBooleanOr",
           "body": "GetBooleanOr(${1:boolean_valueB}",
            "completion": "GetBooleanOr( valueB)",
           "description": "function GetBooleanOr takes boolean valueA, boolean valueB returns boolean",
           "scope": "source.vjass"
       },
        "fnPercentToInt": {
           "prefix": "fnPercentToInt",
           "body": "PercentToInt(${1:real_percentage},${2:integer_max}",
            "completion": "PercentToInt( percentage, max)",
           "description": "function PercentToInt takes real percentage, integer max returns integer",
           "scope": "source.vjass"
       },
        "fnPercentTo255": {
           "prefix": "fnPercentTo255",
           "body": "PercentTo255(${1:real_percentage}",
            "completion": "PercentTo255( percentage)",
           "description": "function PercentTo255 takes real percentage returns integer",
           "scope": "source.vjass"
       },
        "fnGetTimeOfDay": {
           "prefix": "fnGetTimeOfDay",
           "body": "GetTimeOfDay(",
            "completion": "GetTimeOfDay()",
           "description": "function GetTimeOfDay takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnSetTimeOfDay": {
           "prefix": "fnSetTimeOfDay",
           "body": "SetTimeOfDay(${1:real_whatTime}",
            "completion": "SetTimeOfDay( whatTime)",
           "description": "function SetTimeOfDay takes real whatTime returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTimeOfDayScalePercentBJ": {
           "prefix": "fnSetTimeOfDayScalePercentBJ",
           "body": "SetTimeOfDayScalePercentBJ(${1:real_scalePercent}",
            "completion": "SetTimeOfDayScalePercentBJ( scalePercent)",
           "description": "function SetTimeOfDayScalePercentBJ takes real scalePercent returns nothing",
           "scope": "source.vjass"
       },
        "fnGetTimeOfDayScalePercentBJ": {
           "prefix": "fnGetTimeOfDayScalePercentBJ",
           "body": "GetTimeOfDayScalePercentBJ(",
            "completion": "GetTimeOfDayScalePercentBJ()",
           "description": "function GetTimeOfDayScalePercentBJ takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnPlaySound": {
           "prefix": "fnPlaySound",
           "body": "PlaySound(${1:string_soundName}",
            "completion": "PlaySound( soundName)",
           "description": "function PlaySound takes string soundName returns nothing",
           "scope": "source.vjass"
       },
        "fnCompareLocationsBJ": {
           "prefix": "fnCompareLocationsBJ",
           "body": "CompareLocationsBJ(${1:location_B}",
            "completion": "CompareLocationsBJ( B)",
           "description": "function CompareLocationsBJ takes location A, location B returns boolean",
           "scope": "source.vjass"
       },
        "fnCompareRectsBJ": {
           "prefix": "fnCompareRectsBJ",
           "body": "CompareRectsBJ(${1:rect_B}",
            "completion": "CompareRectsBJ( B)",
           "description": "function CompareRectsBJ takes rect A, rect B returns boolean",
           "scope": "source.vjass"
       },
        "fnGetRectFromCircleBJ": {
           "prefix": "fnGetRectFromCircleBJ",
           "body": "GetRectFromCircleBJ(${1:real_radius},${2:location_center}",
            "completion": "GetRectFromCircleBJ( radius, center)",
           "description": "function GetRectFromCircleBJ takes location center, real radius returns rect",
           "scope": "source.vjass"
       },
        "fnGetCurrentCameraSetup": {
           "prefix": "fnGetCurrentCameraSetup",
           "body": "GetCurrentCameraSetup(",
            "completion": "GetCurrentCameraSetup()",
           "description": "function GetCurrentCameraSetup takes nothing returns camerasetup",
           "scope": "source.vjass"
       },
        "fnCameraSetupApplyForPlayer": {
           "prefix": "fnCameraSetupApplyForPlayer",
           "body": "CameraSetupApplyForPlayer(${1:real_duration},${2:camerasetup_whichSetup},${3:boolean_doPan},${4:player_whichPlayer}",
            "completion": "CameraSetupApplyForPlayer( duration, whichSetup, doPan, whichPlayer)",
           "description": "function CameraSetupApplyForPlayer takes boolean doPan, camerasetup whichSetup, player whichPlayer, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraSetupGetFieldSwap": {
           "prefix": "fnCameraSetupGetFieldSwap",
           "body": "CameraSetupGetFieldSwap(${1:camerafield_whichField},${2:camerasetup_whichSetup}",
            "completion": "CameraSetupGetFieldSwap( whichField, whichSetup)",
           "description": "function CameraSetupGetFieldSwap takes camerafield whichField, camerasetup whichSetup returns real",
           "scope": "source.vjass"
       },
        "fnSetCameraFieldForPlayer": {
           "prefix": "fnSetCameraFieldForPlayer",
           "body": "SetCameraFieldForPlayer(${1:camerafield_whichField},${2:player_whichPlayer},${3:real_duration}",
            "completion": "SetCameraFieldForPlayer( whichField, whichPlayer, duration)",
           "description": "function SetCameraFieldForPlayer takes player whichPlayer, camerafield whichField, real value, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraTargetControllerNoZForPlayer": {
           "prefix": "fnSetCameraTargetControllerNoZForPlayer",
           "body": "SetCameraTargetControllerNoZForPlayer(${1:real_yoffset},${2:player_whichPlayer},${3:boolean_inheritOrientation},${4:unit_whichUnit}",
            "completion": "SetCameraTargetControllerNoZForPlayer( yoffset, whichPlayer, inheritOrientation, whichUnit)",
           "description": "function SetCameraTargetControllerNoZForPlayer takes player whichPlayer, unit whichUnit, real xoffset, real yoffset, boolean inheritOrientation returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraPositionForPlayer": {
           "prefix": "fnSetCameraPositionForPlayer",
           "body": "SetCameraPositionForPlayer(${1:real_y},${2:player_whichPlayer}",
            "completion": "SetCameraPositionForPlayer( y, whichPlayer)",
           "description": "function SetCameraPositionForPlayer takes player whichPlayer, real x, real y returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraPositionLocForPlayer": {
           "prefix": "fnSetCameraPositionLocForPlayer",
           "body": "SetCameraPositionLocForPlayer(${1:player_whichPlayer},${2:location_loc}",
            "completion": "SetCameraPositionLocForPlayer( whichPlayer, loc)",
           "description": "function SetCameraPositionLocForPlayer takes player whichPlayer, location loc returns nothing",
           "scope": "source.vjass"
       },
        "fnRotateCameraAroundLocBJ": {
           "prefix": "fnRotateCameraAroundLocBJ",
           "body": "RotateCameraAroundLocBJ(${1:real_duration},${2:player_whichPlayer},${3:location_loc}",
            "completion": "RotateCameraAroundLocBJ( duration, whichPlayer, loc)",
           "description": "function RotateCameraAroundLocBJ takes real degrees, location loc, player whichPlayer, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnPanCameraToForPlayer": {
           "prefix": "fnPanCameraToForPlayer",
           "body": "PanCameraToForPlayer(${1:real_y},${2:player_whichPlayer}",
            "completion": "PanCameraToForPlayer( y, whichPlayer)",
           "description": "function PanCameraToForPlayer takes player whichPlayer, real x, real y returns nothing",
           "scope": "source.vjass"
       },
        "fnPanCameraToLocForPlayer": {
           "prefix": "fnPanCameraToLocForPlayer",
           "body": "PanCameraToLocForPlayer(${1:player_whichPlayer},${2:location_loc}",
            "completion": "PanCameraToLocForPlayer( whichPlayer, loc)",
           "description": "function PanCameraToLocForPlayer takes player whichPlayer, location loc returns nothing",
           "scope": "source.vjass"
       },
        "fnPanCameraToTimedForPlayer": {
           "prefix": "fnPanCameraToTimedForPlayer",
           "body": "PanCameraToTimedForPlayer(${1:real_duration},${2:player_whichPlayer}",
            "completion": "PanCameraToTimedForPlayer( duration, whichPlayer)",
           "description": "function PanCameraToTimedForPlayer takes player whichPlayer, real x, real y, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnPanCameraToTimedLocForPlayer": {
           "prefix": "fnPanCameraToTimedLocForPlayer",
           "body": "PanCameraToTimedLocForPlayer(${1:real_duration},${2:player_whichPlayer},${3:location_loc}",
            "completion": "PanCameraToTimedLocForPlayer( duration, whichPlayer, loc)",
           "description": "function PanCameraToTimedLocForPlayer takes player whichPlayer, location loc, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnPanCameraToTimedLocWithZForPlayer": {
           "prefix": "fnPanCameraToTimedLocWithZForPlayer",
           "body": "PanCameraToTimedLocWithZForPlayer(${1:real_duration},${2:player_whichPlayer},${3:location_loc}",
            "completion": "PanCameraToTimedLocWithZForPlayer( duration, whichPlayer, loc)",
           "description": "function PanCameraToTimedLocWithZForPlayer takes player whichPlayer, location loc, real zOffset, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnSmartCameraPanBJ": {
           "prefix": "fnSmartCameraPanBJ",
           "body": "SmartCameraPanBJ(${1:real_duration},${2:player_whichPlayer},${3:location_loc}",
            "completion": "SmartCameraPanBJ( duration, whichPlayer, loc)",
           "description": "function SmartCameraPanBJ takes player whichPlayer, location loc, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCinematicCameraForPlayer": {
           "prefix": "fnSetCinematicCameraForPlayer",
           "body": "SetCinematicCameraForPlayer(${1:player_whichPlayer},${2:string_cameraModelFile}",
            "completion": "SetCinematicCameraForPlayer( whichPlayer, cameraModelFile)",
           "description": "function SetCinematicCameraForPlayer takes player whichPlayer, string cameraModelFile returns nothing",
           "scope": "source.vjass"
       },
        "fnResetToGameCameraForPlayer": {
           "prefix": "fnResetToGameCameraForPlayer",
           "body": "ResetToGameCameraForPlayer(${1:real_duration},${2:player_whichPlayer}",
            "completion": "ResetToGameCameraForPlayer( duration, whichPlayer)",
           "description": "function ResetToGameCameraForPlayer takes player whichPlayer, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraSetSourceNoiseForPlayer": {
           "prefix": "fnCameraSetSourceNoiseForPlayer",
           "body": "CameraSetSourceNoiseForPlayer(${1:real_velocity},${2:player_whichPlayer}",
            "completion": "CameraSetSourceNoiseForPlayer( velocity, whichPlayer)",
           "description": "function CameraSetSourceNoiseForPlayer takes player whichPlayer, real magnitude, real velocity returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraSetTargetNoiseForPlayer": {
           "prefix": "fnCameraSetTargetNoiseForPlayer",
           "body": "CameraSetTargetNoiseForPlayer(${1:real_velocity},${2:player_whichPlayer}",
            "completion": "CameraSetTargetNoiseForPlayer( velocity, whichPlayer)",
           "description": "function CameraSetTargetNoiseForPlayer takes player whichPlayer, real magnitude, real velocity returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraSetEQNoiseForPlayer": {
           "prefix": "fnCameraSetEQNoiseForPlayer",
           "body": "CameraSetEQNoiseForPlayer(${1:real_magnitude},${2:player_whichPlayer}",
            "completion": "CameraSetEQNoiseForPlayer( magnitude, whichPlayer)",
           "description": "function CameraSetEQNoiseForPlayer takes player whichPlayer, real magnitude returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraClearNoiseForPlayer": {
           "prefix": "fnCameraClearNoiseForPlayer",
           "body": "CameraClearNoiseForPlayer(${1:player_whichPlayer}",
            "completion": "CameraClearNoiseForPlayer( whichPlayer)",
           "description": "function CameraClearNoiseForPlayer takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnGetCurrentCameraBoundsMapRectBJ": {
           "prefix": "fnGetCurrentCameraBoundsMapRectBJ",
           "body": "GetCurrentCameraBoundsMapRectBJ(",
            "completion": "GetCurrentCameraBoundsMapRectBJ()",
           "description": "function GetCurrentCameraBoundsMapRectBJ takes nothing returns rect",
           "scope": "source.vjass"
       },
        "fnGetCameraBoundsMapRect": {
           "prefix": "fnGetCameraBoundsMapRect",
           "body": "GetCameraBoundsMapRect(",
            "completion": "GetCameraBoundsMapRect()",
           "description": "function GetCameraBoundsMapRect takes nothing returns rect",
           "scope": "source.vjass"
       },
        "fnGetPlayableMapRect": {
           "prefix": "fnGetPlayableMapRect",
           "body": "GetPlayableMapRect(",
            "completion": "GetPlayableMapRect()",
           "description": "function GetPlayableMapRect takes nothing returns rect",
           "scope": "source.vjass"
       },
        "fnGetEntireMapRect": {
           "prefix": "fnGetEntireMapRect",
           "body": "GetEntireMapRect(",
            "completion": "GetEntireMapRect()",
           "description": "function GetEntireMapRect takes nothing returns rect",
           "scope": "source.vjass"
       },
        "fnSetCameraBoundsToRect": {
           "prefix": "fnSetCameraBoundsToRect",
           "body": "SetCameraBoundsToRect(${1:rect_r}",
            "completion": "SetCameraBoundsToRect( r)",
           "description": "function SetCameraBoundsToRect takes rect r returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraBoundsToRectForPlayerBJ": {
           "prefix": "fnSetCameraBoundsToRectForPlayerBJ",
           "body": "SetCameraBoundsToRectForPlayerBJ(${1:player_whichPlayer},${2:rect_r}",
            "completion": "SetCameraBoundsToRectForPlayerBJ( whichPlayer, r)",
           "description": "function SetCameraBoundsToRectForPlayerBJ takes player whichPlayer, rect r returns nothing",
           "scope": "source.vjass"
       },
        "fnAdjustCameraBoundsBJ": {
           "prefix": "fnAdjustCameraBoundsBJ",
           "body": "AdjustCameraBoundsBJ(${1:real_dySouth},${2:integer_adjustMethod}",
            "completion": "AdjustCameraBoundsBJ( dySouth, adjustMethod)",
           "description": "function AdjustCameraBoundsBJ takes integer adjustMethod, real dxWest, real dxEast, real dyNorth, real dySouth returns nothing",
           "scope": "source.vjass"
       },
        "fnAdjustCameraBoundsForPlayerBJ": {
           "prefix": "fnAdjustCameraBoundsForPlayerBJ",
           "body": "AdjustCameraBoundsForPlayerBJ(${1:real_dySouth},${2:integer_adjustMethod},${3:player_whichPlayer}",
            "completion": "AdjustCameraBoundsForPlayerBJ( dySouth, adjustMethod, whichPlayer)",
           "description": "function AdjustCameraBoundsForPlayerBJ takes integer adjustMethod, player whichPlayer, real dxWest, real dxEast, real dyNorth, real dySouth returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraQuickPositionForPlayer": {
           "prefix": "fnSetCameraQuickPositionForPlayer",
           "body": "SetCameraQuickPositionForPlayer(${1:real_y},${2:player_whichPlayer}",
            "completion": "SetCameraQuickPositionForPlayer( y, whichPlayer)",
           "description": "function SetCameraQuickPositionForPlayer takes player whichPlayer, real x, real y returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraQuickPositionLocForPlayer": {
           "prefix": "fnSetCameraQuickPositionLocForPlayer",
           "body": "SetCameraQuickPositionLocForPlayer(${1:player_whichPlayer},${2:location_loc}",
            "completion": "SetCameraQuickPositionLocForPlayer( whichPlayer, loc)",
           "description": "function SetCameraQuickPositionLocForPlayer takes player whichPlayer, location loc returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraQuickPositionLoc": {
           "prefix": "fnSetCameraQuickPositionLoc",
           "body": "SetCameraQuickPositionLoc(${1:location_loc}",
            "completion": "SetCameraQuickPositionLoc( loc)",
           "description": "function SetCameraQuickPositionLoc takes location loc returns nothing",
           "scope": "source.vjass"
       },
        "fnStopCameraForPlayerBJ": {
           "prefix": "fnStopCameraForPlayerBJ",
           "body": "StopCameraForPlayerBJ(${1:player_whichPlayer}",
            "completion": "StopCameraForPlayerBJ( whichPlayer)",
           "description": "function StopCameraForPlayerBJ takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraOrientControllerForPlayerBJ": {
           "prefix": "fnSetCameraOrientControllerForPlayerBJ",
           "body": "SetCameraOrientControllerForPlayerBJ(${1:real_yoffset},${2:player_whichPlayer},${3:unit_whichUnit}",
            "completion": "SetCameraOrientControllerForPlayerBJ( yoffset, whichPlayer, whichUnit)",
           "description": "function SetCameraOrientControllerForPlayerBJ takes player whichPlayer, unit whichUnit, real xoffset, real yoffset returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraSetSmoothingFactorBJ": {
           "prefix": "fnCameraSetSmoothingFactorBJ",
           "body": "CameraSetSmoothingFactorBJ(${1:real_factor}",
            "completion": "CameraSetSmoothingFactorBJ( factor)",
           "description": "function CameraSetSmoothingFactorBJ takes real factor returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraResetSmoothingFactorBJ": {
           "prefix": "fnCameraResetSmoothingFactorBJ",
           "body": "CameraResetSmoothingFactorBJ(",
            "completion": "CameraResetSmoothingFactorBJ()",
           "description": "function CameraResetSmoothingFactorBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnDisplayTextToForce": {
           "prefix": "fnDisplayTextToForce",
           "body": "DisplayTextToForce(${1:force_toForce},${2:string_message}",
            "completion": "DisplayTextToForce( toForce, message)",
           "description": "function DisplayTextToForce takes force toForce, string message returns nothing",
           "scope": "source.vjass"
       },
        "fnDisplayTimedTextToForce": {
           "prefix": "fnDisplayTimedTextToForce",
           "body": "DisplayTimedTextToForce(${1:real_duration},${2:force_toForce},${3:string_message}",
            "completion": "DisplayTimedTextToForce( duration, toForce, message)",
           "description": "function DisplayTimedTextToForce takes force toForce, real duration, string message returns nothing",
           "scope": "source.vjass"
       },
        "fnClearTextMessagesBJ": {
           "prefix": "fnClearTextMessagesBJ",
           "body": "ClearTextMessagesBJ(${1:force_toForce}",
            "completion": "ClearTextMessagesBJ( toForce)",
           "description": "function ClearTextMessagesBJ takes force toForce returns nothing",
           "scope": "source.vjass"
       },
        "fnSubStringBJ": {
           "prefix": "fnSubStringBJ",
           "body": "SubStringBJ(${1:integer_end},${2:string_source}",
            "completion": "SubStringBJ( end, source)",
           "description": "function SubStringBJ takes string source, integer start, integer end returns string",
           "scope": "source.vjass"
       },
        "fnGetHandleIdBJ": {
           "prefix": "fnGetHandleIdBJ",
           "body": "GetHandleIdBJ(${1:handle_h}",
            "completion": "GetHandleIdBJ( h)",
           "description": "function GetHandleIdBJ takes handle h returns integer",
           "scope": "source.vjass"
       },
        "fnStringHashBJ": {
           "prefix": "fnStringHashBJ",
           "body": "StringHashBJ(${1:string_s}",
            "completion": "StringHashBJ( s)",
           "description": "function StringHashBJ takes string s returns integer",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterTimerEventPeriodic": {
           "prefix": "fnTriggerRegisterTimerEventPeriodic",
           "body": "TriggerRegisterTimerEventPeriodic(${1:real_timeout},${2:trigger_trig}",
            "completion": "TriggerRegisterTimerEventPeriodic( timeout, trig)",
           "description": "function TriggerRegisterTimerEventPeriodic takes trigger trig, real timeout returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterTimerEventSingle": {
           "prefix": "fnTriggerRegisterTimerEventSingle",
           "body": "TriggerRegisterTimerEventSingle(${1:real_timeout},${2:trigger_trig}",
            "completion": "TriggerRegisterTimerEventSingle( timeout, trig)",
           "description": "function TriggerRegisterTimerEventSingle takes trigger trig, real timeout returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterTimerExpireEventBJ": {
           "prefix": "fnTriggerRegisterTimerExpireEventBJ",
           "body": "TriggerRegisterTimerExpireEventBJ(${1:trigger_trig},${2:timer_t}",
            "completion": "TriggerRegisterTimerExpireEventBJ( trig, t)",
           "description": "function TriggerRegisterTimerExpireEventBJ takes trigger trig, timer t returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerUnitEventSimple": {
           "prefix": "fnTriggerRegisterPlayerUnitEventSimple",
           "body": "TriggerRegisterPlayerUnitEventSimple(${1:playerunitevent_whichEvent},${2:player_whichPlayer},${3:trigger_trig}",
            "completion": "TriggerRegisterPlayerUnitEventSimple( whichEvent, whichPlayer, trig)",
           "description": "function TriggerRegisterPlayerUnitEventSimple takes trigger trig, player whichPlayer, playerunitevent whichEvent returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterAnyUnitEventBJ": {
           "prefix": "fnTriggerRegisterAnyUnitEventBJ",
           "body": "TriggerRegisterAnyUnitEventBJ(${1:playerunitevent_whichEvent},${2:trigger_trig}",
            "completion": "TriggerRegisterAnyUnitEventBJ( whichEvent, trig)",
           "description": "function TriggerRegisterAnyUnitEventBJ takes trigger trig, playerunitevent whichEvent returns nothing",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerSelectionEventBJ": {
           "prefix": "fnTriggerRegisterPlayerSelectionEventBJ",
           "body": "TriggerRegisterPlayerSelectionEventBJ(${1:boolean_selected},${2:player_whichPlayer},${3:trigger_trig}",
            "completion": "TriggerRegisterPlayerSelectionEventBJ( selected, whichPlayer, trig)",
           "description": "function TriggerRegisterPlayerSelectionEventBJ takes trigger trig, player whichPlayer, boolean selected returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerKeyEventBJ": {
           "prefix": "fnTriggerRegisterPlayerKeyEventBJ",
           "body": "TriggerRegisterPlayerKeyEventBJ(${1:player_whichPlayer},${2:trigger_trig},${3:integer_keKey}",
            "completion": "TriggerRegisterPlayerKeyEventBJ( whichPlayer, trig, keKey)",
           "description": "function TriggerRegisterPlayerKeyEventBJ takes trigger trig, player whichPlayer, integer keType, integer keKey returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerEventVictory": {
           "prefix": "fnTriggerRegisterPlayerEventVictory",
           "body": "TriggerRegisterPlayerEventVictory(${1:player_whichPlayer},${2:trigger_trig}",
            "completion": "TriggerRegisterPlayerEventVictory( whichPlayer, trig)",
           "description": "function TriggerRegisterPlayerEventVictory takes trigger trig, player whichPlayer returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerEventDefeat": {
           "prefix": "fnTriggerRegisterPlayerEventDefeat",
           "body": "TriggerRegisterPlayerEventDefeat(${1:player_whichPlayer},${2:trigger_trig}",
            "completion": "TriggerRegisterPlayerEventDefeat( whichPlayer, trig)",
           "description": "function TriggerRegisterPlayerEventDefeat takes trigger trig, player whichPlayer returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerEventLeave": {
           "prefix": "fnTriggerRegisterPlayerEventLeave",
           "body": "TriggerRegisterPlayerEventLeave(${1:player_whichPlayer},${2:trigger_trig}",
            "completion": "TriggerRegisterPlayerEventLeave( whichPlayer, trig)",
           "description": "function TriggerRegisterPlayerEventLeave takes trigger trig, player whichPlayer returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerEventAllianceChanged": {
           "prefix": "fnTriggerRegisterPlayerEventAllianceChanged",
           "body": "TriggerRegisterPlayerEventAllianceChanged(${1:player_whichPlayer},${2:trigger_trig}",
            "completion": "TriggerRegisterPlayerEventAllianceChanged( whichPlayer, trig)",
           "description": "function TriggerRegisterPlayerEventAllianceChanged takes trigger trig, player whichPlayer returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerEventEndCinematic": {
           "prefix": "fnTriggerRegisterPlayerEventEndCinematic",
           "body": "TriggerRegisterPlayerEventEndCinematic(${1:player_whichPlayer},${2:trigger_trig}",
            "completion": "TriggerRegisterPlayerEventEndCinematic( whichPlayer, trig)",
           "description": "function TriggerRegisterPlayerEventEndCinematic takes trigger trig, player whichPlayer returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterGameStateEventTimeOfDay": {
           "prefix": "fnTriggerRegisterGameStateEventTimeOfDay",
           "body": "TriggerRegisterGameStateEventTimeOfDay(${1:real_limitval},${2:trigger_trig},${3:limitop_opcode}",
            "completion": "TriggerRegisterGameStateEventTimeOfDay( limitval, trig, opcode)",
           "description": "function TriggerRegisterGameStateEventTimeOfDay takes trigger trig, limitop opcode, real limitval returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterEnterRegionSimple": {
           "prefix": "fnTriggerRegisterEnterRegionSimple",
           "body": "TriggerRegisterEnterRegionSimple(${1:region_whichRegion},${2:trigger_trig}",
            "completion": "TriggerRegisterEnterRegionSimple( whichRegion, trig)",
           "description": "function TriggerRegisterEnterRegionSimple takes trigger trig, region whichRegion returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterLeaveRegionSimple": {
           "prefix": "fnTriggerRegisterLeaveRegionSimple",
           "body": "TriggerRegisterLeaveRegionSimple(${1:region_whichRegion},${2:trigger_trig}",
            "completion": "TriggerRegisterLeaveRegionSimple( whichRegion, trig)",
           "description": "function TriggerRegisterLeaveRegionSimple takes trigger trig, region whichRegion returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterEnterRectSimple": {
           "prefix": "fnTriggerRegisterEnterRectSimple",
           "body": "TriggerRegisterEnterRectSimple(${1:trigger_trig},${2:rect_r}",
            "completion": "TriggerRegisterEnterRectSimple( trig, r)",
           "description": "function TriggerRegisterEnterRectSimple takes trigger trig, rect r returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterLeaveRectSimple": {
           "prefix": "fnTriggerRegisterLeaveRectSimple",
           "body": "TriggerRegisterLeaveRectSimple(${1:trigger_trig},${2:rect_r}",
            "completion": "TriggerRegisterLeaveRectSimple( trig, r)",
           "description": "function TriggerRegisterLeaveRectSimple takes trigger trig, rect r returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterDistanceBetweenUnits": {
           "prefix": "fnTriggerRegisterDistanceBetweenUnits",
           "body": "TriggerRegisterDistanceBetweenUnits(${1:real_range},${2:trigger_trig},${3:boolexpr_condition},${4:unit_whichUnit}",
            "completion": "TriggerRegisterDistanceBetweenUnits( range, trig, condition, whichUnit)",
           "description": "function TriggerRegisterDistanceBetweenUnits takes trigger trig, unit whichUnit, boolexpr condition, real range returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterUnitInRangeSimple": {
           "prefix": "fnTriggerRegisterUnitInRangeSimple",
           "body": "TriggerRegisterUnitInRangeSimple(${1:real_range},${2:trigger_trig},${3:unit_whichUnit}",
            "completion": "TriggerRegisterUnitInRangeSimple( range, trig, whichUnit)",
           "description": "function TriggerRegisterUnitInRangeSimple takes trigger trig, real range, unit whichUnit returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterUnitLifeEvent": {
           "prefix": "fnTriggerRegisterUnitLifeEvent",
           "body": "TriggerRegisterUnitLifeEvent(${1:real_limitval},${2:trigger_trig},${3:limitop_opcode},${4:unit_whichUnit}",
            "completion": "TriggerRegisterUnitLifeEvent( limitval, trig, opcode, whichUnit)",
           "description": "function TriggerRegisterUnitLifeEvent takes trigger trig, unit whichUnit, limitop opcode, real limitval returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterUnitManaEvent": {
           "prefix": "fnTriggerRegisterUnitManaEvent",
           "body": "TriggerRegisterUnitManaEvent(${1:real_limitval},${2:trigger_trig},${3:limitop_opcode},${4:unit_whichUnit}",
            "completion": "TriggerRegisterUnitManaEvent( limitval, trig, opcode, whichUnit)",
           "description": "function TriggerRegisterUnitManaEvent takes trigger trig, unit whichUnit, limitop opcode, real limitval returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterDialogEventBJ": {
           "prefix": "fnTriggerRegisterDialogEventBJ",
           "body": "TriggerRegisterDialogEventBJ(${1:trigger_trig},${2:dialog_whichDialog}",
            "completion": "TriggerRegisterDialogEventBJ( trig, whichDialog)",
           "description": "function TriggerRegisterDialogEventBJ takes trigger trig, dialog whichDialog returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterShowSkillEventBJ": {
           "prefix": "fnTriggerRegisterShowSkillEventBJ",
           "body": "TriggerRegisterShowSkillEventBJ(${1:trigger_trig}",
            "completion": "TriggerRegisterShowSkillEventBJ( trig)",
           "description": "function TriggerRegisterShowSkillEventBJ takes trigger trig returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterBuildSubmenuEventBJ": {
           "prefix": "fnTriggerRegisterBuildSubmenuEventBJ",
           "body": "TriggerRegisterBuildSubmenuEventBJ(${1:trigger_trig}",
            "completion": "TriggerRegisterBuildSubmenuEventBJ( trig)",
           "description": "function TriggerRegisterBuildSubmenuEventBJ takes trigger trig returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterGameLoadedEventBJ": {
           "prefix": "fnTriggerRegisterGameLoadedEventBJ",
           "body": "TriggerRegisterGameLoadedEventBJ(${1:trigger_trig}",
            "completion": "TriggerRegisterGameLoadedEventBJ( trig)",
           "description": "function TriggerRegisterGameLoadedEventBJ takes trigger trig returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterGameSavedEventBJ": {
           "prefix": "fnTriggerRegisterGameSavedEventBJ",
           "body": "TriggerRegisterGameSavedEventBJ(${1:trigger_trig}",
            "completion": "TriggerRegisterGameSavedEventBJ( trig)",
           "description": "function TriggerRegisterGameSavedEventBJ takes trigger trig returns event",
           "scope": "source.vjass"
       },
        "fnRegisterDestDeathInRegionEnum": {
           "prefix": "fnRegisterDestDeathInRegionEnum",
           "body": "RegisterDestDeathInRegionEnum(",
            "completion": "RegisterDestDeathInRegionEnum()",
           "description": "function RegisterDestDeathInRegionEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterDestDeathInRegionEvent": {
           "prefix": "fnTriggerRegisterDestDeathInRegionEvent",
           "body": "TriggerRegisterDestDeathInRegionEvent(${1:trigger_trig},${2:rect_r}",
            "completion": "TriggerRegisterDestDeathInRegionEvent( trig, r)",
           "description": "function TriggerRegisterDestDeathInRegionEvent takes trigger trig, rect r returns nothing",
           "scope": "source.vjass"
       },
        "fnAddWeatherEffectSaveLast": {
           "prefix": "fnAddWeatherEffectSaveLast",
           "body": "AddWeatherEffectSaveLast(${1:integer_effectID},${2:rect_where}",
            "completion": "AddWeatherEffectSaveLast( effectID, where)",
           "description": "function AddWeatherEffectSaveLast takes rect where, integer effectID returns weathereffect",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedWeatherEffect": {
           "prefix": "fnGetLastCreatedWeatherEffect",
           "body": "GetLastCreatedWeatherEffect(",
            "completion": "GetLastCreatedWeatherEffect()",
           "description": "function GetLastCreatedWeatherEffect takes nothing returns weathereffect",
           "scope": "source.vjass"
       },
        "fnRemoveWeatherEffectBJ": {
           "prefix": "fnRemoveWeatherEffectBJ",
           "body": "RemoveWeatherEffectBJ(${1:weathereffect_whichWeatherEffect}",
            "completion": "RemoveWeatherEffectBJ( whichWeatherEffect)",
           "description": "function RemoveWeatherEffectBJ takes weathereffect whichWeatherEffect returns nothing",
           "scope": "source.vjass"
       },
        "fnTerrainDeformationCraterBJ": {
           "prefix": "fnTerrainDeformationCraterBJ",
           "body": "TerrainDeformationCraterBJ(${1:real_depth},${2:boolean_permanent},${3:location_where}",
            "completion": "TerrainDeformationCraterBJ( depth, permanent, where)",
           "description": "function TerrainDeformationCraterBJ takes real duration, boolean permanent, location where, real radius, real depth returns terraindeformation",
           "scope": "source.vjass"
       },
        "fnTerrainDeformationRippleBJ": {
           "prefix": "fnTerrainDeformationRippleBJ",
           "body": "TerrainDeformationRippleBJ(${1:real_waveWidth},${2:boolean_limitNeg},${3:location_where}",
            "completion": "TerrainDeformationRippleBJ( waveWidth, limitNeg, where)",
           "description": "function TerrainDeformationRippleBJ takes real duration, boolean limitNeg, location where, real startRadius, real endRadius, real depth, real wavePeriod, real waveWidth returns terraindeformation",
           "scope": "source.vjass"
       },
        "fnTerrainDeformationWaveBJ": {
           "prefix": "fnTerrainDeformationWaveBJ",
           "body": "TerrainDeformationWaveBJ(${1:real_trailDelay},${2:location_target}",
            "completion": "TerrainDeformationWaveBJ( trailDelay, target)",
           "description": "function TerrainDeformationWaveBJ takes real duration, location source, location target, real radius, real depth, real trailDelay returns terraindeformation",
           "scope": "source.vjass"
       },
        "fnTerrainDeformationRandomBJ": {
           "prefix": "fnTerrainDeformationRandomBJ",
           "body": "TerrainDeformationRandomBJ(${1:real_updateInterval},${2:location_where}",
            "completion": "TerrainDeformationRandomBJ( updateInterval, where)",
           "description": "function TerrainDeformationRandomBJ takes real duration, location where, real radius, real minDelta, real maxDelta, real updateInterval returns terraindeformation",
           "scope": "source.vjass"
       },
        "fnTerrainDeformationStopBJ": {
           "prefix": "fnTerrainDeformationStopBJ",
           "body": "TerrainDeformationStopBJ(${1:real_duration},${2:terraindeformation_deformation}",
            "completion": "TerrainDeformationStopBJ( duration, deformation)",
           "description": "function TerrainDeformationStopBJ takes terraindeformation deformation, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedTerrainDeformation": {
           "prefix": "fnGetLastCreatedTerrainDeformation",
           "body": "GetLastCreatedTerrainDeformation(",
            "completion": "GetLastCreatedTerrainDeformation()",
           "description": "function GetLastCreatedTerrainDeformation takes nothing returns terraindeformation",
           "scope": "source.vjass"
       },
        "fnAddLightningLoc": {
           "prefix": "fnAddLightningLoc",
           "body": "AddLightningLoc(${1:string_codeName},${2:location_where2}",
            "completion": "AddLightningLoc( codeName, where2)",
           "description": "function AddLightningLoc takes string codeName, location where1, location where2 returns lightning",
           "scope": "source.vjass"
       },
        "fnDestroyLightningBJ": {
           "prefix": "fnDestroyLightningBJ",
           "body": "DestroyLightningBJ(${1:lightning_whichBolt}",
            "completion": "DestroyLightningBJ( whichBolt)",
           "description": "function DestroyLightningBJ takes lightning whichBolt returns boolean",
           "scope": "source.vjass"
       },
        "fnMoveLightningLoc": {
           "prefix": "fnMoveLightningLoc",
           "body": "MoveLightningLoc(${1:location_where2},${2:lightning_whichBolt}",
            "completion": "MoveLightningLoc( where2, whichBolt)",
           "description": "function MoveLightningLoc takes lightning whichBolt, location where1, location where2 returns boolean",
           "scope": "source.vjass"
       },
        "fnGetLightningColorABJ": {
           "prefix": "fnGetLightningColorABJ",
           "body": "GetLightningColorABJ(${1:lightning_whichBolt}",
            "completion": "GetLightningColorABJ( whichBolt)",
           "description": "function GetLightningColorABJ takes lightning whichBolt returns real",
           "scope": "source.vjass"
       },
        "fnGetLightningColorRBJ": {
           "prefix": "fnGetLightningColorRBJ",
           "body": "GetLightningColorRBJ(${1:lightning_whichBolt}",
            "completion": "GetLightningColorRBJ( whichBolt)",
           "description": "function GetLightningColorRBJ takes lightning whichBolt returns real",
           "scope": "source.vjass"
       },
        "fnGetLightningColorGBJ": {
           "prefix": "fnGetLightningColorGBJ",
           "body": "GetLightningColorGBJ(${1:lightning_whichBolt}",
            "completion": "GetLightningColorGBJ( whichBolt)",
           "description": "function GetLightningColorGBJ takes lightning whichBolt returns real",
           "scope": "source.vjass"
       },
        "fnGetLightningColorBBJ": {
           "prefix": "fnGetLightningColorBBJ",
           "body": "GetLightningColorBBJ(${1:lightning_whichBolt}",
            "completion": "GetLightningColorBBJ( whichBolt)",
           "description": "function GetLightningColorBBJ takes lightning whichBolt returns real",
           "scope": "source.vjass"
       },
        "fnSetLightningColorBJ": {
           "prefix": "fnSetLightningColorBJ",
           "body": "SetLightningColorBJ(${1:real_a},${2:lightning_whichBolt}",
            "completion": "SetLightningColorBJ( a, whichBolt)",
           "description": "function SetLightningColorBJ takes lightning whichBolt, real r, real g, real b, real a returns boolean",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedLightningBJ": {
           "prefix": "fnGetLastCreatedLightningBJ",
           "body": "GetLastCreatedLightningBJ(",
            "completion": "GetLastCreatedLightningBJ()",
           "description": "function GetLastCreatedLightningBJ takes nothing returns lightning",
           "scope": "source.vjass"
       },
        "fnGetAbilityEffectBJ": {
           "prefix": "fnGetAbilityEffectBJ",
           "body": "GetAbilityEffectBJ(${1:integer_index},${2:effecttype_t}",
            "completion": "GetAbilityEffectBJ( index, t)",
           "description": "function GetAbilityEffectBJ takes integer abilcode, effecttype t, integer index returns string",
           "scope": "source.vjass"
       },
        "fnGetAbilitySoundBJ": {
           "prefix": "fnGetAbilitySoundBJ",
           "body": "GetAbilitySoundBJ(${1:integer_abilcode},${2:soundtype_t}",
            "completion": "GetAbilitySoundBJ( abilcode, t)",
           "description": "function GetAbilitySoundBJ takes integer abilcode, soundtype t returns string",
           "scope": "source.vjass"
       },
        "fnGetTerrainCliffLevelBJ": {
           "prefix": "fnGetTerrainCliffLevelBJ",
           "body": "GetTerrainCliffLevelBJ(${1:location_where}",
            "completion": "GetTerrainCliffLevelBJ( where)",
           "description": "function GetTerrainCliffLevelBJ takes location where returns integer",
           "scope": "source.vjass"
       },
        "fnGetTerrainTypeBJ": {
           "prefix": "fnGetTerrainTypeBJ",
           "body": "GetTerrainTypeBJ(${1:location_where}",
            "completion": "GetTerrainTypeBJ( where)",
           "description": "function GetTerrainTypeBJ takes location where returns integer",
           "scope": "source.vjass"
       },
        "fnGetTerrainVarianceBJ": {
           "prefix": "fnGetTerrainVarianceBJ",
           "body": "GetTerrainVarianceBJ(${1:location_where}",
            "completion": "GetTerrainVarianceBJ( where)",
           "description": "function GetTerrainVarianceBJ takes location where returns integer",
           "scope": "source.vjass"
       },
        "fnSetTerrainTypeBJ": {
           "prefix": "fnSetTerrainTypeBJ",
           "body": "SetTerrainTypeBJ(${1:integer_shape},${2:location_where}",
            "completion": "SetTerrainTypeBJ( shape, where)",
           "description": "function SetTerrainTypeBJ takes location where, integer terrainType, integer variation, integer area, integer shape returns nothing",
           "scope": "source.vjass"
       },
        "fnIsTerrainPathableBJ": {
           "prefix": "fnIsTerrainPathableBJ",
           "body": "IsTerrainPathableBJ(${1:pathingtype_t},${2:location_where}",
            "completion": "IsTerrainPathableBJ( t, where)",
           "description": "function IsTerrainPathableBJ takes location where, pathingtype t returns boolean",
           "scope": "source.vjass"
       },
        "fnSetTerrainPathableBJ": {
           "prefix": "fnSetTerrainPathableBJ",
           "body": "SetTerrainPathableBJ(${1:pathingtype_t},${2:boolean_flag},${3:location_where}",
            "completion": "SetTerrainPathableBJ( t, flag, where)",
           "description": "function SetTerrainPathableBJ takes location where, pathingtype t, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetWaterBaseColorBJ": {
           "prefix": "fnSetWaterBaseColorBJ",
           "body": "SetWaterBaseColorBJ(${1:real_transparency}",
            "completion": "SetWaterBaseColorBJ( transparency)",
           "description": "function SetWaterBaseColorBJ takes real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnCreateFogModifierRectSimple": {
           "prefix": "fnCreateFogModifierRectSimple",
           "body": "CreateFogModifierRectSimple(${1:player_whichPlayer},${2:boolean_afterUnits},${3:rect_r},${4:fogstate_whichFogState}",
            "completion": "CreateFogModifierRectSimple( whichPlayer, afterUnits, r, whichFogState)",
           "description": "function CreateFogModifierRectSimple takes player whichPlayer, fogstate whichFogState, rect r, boolean afterUnits returns fogmodifier",
           "scope": "source.vjass"
       },
        "fnCreateFogModifierRadiusLocSimple": {
           "prefix": "fnCreateFogModifierRadiusLocSimple",
           "body": "CreateFogModifierRadiusLocSimple(${1:real_radius},${2:player_whichPlayer},${3:boolean_afterUnits},${4:location_center},${5:fogstate_whichFogState}",
            "completion": "CreateFogModifierRadiusLocSimple( radius, whichPlayer, afterUnits, center, whichFogState)",
           "description": "function CreateFogModifierRadiusLocSimple takes player whichPlayer, fogstate whichFogState, location center, real radius, boolean afterUnits returns fogmodifier",
           "scope": "source.vjass"
       },
        "fnCreateFogModifierRectBJ": {
           "prefix": "fnCreateFogModifierRectBJ",
           "body": "CreateFogModifierRectBJ(${1:player_whichPlayer},${2:boolean_enabled},${3:rect_r},${4:fogstate_whichFogState}",
            "completion": "CreateFogModifierRectBJ( whichPlayer, enabled, r, whichFogState)",
           "description": "function CreateFogModifierRectBJ takes boolean enabled, player whichPlayer, fogstate whichFogState, rect r returns fogmodifier",
           "scope": "source.vjass"
       },
        "fnCreateFogModifierRadiusLocBJ": {
           "prefix": "fnCreateFogModifierRadiusLocBJ",
           "body": "CreateFogModifierRadiusLocBJ(${1:real_radius},${2:player_whichPlayer},${3:boolean_enabled},${4:location_center},${5:fogstate_whichFogState}",
            "completion": "CreateFogModifierRadiusLocBJ( radius, whichPlayer, enabled, center, whichFogState)",
           "description": "function CreateFogModifierRadiusLocBJ takes boolean enabled, player whichPlayer, fogstate whichFogState, location center, real radius returns fogmodifier",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedFogModifier": {
           "prefix": "fnGetLastCreatedFogModifier",
           "body": "GetLastCreatedFogModifier(",
            "completion": "GetLastCreatedFogModifier()",
           "description": "function GetLastCreatedFogModifier takes nothing returns fogmodifier",
           "scope": "source.vjass"
       },
        "fnFogEnableOn": {
           "prefix": "fnFogEnableOn",
           "body": "FogEnableOn(",
            "completion": "FogEnableOn()",
           "description": "function FogEnableOn takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnFogEnableOff": {
           "prefix": "fnFogEnableOff",
           "body": "FogEnableOff(",
            "completion": "FogEnableOff()",
           "description": "function FogEnableOff takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnFogMaskEnableOn": {
           "prefix": "fnFogMaskEnableOn",
           "body": "FogMaskEnableOn(",
            "completion": "FogMaskEnableOn()",
           "description": "function FogMaskEnableOn takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnFogMaskEnableOff": {
           "prefix": "fnFogMaskEnableOff",
           "body": "FogMaskEnableOff(",
            "completion": "FogMaskEnableOff()",
           "description": "function FogMaskEnableOff takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnUseTimeOfDayBJ": {
           "prefix": "fnUseTimeOfDayBJ",
           "body": "UseTimeOfDayBJ(${1:boolean_flag}",
            "completion": "UseTimeOfDayBJ( flag)",
           "description": "function UseTimeOfDayBJ takes boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTerrainFogExBJ": {
           "prefix": "fnSetTerrainFogExBJ",
           "body": "SetTerrainFogExBJ(${1:real_blue},${2:integer_style}",
            "completion": "SetTerrainFogExBJ( blue, style)",
           "description": "function SetTerrainFogExBJ takes integer style, real zstart, real zend, real density, real red, real green, real blue returns nothing",
           "scope": "source.vjass"
       },
        "fnResetTerrainFogBJ": {
           "prefix": "fnResetTerrainFogBJ",
           "body": "ResetTerrainFogBJ(",
            "completion": "ResetTerrainFogBJ()",
           "description": "function ResetTerrainFogBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDoodadAnimationBJ": {
           "prefix": "fnSetDoodadAnimationBJ",
           "body": "SetDoodadAnimationBJ(${1:real_radius},${2:integer_doodadID},${3:string_animName},${4:location_center}",
            "completion": "SetDoodadAnimationBJ( radius, doodadID, animName, center)",
           "description": "function SetDoodadAnimationBJ takes string animName, integer doodadID, real radius, location center returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDoodadAnimationRectBJ": {
           "prefix": "fnSetDoodadAnimationRectBJ",
           "body": "SetDoodadAnimationRectBJ(${1:integer_doodadID},${2:string_animName},${3:rect_r}",
            "completion": "SetDoodadAnimationRectBJ( doodadID, animName, r)",
           "description": "function SetDoodadAnimationRectBJ takes string animName, integer doodadID, rect r returns nothing",
           "scope": "source.vjass"
       },
        "fnAddUnitAnimationPropertiesBJ": {
           "prefix": "fnAddUnitAnimationPropertiesBJ",
           "body": "AddUnitAnimationPropertiesBJ(${1:boolean_add},${2:string_animProperties},${3:unit_whichUnit}",
            "completion": "AddUnitAnimationPropertiesBJ( add, animProperties, whichUnit)",
           "description": "function AddUnitAnimationPropertiesBJ takes boolean add, string animProperties, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnCreateImageBJ": {
           "prefix": "fnCreateImageBJ",
           "body": "CreateImageBJ(${1:real_zOffset},${2:integer_imageType},${3:string_file},${4:location_where}",
            "completion": "CreateImageBJ( zOffset, imageType, file, where)",
           "description": "function CreateImageBJ takes string file, real size, location where, real zOffset, integer imageType returns image",
           "scope": "source.vjass"
       },
        "fnShowImageBJ": {
           "prefix": "fnShowImageBJ",
           "body": "ShowImageBJ(${1:image_whichImage},${2:boolean_flag}",
            "completion": "ShowImageBJ( whichImage, flag)",
           "description": "function ShowImageBJ takes boolean flag, image whichImage returns nothing",
           "scope": "source.vjass"
       },
        "fnSetImagePositionBJ": {
           "prefix": "fnSetImagePositionBJ",
           "body": "SetImagePositionBJ(${1:real_zOffset},${2:image_whichImage},${3:location_where}",
            "completion": "SetImagePositionBJ( zOffset, whichImage, where)",
           "description": "function SetImagePositionBJ takes image whichImage, location where, real zOffset returns nothing",
           "scope": "source.vjass"
       },
        "fnSetImageColorBJ": {
           "prefix": "fnSetImageColorBJ",
           "body": "SetImageColorBJ(${1:real_alpha},${2:image_whichImage}",
            "completion": "SetImageColorBJ( alpha, whichImage)",
           "description": "function SetImageColorBJ takes image whichImage, real red, real green, real blue, real alpha returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedImage": {
           "prefix": "fnGetLastCreatedImage",
           "body": "GetLastCreatedImage(",
            "completion": "GetLastCreatedImage()",
           "description": "function GetLastCreatedImage takes nothing returns image",
           "scope": "source.vjass"
       },
        "fnCreateUbersplatBJ": {
           "prefix": "fnCreateUbersplatBJ",
           "body": "CreateUbersplatBJ(${1:real_alpha},${2:boolean_noBirthTime},${3:location_where},${4:string_name}",
            "completion": "CreateUbersplatBJ( alpha, noBirthTime, where, name)",
           "description": "function CreateUbersplatBJ takes location where, string name, real red, real green, real blue, real alpha, boolean forcePaused, boolean noBirthTime returns ubersplat",
           "scope": "source.vjass"
       },
        "fnShowUbersplatBJ": {
           "prefix": "fnShowUbersplatBJ",
           "body": "ShowUbersplatBJ(${1:boolean_flag},${2:ubersplat_whichSplat}",
            "completion": "ShowUbersplatBJ( flag, whichSplat)",
           "description": "function ShowUbersplatBJ takes boolean flag, ubersplat whichSplat returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedUbersplat": {
           "prefix": "fnGetLastCreatedUbersplat",
           "body": "GetLastCreatedUbersplat(",
            "completion": "GetLastCreatedUbersplat()",
           "description": "function GetLastCreatedUbersplat takes nothing returns ubersplat",
           "scope": "source.vjass"
       },
        "fnPlaySoundBJ": {
           "prefix": "fnPlaySoundBJ",
           "body": "PlaySoundBJ(${1:sound_soundHandle}",
            "completion": "PlaySoundBJ( soundHandle)",
           "description": "function PlaySoundBJ takes sound soundHandle returns nothing",
           "scope": "source.vjass"
       },
        "fnStopSoundBJ": {
           "prefix": "fnStopSoundBJ",
           "body": "StopSoundBJ(${1:sound_soundHandle},${2:boolean_fadeOut}",
            "completion": "StopSoundBJ( soundHandle, fadeOut)",
           "description": "function StopSoundBJ takes sound soundHandle, boolean fadeOut returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundVolumeBJ": {
           "prefix": "fnSetSoundVolumeBJ",
           "body": "SetSoundVolumeBJ(${1:sound_soundHandle},${2:real_volumePercent}",
            "completion": "SetSoundVolumeBJ( soundHandle, volumePercent)",
           "description": "function SetSoundVolumeBJ takes sound soundHandle, real volumePercent returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundOffsetBJ": {
           "prefix": "fnSetSoundOffsetBJ",
           "body": "SetSoundOffsetBJ(${1:real_newOffset},${2:sound_soundHandle}",
            "completion": "SetSoundOffsetBJ( newOffset, soundHandle)",
           "description": "function SetSoundOffsetBJ takes real newOffset, sound soundHandle returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundDistanceCutoffBJ": {
           "prefix": "fnSetSoundDistanceCutoffBJ",
           "body": "SetSoundDistanceCutoffBJ(${1:sound_soundHandle},${2:real_cutoff}",
            "completion": "SetSoundDistanceCutoffBJ( soundHandle, cutoff)",
           "description": "function SetSoundDistanceCutoffBJ takes sound soundHandle, real cutoff returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundPitchBJ": {
           "prefix": "fnSetSoundPitchBJ",
           "body": "SetSoundPitchBJ(${1:sound_soundHandle},${2:real_pitch}",
            "completion": "SetSoundPitchBJ( soundHandle, pitch)",
           "description": "function SetSoundPitchBJ takes sound soundHandle, real pitch returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundPositionLocBJ": {
           "prefix": "fnSetSoundPositionLocBJ",
           "body": "SetSoundPositionLocBJ(${1:sound_soundHandle},${2:real_z},${3:location_loc}",
            "completion": "SetSoundPositionLocBJ( soundHandle, z, loc)",
           "description": "function SetSoundPositionLocBJ takes sound soundHandle, location loc, real z returns nothing",
           "scope": "source.vjass"
       },
        "fnAttachSoundToUnitBJ": {
           "prefix": "fnAttachSoundToUnitBJ",
           "body": "AttachSoundToUnitBJ(${1:sound_soundHandle},${2:unit_whichUnit}",
            "completion": "AttachSoundToUnitBJ( soundHandle, whichUnit)",
           "description": "function AttachSoundToUnitBJ takes sound soundHandle, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundConeAnglesBJ": {
           "prefix": "fnSetSoundConeAnglesBJ",
           "body": "SetSoundConeAnglesBJ(${1:sound_soundHandle},${2:real_outsideVolumePercent}",
            "completion": "SetSoundConeAnglesBJ( soundHandle, outsideVolumePercent)",
           "description": "function SetSoundConeAnglesBJ takes sound soundHandle, real inside, real outside, real outsideVolumePercent returns nothing",
           "scope": "source.vjass"
       },
        "fnKillSoundWhenDoneBJ": {
           "prefix": "fnKillSoundWhenDoneBJ",
           "body": "KillSoundWhenDoneBJ(${1:sound_soundHandle}",
            "completion": "KillSoundWhenDoneBJ( soundHandle)",
           "description": "function KillSoundWhenDoneBJ takes sound soundHandle returns nothing",
           "scope": "source.vjass"
       },
        "fnPlaySoundAtPointBJ": {
           "prefix": "fnPlaySoundAtPointBJ",
           "body": "PlaySoundAtPointBJ(${1:sound_soundHandle},${2:real_z},${3:location_loc}",
            "completion": "PlaySoundAtPointBJ( soundHandle, z, loc)",
           "description": "function PlaySoundAtPointBJ takes sound soundHandle, real volumePercent, location loc, real z returns nothing",
           "scope": "source.vjass"
       },
        "fnPlaySoundOnUnitBJ": {
           "prefix": "fnPlaySoundOnUnitBJ",
           "body": "PlaySoundOnUnitBJ(${1:sound_soundHandle},${2:real_volumePercent},${3:unit_whichUnit}",
            "completion": "PlaySoundOnUnitBJ( soundHandle, volumePercent, whichUnit)",
           "description": "function PlaySoundOnUnitBJ takes sound soundHandle, real volumePercent, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnPlaySoundFromOffsetBJ": {
           "prefix": "fnPlaySoundFromOffsetBJ",
           "body": "PlaySoundFromOffsetBJ(${1:sound_soundHandle},${2:real_startingOffset}",
            "completion": "PlaySoundFromOffsetBJ( soundHandle, startingOffset)",
           "description": "function PlaySoundFromOffsetBJ takes sound soundHandle, real volumePercent, real startingOffset returns nothing",
           "scope": "source.vjass"
       },
        "fnPlayMusicBJ": {
           "prefix": "fnPlayMusicBJ",
           "body": "PlayMusicBJ(${1:string_musicFileName}",
            "completion": "PlayMusicBJ( musicFileName)",
           "description": "function PlayMusicBJ takes string musicFileName returns nothing",
           "scope": "source.vjass"
       },
        "fnPlayMusicExBJ": {
           "prefix": "fnPlayMusicExBJ",
           "body": "PlayMusicExBJ(${1:real_fadeInTime},${2:string_musicFileName}",
            "completion": "PlayMusicExBJ( fadeInTime, musicFileName)",
           "description": "function PlayMusicExBJ takes string musicFileName, real startingOffset, real fadeInTime returns nothing",
           "scope": "source.vjass"
       },
        "fnSetMusicOffsetBJ": {
           "prefix": "fnSetMusicOffsetBJ",
           "body": "SetMusicOffsetBJ(${1:real_newOffset}",
            "completion": "SetMusicOffsetBJ( newOffset)",
           "description": "function SetMusicOffsetBJ takes real newOffset returns nothing",
           "scope": "source.vjass"
       },
        "fnPlayThematicMusicBJ": {
           "prefix": "fnPlayThematicMusicBJ",
           "body": "PlayThematicMusicBJ(${1:string_musicName}",
            "completion": "PlayThematicMusicBJ( musicName)",
           "description": "function PlayThematicMusicBJ takes string musicName returns nothing",
           "scope": "source.vjass"
       },
        "fnPlayThematicMusicExBJ": {
           "prefix": "fnPlayThematicMusicExBJ",
           "body": "PlayThematicMusicExBJ(${1:real_startingOffset},${2:string_musicName}",
            "completion": "PlayThematicMusicExBJ( startingOffset, musicName)",
           "description": "function PlayThematicMusicExBJ takes string musicName, real startingOffset returns nothing",
           "scope": "source.vjass"
       },
        "fnSetThematicMusicOffsetBJ": {
           "prefix": "fnSetThematicMusicOffsetBJ",
           "body": "SetThematicMusicOffsetBJ(${1:real_newOffset}",
            "completion": "SetThematicMusicOffsetBJ( newOffset)",
           "description": "function SetThematicMusicOffsetBJ takes real newOffset returns nothing",
           "scope": "source.vjass"
       },
        "fnEndThematicMusicBJ": {
           "prefix": "fnEndThematicMusicBJ",
           "body": "EndThematicMusicBJ(",
            "completion": "EndThematicMusicBJ()",
           "description": "function EndThematicMusicBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnStopMusicBJ": {
           "prefix": "fnStopMusicBJ",
           "body": "StopMusicBJ(${1:boolean_fadeOut}",
            "completion": "StopMusicBJ( fadeOut)",
           "description": "function StopMusicBJ takes boolean fadeOut returns nothing",
           "scope": "source.vjass"
       },
        "fnResumeMusicBJ": {
           "prefix": "fnResumeMusicBJ",
           "body": "ResumeMusicBJ(",
            "completion": "ResumeMusicBJ()",
           "description": "function ResumeMusicBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetMusicVolumeBJ": {
           "prefix": "fnSetMusicVolumeBJ",
           "body": "SetMusicVolumeBJ(${1:real_volumePercent}",
            "completion": "SetMusicVolumeBJ( volumePercent)",
           "description": "function SetMusicVolumeBJ takes real volumePercent returns nothing",
           "scope": "source.vjass"
       },
        "fnGetSoundDurationBJ": {
           "prefix": "fnGetSoundDurationBJ",
           "body": "GetSoundDurationBJ(${1:sound_soundHandle}",
            "completion": "GetSoundDurationBJ( soundHandle)",
           "description": "function GetSoundDurationBJ takes sound soundHandle returns real",
           "scope": "source.vjass"
       },
        "fnGetSoundFileDurationBJ": {
           "prefix": "fnGetSoundFileDurationBJ",
           "body": "GetSoundFileDurationBJ(${1:string_musicFileName}",
            "completion": "GetSoundFileDurationBJ( musicFileName)",
           "description": "function GetSoundFileDurationBJ takes string musicFileName returns real",
           "scope": "source.vjass"
       },
        "fnGetLastPlayedSound": {
           "prefix": "fnGetLastPlayedSound",
           "body": "GetLastPlayedSound(",
            "completion": "GetLastPlayedSound()",
           "description": "function GetLastPlayedSound takes nothing returns sound",
           "scope": "source.vjass"
       },
        "fnGetLastPlayedMusic": {
           "prefix": "fnGetLastPlayedMusic",
           "body": "GetLastPlayedMusic(",
            "completion": "GetLastPlayedMusic()",
           "description": "function GetLastPlayedMusic takes nothing returns string",
           "scope": "source.vjass"
       },
        "fnVolumeGroupSetVolumeBJ": {
           "prefix": "fnVolumeGroupSetVolumeBJ",
           "body": "VolumeGroupSetVolumeBJ(${1:real_percent},${2:volumegroup_vgroup}",
            "completion": "VolumeGroupSetVolumeBJ( percent, vgroup)",
           "description": "function VolumeGroupSetVolumeBJ takes volumegroup vgroup, real percent returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCineModeVolumeGroupsImmediateBJ": {
           "prefix": "fnSetCineModeVolumeGroupsImmediateBJ",
           "body": "SetCineModeVolumeGroupsImmediateBJ(",
            "completion": "SetCineModeVolumeGroupsImmediateBJ()",
           "description": "function SetCineModeVolumeGroupsImmediateBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCineModeVolumeGroupsBJ": {
           "prefix": "fnSetCineModeVolumeGroupsBJ",
           "body": "SetCineModeVolumeGroupsBJ(",
            "completion": "SetCineModeVolumeGroupsBJ()",
           "description": "function SetCineModeVolumeGroupsBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSpeechVolumeGroupsImmediateBJ": {
           "prefix": "fnSetSpeechVolumeGroupsImmediateBJ",
           "body": "SetSpeechVolumeGroupsImmediateBJ(",
            "completion": "SetSpeechVolumeGroupsImmediateBJ()",
           "description": "function SetSpeechVolumeGroupsImmediateBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSpeechVolumeGroupsBJ": {
           "prefix": "fnSetSpeechVolumeGroupsBJ",
           "body": "SetSpeechVolumeGroupsBJ(",
            "completion": "SetSpeechVolumeGroupsBJ()",
           "description": "function SetSpeechVolumeGroupsBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnVolumeGroupResetImmediateBJ": {
           "prefix": "fnVolumeGroupResetImmediateBJ",
           "body": "VolumeGroupResetImmediateBJ(",
            "completion": "VolumeGroupResetImmediateBJ()",
           "description": "function VolumeGroupResetImmediateBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnVolumeGroupResetBJ": {
           "prefix": "fnVolumeGroupResetBJ",
           "body": "VolumeGroupResetBJ(",
            "completion": "VolumeGroupResetBJ()",
           "description": "function VolumeGroupResetBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnGetSoundIsPlayingBJ": {
           "prefix": "fnGetSoundIsPlayingBJ",
           "body": "GetSoundIsPlayingBJ(${1:sound_soundHandle}",
            "completion": "GetSoundIsPlayingBJ( soundHandle)",
           "description": "function GetSoundIsPlayingBJ takes sound soundHandle returns boolean",
           "scope": "source.vjass"
       },
        "fnWaitForSoundBJ": {
           "prefix": "fnWaitForSoundBJ",
           "body": "WaitForSoundBJ(${1:sound_soundHandle},${2:real_offset}",
            "completion": "WaitForSoundBJ( soundHandle, offset)",
           "description": "function WaitForSoundBJ takes sound soundHandle, real offset returns nothing",
           "scope": "source.vjass"
       },
        "fnSetMapMusicIndexedBJ": {
           "prefix": "fnSetMapMusicIndexedBJ",
           "body": "SetMapMusicIndexedBJ(${1:integer_index},${2:string_musicName}",
            "completion": "SetMapMusicIndexedBJ( index, musicName)",
           "description": "function SetMapMusicIndexedBJ takes string musicName, integer index returns nothing",
           "scope": "source.vjass"
       },
        "fnSetMapMusicRandomBJ": {
           "prefix": "fnSetMapMusicRandomBJ",
           "body": "SetMapMusicRandomBJ(${1:string_musicName}",
            "completion": "SetMapMusicRandomBJ( musicName)",
           "description": "function SetMapMusicRandomBJ takes string musicName returns nothing",
           "scope": "source.vjass"
       },
        "fnClearMapMusicBJ": {
           "prefix": "fnClearMapMusicBJ",
           "body": "ClearMapMusicBJ(",
            "completion": "ClearMapMusicBJ()",
           "description": "function ClearMapMusicBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetStackedSoundBJ": {
           "prefix": "fnSetStackedSoundBJ",
           "body": "SetStackedSoundBJ(${1:sound_soundHandle},${2:boolean_add},${3:rect_r}",
            "completion": "SetStackedSoundBJ( soundHandle, add, r)",
           "description": "function SetStackedSoundBJ takes boolean add, sound soundHandle, rect r returns nothing",
           "scope": "source.vjass"
       },
        "fnStartSoundForPlayerBJ": {
           "prefix": "fnStartSoundForPlayerBJ",
           "body": "StartSoundForPlayerBJ(${1:sound_soundHandle},${2:player_whichPlayer}",
            "completion": "StartSoundForPlayerBJ( soundHandle, whichPlayer)",
           "description": "function StartSoundForPlayerBJ takes player whichPlayer, sound soundHandle returns nothing",
           "scope": "source.vjass"
       },
        "fnVolumeGroupSetVolumeForPlayerBJ": {
           "prefix": "fnVolumeGroupSetVolumeForPlayerBJ",
           "body": "VolumeGroupSetVolumeForPlayerBJ(${1:real_scale},${2:player_whichPlayer},${3:volumegroup_vgroup}",
            "completion": "VolumeGroupSetVolumeForPlayerBJ( scale, whichPlayer, vgroup)",
           "description": "function VolumeGroupSetVolumeForPlayerBJ takes player whichPlayer, volumegroup vgroup, real scale returns nothing",
           "scope": "source.vjass"
       },
        "fnEnableDawnDusk": {
           "prefix": "fnEnableDawnDusk",
           "body": "EnableDawnDusk(${1:boolean_flag}",
            "completion": "EnableDawnDusk( flag)",
           "description": "function EnableDawnDusk takes boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnIsDawnDuskEnabled": {
           "prefix": "fnIsDawnDuskEnabled",
           "body": "IsDawnDuskEnabled(",
            "completion": "IsDawnDuskEnabled()",
           "description": "function IsDawnDuskEnabled takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnSetAmbientDaySound": {
           "prefix": "fnSetAmbientDaySound",
           "body": "SetAmbientDaySound(${1:string_inLabel}",
            "completion": "SetAmbientDaySound( inLabel)",
           "description": "function SetAmbientDaySound takes string inLabel returns nothing",
           "scope": "source.vjass"
       },
        "fnSetAmbientNightSound": {
           "prefix": "fnSetAmbientNightSound",
           "body": "SetAmbientNightSound(${1:string_inLabel}",
            "completion": "SetAmbientNightSound( inLabel)",
           "description": "function SetAmbientNightSound takes string inLabel returns nothing",
           "scope": "source.vjass"
       },
        "fnAddSpecialEffectLocBJ": {
           "prefix": "fnAddSpecialEffectLocBJ",
           "body": "AddSpecialEffectLocBJ(${1:location_where},${2:string_modelName}",
            "completion": "AddSpecialEffectLocBJ( where, modelName)",
           "description": "function AddSpecialEffectLocBJ takes location where, string modelName returns effect",
           "scope": "source.vjass"
       },
        "fnAddSpecialEffectTargetUnitBJ": {
           "prefix": "fnAddSpecialEffectTargetUnitBJ",
           "body": "AddSpecialEffectTargetUnitBJ(${1:widget_targetWidget},${2:string_modelName}",
            "completion": "AddSpecialEffectTargetUnitBJ( targetWidget, modelName)",
           "description": "function AddSpecialEffectTargetUnitBJ takes string attachPointName, widget targetWidget, string modelName returns effect",
           "scope": "source.vjass"
       },
        "fnDestroyEffectBJ": {
           "prefix": "fnDestroyEffectBJ",
           "body": "DestroyEffectBJ(${1:effect_whichEffect}",
            "completion": "DestroyEffectBJ( whichEffect)",
           "description": "function DestroyEffectBJ takes effect whichEffect returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedEffectBJ": {
           "prefix": "fnGetLastCreatedEffectBJ",
           "body": "GetLastCreatedEffectBJ(",
            "completion": "GetLastCreatedEffectBJ()",
           "description": "function GetLastCreatedEffectBJ takes nothing returns effect",
           "scope": "source.vjass"
       },
        "fnGetItemLoc": {
           "prefix": "fnGetItemLoc",
           "body": "GetItemLoc(${1:item_whichItem}",
            "completion": "GetItemLoc( whichItem)",
           "description": "function GetItemLoc takes item whichItem returns location",
           "scope": "source.vjass"
       },
        "fnGetItemLifeBJ": {
           "prefix": "fnGetItemLifeBJ",
           "body": "GetItemLifeBJ(${1:widget_whichWidget}",
            "completion": "GetItemLifeBJ( whichWidget)",
           "description": "function GetItemLifeBJ takes widget whichWidget returns real",
           "scope": "source.vjass"
       },
        "fnSetItemLifeBJ": {
           "prefix": "fnSetItemLifeBJ",
           "body": "SetItemLifeBJ(${1:real_life},${2:widget_whichWidget}",
            "completion": "SetItemLifeBJ( life, whichWidget)",
           "description": "function SetItemLifeBJ takes widget whichWidget, real life returns nothing",
           "scope": "source.vjass"
       },
        "fnAddHeroXPSwapped": {
           "prefix": "fnAddHeroXPSwapped",
           "body": "AddHeroXPSwapped(${1:integer_xpToAdd},${2:boolean_showEyeCandy},${3:unit_whichHero}",
            "completion": "AddHeroXPSwapped( xpToAdd, showEyeCandy, whichHero)",
           "description": "function AddHeroXPSwapped takes integer xpToAdd, unit whichHero, boolean showEyeCandy returns nothing",
           "scope": "source.vjass"
       },
        "fnSetHeroLevelBJ": {
           "prefix": "fnSetHeroLevelBJ",
           "body": "SetHeroLevelBJ(${1:integer_newLevel},${2:boolean_showEyeCandy},${3:unit_whichHero}",
            "completion": "SetHeroLevelBJ( newLevel, showEyeCandy, whichHero)",
           "description": "function SetHeroLevelBJ takes unit whichHero, integer newLevel, boolean showEyeCandy returns nothing",
           "scope": "source.vjass"
       },
        "fnDecUnitAbilityLevelSwapped": {
           "prefix": "fnDecUnitAbilityLevelSwapped",
           "body": "DecUnitAbilityLevelSwapped(${1:integer_abilcode},${2:unit_whichUnit}",
            "completion": "DecUnitAbilityLevelSwapped( abilcode, whichUnit)",
           "description": "function DecUnitAbilityLevelSwapped takes integer abilcode, unit whichUnit returns integer",
           "scope": "source.vjass"
       },
        "fnIncUnitAbilityLevelSwapped": {
           "prefix": "fnIncUnitAbilityLevelSwapped",
           "body": "IncUnitAbilityLevelSwapped(${1:integer_abilcode},${2:unit_whichUnit}",
            "completion": "IncUnitAbilityLevelSwapped( abilcode, whichUnit)",
           "description": "function IncUnitAbilityLevelSwapped takes integer abilcode, unit whichUnit returns integer",
           "scope": "source.vjass"
       },
        "fnSetUnitAbilityLevelSwapped": {
           "prefix": "fnSetUnitAbilityLevelSwapped",
           "body": "SetUnitAbilityLevelSwapped(${1:integer_level},${2:unit_whichUnit}",
            "completion": "SetUnitAbilityLevelSwapped( level, whichUnit)",
           "description": "function SetUnitAbilityLevelSwapped takes integer abilcode, unit whichUnit, integer level returns integer",
           "scope": "source.vjass"
       },
        "fnGetUnitAbilityLevelSwapped": {
           "prefix": "fnGetUnitAbilityLevelSwapped",
           "body": "GetUnitAbilityLevelSwapped(${1:integer_abilcode},${2:unit_whichUnit}",
            "completion": "GetUnitAbilityLevelSwapped( abilcode, whichUnit)",
           "description": "function GetUnitAbilityLevelSwapped takes integer abilcode, unit whichUnit returns integer",
           "scope": "source.vjass"
       },
        "fnUnitHasBuffBJ": {
           "prefix": "fnUnitHasBuffBJ",
           "body": "UnitHasBuffBJ(${1:integer_buffcode},${2:unit_whichUnit}",
            "completion": "UnitHasBuffBJ( buffcode, whichUnit)",
           "description": "function UnitHasBuffBJ takes unit whichUnit, integer buffcode returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitRemoveBuffBJ": {
           "prefix": "fnUnitRemoveBuffBJ",
           "body": "UnitRemoveBuffBJ(${1:integer_buffcode},${2:unit_whichUnit}",
            "completion": "UnitRemoveBuffBJ( buffcode, whichUnit)",
           "description": "function UnitRemoveBuffBJ takes integer buffcode, unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitAddItemSwapped": {
           "prefix": "fnUnitAddItemSwapped",
           "body": "UnitAddItemSwapped(${1:item_whichItem},${2:unit_whichHero}",
            "completion": "UnitAddItemSwapped( whichItem, whichHero)",
           "description": "function UnitAddItemSwapped takes item whichItem, unit whichHero returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitAddItemByIdSwapped": {
           "prefix": "fnUnitAddItemByIdSwapped",
           "body": "UnitAddItemByIdSwapped(${1:integer_itemId},${2:unit_whichHero}",
            "completion": "UnitAddItemByIdSwapped( itemId, whichHero)",
           "description": "function UnitAddItemByIdSwapped takes integer itemId, unit whichHero returns item",
           "scope": "source.vjass"
       },
        "fnUnitRemoveItemSwapped": {
           "prefix": "fnUnitRemoveItemSwapped",
           "body": "UnitRemoveItemSwapped(${1:item_whichItem},${2:unit_whichHero}",
            "completion": "UnitRemoveItemSwapped( whichItem, whichHero)",
           "description": "function UnitRemoveItemSwapped takes item whichItem, unit whichHero returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitRemoveItemFromSlotSwapped": {
           "prefix": "fnUnitRemoveItemFromSlotSwapped",
           "body": "UnitRemoveItemFromSlotSwapped(${1:integer_itemSlot},${2:unit_whichHero}",
            "completion": "UnitRemoveItemFromSlotSwapped( itemSlot, whichHero)",
           "description": "function UnitRemoveItemFromSlotSwapped takes integer itemSlot, unit whichHero returns item",
           "scope": "source.vjass"
       },
        "fnCreateItemLoc": {
           "prefix": "fnCreateItemLoc",
           "body": "CreateItemLoc(${1:integer_itemId},${2:location_loc}",
            "completion": "CreateItemLoc( itemId, loc)",
           "description": "function CreateItemLoc takes integer itemId, location loc returns item",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedItem": {
           "prefix": "fnGetLastCreatedItem",
           "body": "GetLastCreatedItem(",
            "completion": "GetLastCreatedItem()",
           "description": "function GetLastCreatedItem takes nothing returns item",
           "scope": "source.vjass"
       },
        "fnGetLastRemovedItem": {
           "prefix": "fnGetLastRemovedItem",
           "body": "GetLastRemovedItem(",
            "completion": "GetLastRemovedItem()",
           "description": "function GetLastRemovedItem takes nothing returns item",
           "scope": "source.vjass"
       },
        "fnSetItemPositionLoc": {
           "prefix": "fnSetItemPositionLoc",
           "body": "SetItemPositionLoc(${1:item_whichItem},${2:location_loc}",
            "completion": "SetItemPositionLoc( whichItem, loc)",
           "description": "function SetItemPositionLoc takes item whichItem, location loc returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLearnedSkillBJ": {
           "prefix": "fnGetLearnedSkillBJ",
           "body": "GetLearnedSkillBJ(",
            "completion": "GetLearnedSkillBJ()",
           "description": "function GetLearnedSkillBJ takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnSuspendHeroXPBJ": {
           "prefix": "fnSuspendHeroXPBJ",
           "body": "SuspendHeroXPBJ(${1:boolean_flag},${2:unit_whichHero}",
            "completion": "SuspendHeroXPBJ( flag, whichHero)",
           "description": "function SuspendHeroXPBJ takes boolean flag, unit whichHero returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerHandicapXPBJ": {
           "prefix": "fnSetPlayerHandicapXPBJ",
           "body": "SetPlayerHandicapXPBJ(${1:real_handicapPercent},${2:player_whichPlayer}",
            "completion": "SetPlayerHandicapXPBJ( handicapPercent, whichPlayer)",
           "description": "function SetPlayerHandicapXPBJ takes player whichPlayer, real handicapPercent returns nothing",
           "scope": "source.vjass"
       },
        "fnGetPlayerHandicapXPBJ": {
           "prefix": "fnGetPlayerHandicapXPBJ",
           "body": "GetPlayerHandicapXPBJ(${1:player_whichPlayer}",
            "completion": "GetPlayerHandicapXPBJ( whichPlayer)",
           "description": "function GetPlayerHandicapXPBJ takes player whichPlayer returns real",
           "scope": "source.vjass"
       },
        "fnSetPlayerHandicapBJ": {
           "prefix": "fnSetPlayerHandicapBJ",
           "body": "SetPlayerHandicapBJ(${1:real_handicapPercent},${2:player_whichPlayer}",
            "completion": "SetPlayerHandicapBJ( handicapPercent, whichPlayer)",
           "description": "function SetPlayerHandicapBJ takes player whichPlayer, real handicapPercent returns nothing",
           "scope": "source.vjass"
       },
        "fnGetPlayerHandicapBJ": {
           "prefix": "fnGetPlayerHandicapBJ",
           "body": "GetPlayerHandicapBJ(${1:player_whichPlayer}",
            "completion": "GetPlayerHandicapBJ( whichPlayer)",
           "description": "function GetPlayerHandicapBJ takes player whichPlayer returns real",
           "scope": "source.vjass"
       },
        "fnGetHeroStatBJ": {
           "prefix": "fnGetHeroStatBJ",
           "body": "GetHeroStatBJ(${1:integer_whichStat},${2:boolean_includeBonuses},${3:unit_whichHero}",
            "completion": "GetHeroStatBJ( whichStat, includeBonuses, whichHero)",
           "description": "function GetHeroStatBJ takes integer whichStat, unit whichHero, boolean includeBonuses returns integer",
           "scope": "source.vjass"
       },
        "fnSetHeroStat": {
           "prefix": "fnSetHeroStat",
           "body": "SetHeroStat(${1:integer_value},${2:unit_whichHero}",
            "completion": "SetHeroStat( value, whichHero)",
           "description": "function SetHeroStat takes unit whichHero, integer whichStat, integer value returns nothing",
           "scope": "source.vjass"
       },
        "fnModifyHeroStat": {
           "prefix": "fnModifyHeroStat",
           "body": "ModifyHeroStat(${1:integer_value},${2:unit_whichHero}",
            "completion": "ModifyHeroStat( value, whichHero)",
           "description": "function ModifyHeroStat takes integer whichStat, unit whichHero, integer modifyMethod, integer value returns nothing",
           "scope": "source.vjass"
       },
        "fnModifyHeroSkillPoints": {
           "prefix": "fnModifyHeroSkillPoints",
           "body": "ModifyHeroSkillPoints(${1:integer_value},${2:unit_whichHero}",
            "completion": "ModifyHeroSkillPoints( value, whichHero)",
           "description": "function ModifyHeroSkillPoints takes unit whichHero, integer modifyMethod, integer value returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitDropItemPointBJ": {
           "prefix": "fnUnitDropItemPointBJ",
           "body": "UnitDropItemPointBJ(${1:real_y},${2:item_whichItem},${3:unit_whichUnit}",
            "completion": "UnitDropItemPointBJ( y, whichItem, whichUnit)",
           "description": "function UnitDropItemPointBJ takes unit whichUnit, item whichItem, real x, real y returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitDropItemPointLoc": {
           "prefix": "fnUnitDropItemPointLoc",
           "body": "UnitDropItemPointLoc(${1:item_whichItem},${2:location_loc},${3:unit_whichUnit}",
            "completion": "UnitDropItemPointLoc( whichItem, loc, whichUnit)",
           "description": "function UnitDropItemPointLoc takes unit whichUnit, item whichItem, location loc returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitDropItemSlotBJ": {
           "prefix": "fnUnitDropItemSlotBJ",
           "body": "UnitDropItemSlotBJ(${1:item_whichItem},${2:unit_whichUnit},${3:integer_slot}",
            "completion": "UnitDropItemSlotBJ( whichItem, whichUnit, slot)",
           "description": "function UnitDropItemSlotBJ takes unit whichUnit, item whichItem, integer slot returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitDropItemTargetBJ": {
           "prefix": "fnUnitDropItemTargetBJ",
           "body": "UnitDropItemTargetBJ(${1:item_whichItem},${2:widget_target},${3:unit_whichUnit}",
            "completion": "UnitDropItemTargetBJ( whichItem, target, whichUnit)",
           "description": "function UnitDropItemTargetBJ takes unit whichUnit, item whichItem, widget target returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitUseItemDestructable": {
           "prefix": "fnUnitUseItemDestructable",
           "body": "UnitUseItemDestructable(${1:item_whichItem},${2:widget_target},${3:unit_whichUnit}",
            "completion": "UnitUseItemDestructable( whichItem, target, whichUnit)",
           "description": "function UnitUseItemDestructable takes unit whichUnit, item whichItem, widget target returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitUseItemPointLoc": {
           "prefix": "fnUnitUseItemPointLoc",
           "body": "UnitUseItemPointLoc(${1:item_whichItem},${2:location_loc},${3:unit_whichUnit}",
            "completion": "UnitUseItemPointLoc( whichItem, loc, whichUnit)",
           "description": "function UnitUseItemPointLoc takes unit whichUnit, item whichItem, location loc returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitItemInSlotBJ": {
           "prefix": "fnUnitItemInSlotBJ",
           "body": "UnitItemInSlotBJ(${1:integer_itemSlot},${2:unit_whichUnit}",
            "completion": "UnitItemInSlotBJ( itemSlot, whichUnit)",
           "description": "function UnitItemInSlotBJ takes unit whichUnit, integer itemSlot returns item",
           "scope": "source.vjass"
       },
        "fnGetInventoryIndexOfItemTypeBJ": {
           "prefix": "fnGetInventoryIndexOfItemTypeBJ",
           "body": "GetInventoryIndexOfItemTypeBJ(${1:integer_itemId},${2:unit_whichUnit}",
            "completion": "GetInventoryIndexOfItemTypeBJ( itemId, whichUnit)",
           "description": "function GetInventoryIndexOfItemTypeBJ takes unit whichUnit, integer itemId returns integer",
           "scope": "source.vjass"
       },
        "fnGetItemOfTypeFromUnitBJ": {
           "prefix": "fnGetItemOfTypeFromUnitBJ",
           "body": "GetItemOfTypeFromUnitBJ(${1:integer_itemId},${2:unit_whichUnit}",
            "completion": "GetItemOfTypeFromUnitBJ( itemId, whichUnit)",
           "description": "function GetItemOfTypeFromUnitBJ takes unit whichUnit, integer itemId returns item",
           "scope": "source.vjass"
       },
        "fnUnitHasItemOfTypeBJ": {
           "prefix": "fnUnitHasItemOfTypeBJ",
           "body": "UnitHasItemOfTypeBJ(${1:integer_itemId},${2:unit_whichUnit}",
            "completion": "UnitHasItemOfTypeBJ( itemId, whichUnit)",
           "description": "function UnitHasItemOfTypeBJ takes unit whichUnit, integer itemId returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitInventoryCount": {
           "prefix": "fnUnitInventoryCount",
           "body": "UnitInventoryCount(${1:unit_whichUnit}",
            "completion": "UnitInventoryCount( whichUnit)",
           "description": "function UnitInventoryCount takes unit whichUnit returns integer",
           "scope": "source.vjass"
       },
        "fnUnitInventorySizeBJ": {
           "prefix": "fnUnitInventorySizeBJ",
           "body": "UnitInventorySizeBJ(${1:unit_whichUnit}",
            "completion": "UnitInventorySizeBJ( whichUnit)",
           "description": "function UnitInventorySizeBJ takes unit whichUnit returns integer",
           "scope": "source.vjass"
       },
        "fnSetItemInvulnerableBJ": {
           "prefix": "fnSetItemInvulnerableBJ",
           "body": "SetItemInvulnerableBJ(${1:item_whichItem},${2:boolean_flag}",
            "completion": "SetItemInvulnerableBJ( whichItem, flag)",
           "description": "function SetItemInvulnerableBJ takes item whichItem, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetItemDropOnDeathBJ": {
           "prefix": "fnSetItemDropOnDeathBJ",
           "body": "SetItemDropOnDeathBJ(${1:item_whichItem},${2:boolean_flag}",
            "completion": "SetItemDropOnDeathBJ( whichItem, flag)",
           "description": "function SetItemDropOnDeathBJ takes item whichItem, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetItemDroppableBJ": {
           "prefix": "fnSetItemDroppableBJ",
           "body": "SetItemDroppableBJ(${1:item_whichItem},${2:boolean_flag}",
            "completion": "SetItemDroppableBJ( whichItem, flag)",
           "description": "function SetItemDroppableBJ takes item whichItem, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetItemPlayerBJ": {
           "prefix": "fnSetItemPlayerBJ",
           "body": "SetItemPlayerBJ(${1:item_whichItem},${2:boolean_changeColor},${3:player_whichPlayer}",
            "completion": "SetItemPlayerBJ( whichItem, changeColor, whichPlayer)",
           "description": "function SetItemPlayerBJ takes item whichItem, player whichPlayer, boolean changeColor returns nothing",
           "scope": "source.vjass"
       },
        "fnSetItemVisibleBJ": {
           "prefix": "fnSetItemVisibleBJ",
           "body": "SetItemVisibleBJ(${1:item_whichItem},${2:boolean_show}",
            "completion": "SetItemVisibleBJ( whichItem, show)",
           "description": "function SetItemVisibleBJ takes boolean show, item whichItem returns nothing",
           "scope": "source.vjass"
       },
        "fnIsItemHiddenBJ": {
           "prefix": "fnIsItemHiddenBJ",
           "body": "IsItemHiddenBJ(${1:item_whichItem}",
            "completion": "IsItemHiddenBJ( whichItem)",
           "description": "function IsItemHiddenBJ takes item whichItem returns boolean",
           "scope": "source.vjass"
       },
        "fnChooseRandomItemBJ": {
           "prefix": "fnChooseRandomItemBJ",
           "body": "ChooseRandomItemBJ(${1:integer_level}",
            "completion": "ChooseRandomItemBJ( level)",
           "description": "function ChooseRandomItemBJ takes integer level returns integer",
           "scope": "source.vjass"
       },
        "fnChooseRandomItemExBJ": {
           "prefix": "fnChooseRandomItemExBJ",
           "body": "ChooseRandomItemExBJ(${1:integer_level},${2:itemtype_whichType}",
            "completion": "ChooseRandomItemExBJ( level, whichType)",
           "description": "function ChooseRandomItemExBJ takes integer level, itemtype whichType returns integer",
           "scope": "source.vjass"
       },
        "fnChooseRandomNPBuildingBJ": {
           "prefix": "fnChooseRandomNPBuildingBJ",
           "body": "ChooseRandomNPBuildingBJ(",
            "completion": "ChooseRandomNPBuildingBJ()",
           "description": "function ChooseRandomNPBuildingBJ takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnChooseRandomCreepBJ": {
           "prefix": "fnChooseRandomCreepBJ",
           "body": "ChooseRandomCreepBJ(${1:integer_level}",
            "completion": "ChooseRandomCreepBJ( level)",
           "description": "function ChooseRandomCreepBJ takes integer level returns integer",
           "scope": "source.vjass"
       },
        "fnEnumItemsInRectBJ": {
           "prefix": "fnEnumItemsInRectBJ",
           "body": "EnumItemsInRectBJ(${1:code_actionFunc},${2:rect_r}",
            "completion": "EnumItemsInRectBJ( actionFunc, r)",
           "description": "function EnumItemsInRectBJ takes rect r, code actionFunc returns nothing",
           "scope": "source.vjass"
       },
        "fnRandomItemInRectBJEnum": {
           "prefix": "fnRandomItemInRectBJEnum",
           "body": "RandomItemInRectBJEnum(",
            "completion": "RandomItemInRectBJEnum()",
           "description": "function RandomItemInRectBJEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnRandomItemInRectBJ": {
           "prefix": "fnRandomItemInRectBJ",
           "body": "RandomItemInRectBJ(${1:boolexpr_filter},${2:rect_r}",
            "completion": "RandomItemInRectBJ( filter, r)",
           "description": "function RandomItemInRectBJ takes rect r, boolexpr filter returns item",
           "scope": "source.vjass"
       },
        "fnRandomItemInRectSimpleBJ": {
           "prefix": "fnRandomItemInRectSimpleBJ",
           "body": "RandomItemInRectSimpleBJ(${1:rect_r}",
            "completion": "RandomItemInRectSimpleBJ( r)",
           "description": "function RandomItemInRectSimpleBJ takes rect r returns item",
           "scope": "source.vjass"
       },
        "fnCheckItemStatus": {
           "prefix": "fnCheckItemStatus",
           "body": "CheckItemStatus(${1:item_whichItem},${2:integer_status}",
            "completion": "CheckItemStatus( whichItem, status)",
           "description": "function CheckItemStatus takes item whichItem, integer status returns boolean",
           "scope": "source.vjass"
       },
        "fnCheckItemcodeStatus": {
           "prefix": "fnCheckItemcodeStatus",
           "body": "CheckItemcodeStatus(${1:integer_status}",
            "completion": "CheckItemcodeStatus( status)",
           "description": "function CheckItemcodeStatus takes integer itemId, integer status returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitId2OrderIdBJ": {
           "prefix": "fnUnitId2OrderIdBJ",
           "body": "UnitId2OrderIdBJ(${1:integer_unitId}",
            "completion": "UnitId2OrderIdBJ( unitId)",
           "description": "function UnitId2OrderIdBJ takes integer unitId returns integer",
           "scope": "source.vjass"
       },
        "fnString2UnitIdBJ": {
           "prefix": "fnString2UnitIdBJ",
           "body": "String2UnitIdBJ(${1:string_unitIdString}",
            "completion": "String2UnitIdBJ( unitIdString)",
           "description": "function String2UnitIdBJ takes string unitIdString returns integer",
           "scope": "source.vjass"
       },
        "fnUnitId2StringBJ": {
           "prefix": "fnUnitId2StringBJ",
           "body": "UnitId2StringBJ(${1:integer_unitId}",
            "completion": "UnitId2StringBJ( unitId)",
           "description": "function UnitId2StringBJ takes integer unitId returns string",
           "scope": "source.vjass"
       },
        "fnString2OrderIdBJ": {
           "prefix": "fnString2OrderIdBJ",
           "body": "String2OrderIdBJ(${1:string_orderIdString}",
            "completion": "String2OrderIdBJ( orderIdString)",
           "description": "function String2OrderIdBJ takes string orderIdString returns integer",
           "scope": "source.vjass"
       },
        "fnOrderId2StringBJ": {
           "prefix": "fnOrderId2StringBJ",
           "body": "OrderId2StringBJ(${1:integer_orderId}",
            "completion": "OrderId2StringBJ( orderId)",
           "description": "function OrderId2StringBJ takes integer orderId returns string",
           "scope": "source.vjass"
       },
        "fnGetIssuedOrderIdBJ": {
           "prefix": "fnGetIssuedOrderIdBJ",
           "body": "GetIssuedOrderIdBJ(",
            "completion": "GetIssuedOrderIdBJ()",
           "description": "function GetIssuedOrderIdBJ takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnGetKillingUnitBJ": {
           "prefix": "fnGetKillingUnitBJ",
           "body": "GetKillingUnitBJ(",
            "completion": "GetKillingUnitBJ()",
           "description": "function GetKillingUnitBJ takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnCreateUnitAtLocSaveLast": {
           "prefix": "fnCreateUnitAtLocSaveLast",
           "body": "CreateUnitAtLocSaveLast(${1:real_face},${2:player_id},${3:location_loc},${4:integer_unitid}",
            "completion": "CreateUnitAtLocSaveLast( face, id, loc, unitid)",
           "description": "function CreateUnitAtLocSaveLast takes player id, integer unitid, location loc, real face returns unit",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedUnit": {
           "prefix": "fnGetLastCreatedUnit",
           "body": "GetLastCreatedUnit(",
            "completion": "GetLastCreatedUnit()",
           "description": "function GetLastCreatedUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnCreateNUnitsAtLoc": {
           "prefix": "fnCreateNUnitsAtLoc",
           "body": "CreateNUnitsAtLoc(${1:real_face},${2:integer_unitId},${3:location_loc},${4:player_whichPlayer}",
            "completion": "CreateNUnitsAtLoc( face, unitId, loc, whichPlayer)",
           "description": "function CreateNUnitsAtLoc takes integer count, integer unitId, player whichPlayer, location loc, real face returns group",
           "scope": "source.vjass"
       },
        "fnCreateNUnitsAtLocFacingLocBJ": {
           "prefix": "fnCreateNUnitsAtLocFacingLocBJ",
           "body": "CreateNUnitsAtLocFacingLocBJ(${1:integer_unitId},${2:location_lookAt},${3:player_whichPlayer}",
            "completion": "CreateNUnitsAtLocFacingLocBJ( unitId, lookAt, whichPlayer)",
           "description": "function CreateNUnitsAtLocFacingLocBJ takes integer count, integer unitId, player whichPlayer, location loc, location lookAt returns group",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedGroupEnum": {
           "prefix": "fnGetLastCreatedGroupEnum",
           "body": "GetLastCreatedGroupEnum(",
            "completion": "GetLastCreatedGroupEnum()",
           "description": "function GetLastCreatedGroupEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedGroup": {
           "prefix": "fnGetLastCreatedGroup",
           "body": "GetLastCreatedGroup(",
            "completion": "GetLastCreatedGroup()",
           "description": "function GetLastCreatedGroup takes nothing returns group",
           "scope": "source.vjass"
       },
        "fnCreateCorpseLocBJ": {
           "prefix": "fnCreateCorpseLocBJ",
           "body": "CreateCorpseLocBJ(${1:integer_unitid},${2:location_loc},${3:player_whichPlayer}",
            "completion": "CreateCorpseLocBJ( unitid, loc, whichPlayer)",
           "description": "function CreateCorpseLocBJ takes integer unitid, player whichPlayer, location loc returns unit",
           "scope": "source.vjass"
       },
        "fnUnitSuspendDecayBJ": {
           "prefix": "fnUnitSuspendDecayBJ",
           "body": "UnitSuspendDecayBJ(${1:boolean_suspend},${2:unit_whichUnit}",
            "completion": "UnitSuspendDecayBJ( suspend, whichUnit)",
           "description": "function UnitSuspendDecayBJ takes boolean suspend, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnDelayedSuspendDecayStopAnimEnum": {
           "prefix": "fnDelayedSuspendDecayStopAnimEnum",
           "body": "DelayedSuspendDecayStopAnimEnum(",
            "completion": "DelayedSuspendDecayStopAnimEnum()",
           "description": "function DelayedSuspendDecayStopAnimEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnDelayedSuspendDecayBoneEnum": {
           "prefix": "fnDelayedSuspendDecayBoneEnum",
           "body": "DelayedSuspendDecayBoneEnum(",
            "completion": "DelayedSuspendDecayBoneEnum()",
           "description": "function DelayedSuspendDecayBoneEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnDelayedSuspendDecayFleshEnum": {
           "prefix": "fnDelayedSuspendDecayFleshEnum",
           "body": "DelayedSuspendDecayFleshEnum(",
            "completion": "DelayedSuspendDecayFleshEnum()",
           "description": "function DelayedSuspendDecayFleshEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnDelayedSuspendDecay": {
           "prefix": "fnDelayedSuspendDecay",
           "body": "DelayedSuspendDecay(",
            "completion": "DelayedSuspendDecay()",
           "description": "function DelayedSuspendDecay takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnDelayedSuspendDecayCreate": {
           "prefix": "fnDelayedSuspendDecayCreate",
           "body": "DelayedSuspendDecayCreate(",
            "completion": "DelayedSuspendDecayCreate()",
           "description": "function DelayedSuspendDecayCreate takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCreatePermanentCorpseLocBJ": {
           "prefix": "fnCreatePermanentCorpseLocBJ",
           "body": "CreatePermanentCorpseLocBJ(${1:real_facing},${2:integer_unitid},${3:location_loc},${4:player_whichPlayer}",
            "completion": "CreatePermanentCorpseLocBJ( facing, unitid, loc, whichPlayer)",
           "description": "function CreatePermanentCorpseLocBJ takes integer style, integer unitid, player whichPlayer, location loc, real facing returns unit",
           "scope": "source.vjass"
       },
        "fnGetUnitStateSwap": {
           "prefix": "fnGetUnitStateSwap",
           "body": "GetUnitStateSwap(${1:unitstate_whichState},${2:unit_whichUnit}",
            "completion": "GetUnitStateSwap( whichState, whichUnit)",
           "description": "function GetUnitStateSwap takes unitstate whichState, unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnGetUnitStatePercent": {
           "prefix": "fnGetUnitStatePercent",
           "body": "GetUnitStatePercent(${1:unitstate_whichMaxState},${2:unit_whichUnit}",
            "completion": "GetUnitStatePercent( whichMaxState, whichUnit)",
           "description": "function GetUnitStatePercent takes unit whichUnit, unitstate whichState, unitstate whichMaxState returns real",
           "scope": "source.vjass"
       },
        "fnGetUnitLifePercent": {
           "prefix": "fnGetUnitLifePercent",
           "body": "GetUnitLifePercent(${1:unit_whichUnit}",
            "completion": "GetUnitLifePercent( whichUnit)",
           "description": "function GetUnitLifePercent takes unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnGetUnitManaPercent": {
           "prefix": "fnGetUnitManaPercent",
           "body": "GetUnitManaPercent(${1:unit_whichUnit}",
            "completion": "GetUnitManaPercent( whichUnit)",
           "description": "function GetUnitManaPercent takes unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnSelectUnitSingle": {
           "prefix": "fnSelectUnitSingle",
           "body": "SelectUnitSingle(${1:unit_whichUnit}",
            "completion": "SelectUnitSingle( whichUnit)",
           "description": "function SelectUnitSingle takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnSelectGroupBJEnum": {
           "prefix": "fnSelectGroupBJEnum",
           "body": "SelectGroupBJEnum(",
            "completion": "SelectGroupBJEnum()",
           "description": "function SelectGroupBJEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSelectGroupBJ": {
           "prefix": "fnSelectGroupBJ",
           "body": "SelectGroupBJ(${1:group_g}",
            "completion": "SelectGroupBJ( g)",
           "description": "function SelectGroupBJ takes group g returns nothing",
           "scope": "source.vjass"
       },
        "fnSelectUnitAdd": {
           "prefix": "fnSelectUnitAdd",
           "body": "SelectUnitAdd(${1:unit_whichUnit}",
            "completion": "SelectUnitAdd( whichUnit)",
           "description": "function SelectUnitAdd takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnSelectUnitRemove": {
           "prefix": "fnSelectUnitRemove",
           "body": "SelectUnitRemove(${1:unit_whichUnit}",
            "completion": "SelectUnitRemove( whichUnit)",
           "description": "function SelectUnitRemove takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnClearSelectionForPlayer": {
           "prefix": "fnClearSelectionForPlayer",
           "body": "ClearSelectionForPlayer(${1:player_whichPlayer}",
            "completion": "ClearSelectionForPlayer( whichPlayer)",
           "description": "function ClearSelectionForPlayer takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSelectUnitForPlayerSingle": {
           "prefix": "fnSelectUnitForPlayerSingle",
           "body": "SelectUnitForPlayerSingle(${1:player_whichPlayer},${2:unit_whichUnit}",
            "completion": "SelectUnitForPlayerSingle( whichPlayer, whichUnit)",
           "description": "function SelectUnitForPlayerSingle takes unit whichUnit, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSelectGroupForPlayerBJ": {
           "prefix": "fnSelectGroupForPlayerBJ",
           "body": "SelectGroupForPlayerBJ(${1:player_whichPlayer},${2:group_g}",
            "completion": "SelectGroupForPlayerBJ( whichPlayer, g)",
           "description": "function SelectGroupForPlayerBJ takes group g, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSelectUnitAddForPlayer": {
           "prefix": "fnSelectUnitAddForPlayer",
           "body": "SelectUnitAddForPlayer(${1:player_whichPlayer},${2:unit_whichUnit}",
            "completion": "SelectUnitAddForPlayer( whichPlayer, whichUnit)",
           "description": "function SelectUnitAddForPlayer takes unit whichUnit, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSelectUnitRemoveForPlayer": {
           "prefix": "fnSelectUnitRemoveForPlayer",
           "body": "SelectUnitRemoveForPlayer(${1:player_whichPlayer},${2:unit_whichUnit}",
            "completion": "SelectUnitRemoveForPlayer( whichPlayer, whichUnit)",
           "description": "function SelectUnitRemoveForPlayer takes unit whichUnit, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitLifeBJ": {
           "prefix": "fnSetUnitLifeBJ",
           "body": "SetUnitLifeBJ(${1:real_newValue},${2:unit_whichUnit}",
            "completion": "SetUnitLifeBJ( newValue, whichUnit)",
           "description": "function SetUnitLifeBJ takes unit whichUnit, real newValue returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitManaBJ": {
           "prefix": "fnSetUnitManaBJ",
           "body": "SetUnitManaBJ(${1:real_newValue},${2:unit_whichUnit}",
            "completion": "SetUnitManaBJ( newValue, whichUnit)",
           "description": "function SetUnitManaBJ takes unit whichUnit, real newValue returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitLifePercentBJ": {
           "prefix": "fnSetUnitLifePercentBJ",
           "body": "SetUnitLifePercentBJ(${1:real_percent},${2:unit_whichUnit}",
            "completion": "SetUnitLifePercentBJ( percent, whichUnit)",
           "description": "function SetUnitLifePercentBJ takes unit whichUnit, real percent returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitManaPercentBJ": {
           "prefix": "fnSetUnitManaPercentBJ",
           "body": "SetUnitManaPercentBJ(${1:real_percent},${2:unit_whichUnit}",
            "completion": "SetUnitManaPercentBJ( percent, whichUnit)",
           "description": "function SetUnitManaPercentBJ takes unit whichUnit, real percent returns nothing",
           "scope": "source.vjass"
       },
        "fnIsUnitDeadBJ": {
           "prefix": "fnIsUnitDeadBJ",
           "body": "IsUnitDeadBJ(${1:unit_whichUnit}",
            "completion": "IsUnitDeadBJ( whichUnit)",
           "description": "function IsUnitDeadBJ takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitAliveBJ": {
           "prefix": "fnIsUnitAliveBJ",
           "body": "IsUnitAliveBJ(${1:unit_whichUnit}",
            "completion": "IsUnitAliveBJ( whichUnit)",
           "description": "function IsUnitAliveBJ takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitGroupDeadBJEnum": {
           "prefix": "fnIsUnitGroupDeadBJEnum",
           "body": "IsUnitGroupDeadBJEnum(",
            "completion": "IsUnitGroupDeadBJEnum()",
           "description": "function IsUnitGroupDeadBJEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnIsUnitGroupDeadBJ": {
           "prefix": "fnIsUnitGroupDeadBJ",
           "body": "IsUnitGroupDeadBJ(${1:group_g}",
            "completion": "IsUnitGroupDeadBJ( g)",
           "description": "function IsUnitGroupDeadBJ takes group g returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitGroupEmptyBJEnum": {
           "prefix": "fnIsUnitGroupEmptyBJEnum",
           "body": "IsUnitGroupEmptyBJEnum(",
            "completion": "IsUnitGroupEmptyBJEnum()",
           "description": "function IsUnitGroupEmptyBJEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnIsUnitGroupEmptyBJ": {
           "prefix": "fnIsUnitGroupEmptyBJ",
           "body": "IsUnitGroupEmptyBJ(${1:group_g}",
            "completion": "IsUnitGroupEmptyBJ( g)",
           "description": "function IsUnitGroupEmptyBJ takes group g returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitGroupInRectBJEnum": {
           "prefix": "fnIsUnitGroupInRectBJEnum",
           "body": "IsUnitGroupInRectBJEnum(",
            "completion": "IsUnitGroupInRectBJEnum()",
           "description": "function IsUnitGroupInRectBJEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnIsUnitGroupInRectBJ": {
           "prefix": "fnIsUnitGroupInRectBJ",
           "body": "IsUnitGroupInRectBJ(${1:group_g},${2:rect_r}",
            "completion": "IsUnitGroupInRectBJ( g, r)",
           "description": "function IsUnitGroupInRectBJ takes group g, rect r returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitHiddenBJ": {
           "prefix": "fnIsUnitHiddenBJ",
           "body": "IsUnitHiddenBJ(${1:unit_whichUnit}",
            "completion": "IsUnitHiddenBJ( whichUnit)",
           "description": "function IsUnitHiddenBJ takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnShowUnitHide": {
           "prefix": "fnShowUnitHide",
           "body": "ShowUnitHide(${1:unit_whichUnit}",
            "completion": "ShowUnitHide( whichUnit)",
           "description": "function ShowUnitHide takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnShowUnitShow": {
           "prefix": "fnShowUnitShow",
           "body": "ShowUnitShow(${1:unit_whichUnit}",
            "completion": "ShowUnitShow( whichUnit)",
           "description": "function ShowUnitShow takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnIssueHauntOrderAtLocBJFilter": {
           "prefix": "fnIssueHauntOrderAtLocBJFilter",
           "body": "IssueHauntOrderAtLocBJFilter(",
            "completion": "IssueHauntOrderAtLocBJFilter()",
           "description": "function IssueHauntOrderAtLocBJFilter takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueHauntOrderAtLocBJ": {
           "prefix": "fnIssueHauntOrderAtLocBJ",
           "body": "IssueHauntOrderAtLocBJ(${1:location_loc},${2:unit_whichPeon}",
            "completion": "IssueHauntOrderAtLocBJ( loc, whichPeon)",
           "description": "function IssueHauntOrderAtLocBJ takes unit whichPeon, location loc returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueBuildOrderByIdLocBJ": {
           "prefix": "fnIssueBuildOrderByIdLocBJ",
           "body": "IssueBuildOrderByIdLocBJ(${1:integer_unitId},${2:location_loc},${3:unit_whichPeon}",
            "completion": "IssueBuildOrderByIdLocBJ( unitId, loc, whichPeon)",
           "description": "function IssueBuildOrderByIdLocBJ takes unit whichPeon, integer unitId, location loc returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueTrainOrderByIdBJ": {
           "prefix": "fnIssueTrainOrderByIdBJ",
           "body": "IssueTrainOrderByIdBJ(${1:integer_unitId},${2:unit_whichUnit}",
            "completion": "IssueTrainOrderByIdBJ( unitId, whichUnit)",
           "description": "function IssueTrainOrderByIdBJ takes unit whichUnit, integer unitId returns boolean",
           "scope": "source.vjass"
       },
        "fnGroupTrainOrderByIdBJ": {
           "prefix": "fnGroupTrainOrderByIdBJ",
           "body": "GroupTrainOrderByIdBJ(${1:integer_unitId},${2:group_g}",
            "completion": "GroupTrainOrderByIdBJ( unitId, g)",
           "description": "function GroupTrainOrderByIdBJ takes group g, integer unitId returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueUpgradeOrderByIdBJ": {
           "prefix": "fnIssueUpgradeOrderByIdBJ",
           "body": "IssueUpgradeOrderByIdBJ(${1:integer_techId},${2:unit_whichUnit}",
            "completion": "IssueUpgradeOrderByIdBJ( techId, whichUnit)",
           "description": "function IssueUpgradeOrderByIdBJ takes unit whichUnit, integer techId returns boolean",
           "scope": "source.vjass"
       },
        "fnGetAttackedUnitBJ": {
           "prefix": "fnGetAttackedUnitBJ",
           "body": "GetAttackedUnitBJ(",
            "completion": "GetAttackedUnitBJ()",
           "description": "function GetAttackedUnitBJ takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnSetUnitFlyHeightBJ": {
           "prefix": "fnSetUnitFlyHeightBJ",
           "body": "SetUnitFlyHeightBJ(${1:real_rate},${2:unit_whichUnit}",
            "completion": "SetUnitFlyHeightBJ( rate, whichUnit)",
           "description": "function SetUnitFlyHeightBJ takes unit whichUnit, real newHeight, real rate returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitTurnSpeedBJ": {
           "prefix": "fnSetUnitTurnSpeedBJ",
           "body": "SetUnitTurnSpeedBJ(${1:real_turnSpeed},${2:unit_whichUnit}",
            "completion": "SetUnitTurnSpeedBJ( turnSpeed, whichUnit)",
           "description": "function SetUnitTurnSpeedBJ takes unit whichUnit, real turnSpeed returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitPropWindowBJ": {
           "prefix": "fnSetUnitPropWindowBJ",
           "body": "SetUnitPropWindowBJ(${1:real_propWindow},${2:unit_whichUnit}",
            "completion": "SetUnitPropWindowBJ( propWindow, whichUnit)",
           "description": "function SetUnitPropWindowBJ takes unit whichUnit, real propWindow returns nothing",
           "scope": "source.vjass"
       },
        "fnGetUnitPropWindowBJ": {
           "prefix": "fnGetUnitPropWindowBJ",
           "body": "GetUnitPropWindowBJ(${1:unit_whichUnit}",
            "completion": "GetUnitPropWindowBJ( whichUnit)",
           "description": "function GetUnitPropWindowBJ takes unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnGetUnitDefaultPropWindowBJ": {
           "prefix": "fnGetUnitDefaultPropWindowBJ",
           "body": "GetUnitDefaultPropWindowBJ(${1:unit_whichUnit}",
            "completion": "GetUnitDefaultPropWindowBJ( whichUnit)",
           "description": "function GetUnitDefaultPropWindowBJ takes unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnSetUnitBlendTimeBJ": {
           "prefix": "fnSetUnitBlendTimeBJ",
           "body": "SetUnitBlendTimeBJ(${1:real_blendTime},${2:unit_whichUnit}",
            "completion": "SetUnitBlendTimeBJ( blendTime, whichUnit)",
           "description": "function SetUnitBlendTimeBJ takes unit whichUnit, real blendTime returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitAcquireRangeBJ": {
           "prefix": "fnSetUnitAcquireRangeBJ",
           "body": "SetUnitAcquireRangeBJ(${1:real_acquireRange},${2:unit_whichUnit}",
            "completion": "SetUnitAcquireRangeBJ( acquireRange, whichUnit)",
           "description": "function SetUnitAcquireRangeBJ takes unit whichUnit, real acquireRange returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitSetCanSleepBJ": {
           "prefix": "fnUnitSetCanSleepBJ",
           "body": "UnitSetCanSleepBJ(${1:boolean_canSleep},${2:unit_whichUnit}",
            "completion": "UnitSetCanSleepBJ( canSleep, whichUnit)",
           "description": "function UnitSetCanSleepBJ takes unit whichUnit, boolean canSleep returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitCanSleepBJ": {
           "prefix": "fnUnitCanSleepBJ",
           "body": "UnitCanSleepBJ(${1:unit_whichUnit}",
            "completion": "UnitCanSleepBJ( whichUnit)",
           "description": "function UnitCanSleepBJ takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitWakeUpBJ": {
           "prefix": "fnUnitWakeUpBJ",
           "body": "UnitWakeUpBJ(${1:unit_whichUnit}",
            "completion": "UnitWakeUpBJ( whichUnit)",
           "description": "function UnitWakeUpBJ takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitIsSleepingBJ": {
           "prefix": "fnUnitIsSleepingBJ",
           "body": "UnitIsSleepingBJ(${1:unit_whichUnit}",
            "completion": "UnitIsSleepingBJ( whichUnit)",
           "description": "function UnitIsSleepingBJ takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnWakePlayerUnitsEnum": {
           "prefix": "fnWakePlayerUnitsEnum",
           "body": "WakePlayerUnitsEnum(",
            "completion": "WakePlayerUnitsEnum()",
           "description": "function WakePlayerUnitsEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnWakePlayerUnits": {
           "prefix": "fnWakePlayerUnits",
           "body": "WakePlayerUnits(${1:player_whichPlayer}",
            "completion": "WakePlayerUnits( whichPlayer)",
           "description": "function WakePlayerUnits takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnEnableCreepSleepBJ": {
           "prefix": "fnEnableCreepSleepBJ",
           "body": "EnableCreepSleepBJ(${1:boolean_enable}",
            "completion": "EnableCreepSleepBJ( enable)",
           "description": "function EnableCreepSleepBJ takes boolean enable returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitGenerateAlarms": {
           "prefix": "fnUnitGenerateAlarms",
           "body": "UnitGenerateAlarms(${1:boolean_generate},${2:unit_whichUnit}",
            "completion": "UnitGenerateAlarms( generate, whichUnit)",
           "description": "function UnitGenerateAlarms takes unit whichUnit, boolean generate returns boolean",
           "scope": "source.vjass"
       },
        "fnDoesUnitGenerateAlarms": {
           "prefix": "fnDoesUnitGenerateAlarms",
           "body": "DoesUnitGenerateAlarms(${1:unit_whichUnit}",
            "completion": "DoesUnitGenerateAlarms( whichUnit)",
           "description": "function DoesUnitGenerateAlarms takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnPauseAllUnitsBJEnum": {
           "prefix": "fnPauseAllUnitsBJEnum",
           "body": "PauseAllUnitsBJEnum(",
            "completion": "PauseAllUnitsBJEnum()",
           "description": "function PauseAllUnitsBJEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnPauseAllUnitsBJ": {
           "prefix": "fnPauseAllUnitsBJ",
           "body": "PauseAllUnitsBJ(${1:boolean_pause}",
            "completion": "PauseAllUnitsBJ( pause)",
           "description": "function PauseAllUnitsBJ takes boolean pause returns nothing",
           "scope": "source.vjass"
       },
        "fnPauseUnitBJ": {
           "prefix": "fnPauseUnitBJ",
           "body": "PauseUnitBJ(${1:boolean_pause},${2:unit_whichUnit}",
            "completion": "PauseUnitBJ( pause, whichUnit)",
           "description": "function PauseUnitBJ takes boolean pause, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnIsUnitPausedBJ": {
           "prefix": "fnIsUnitPausedBJ",
           "body": "IsUnitPausedBJ(${1:unit_whichUnit}",
            "completion": "IsUnitPausedBJ( whichUnit)",
           "description": "function IsUnitPausedBJ takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitPauseTimedLifeBJ": {
           "prefix": "fnUnitPauseTimedLifeBJ",
           "body": "UnitPauseTimedLifeBJ(${1:boolean_flag},${2:unit_whichUnit}",
            "completion": "UnitPauseTimedLifeBJ( flag, whichUnit)",
           "description": "function UnitPauseTimedLifeBJ takes boolean flag, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitApplyTimedLifeBJ": {
           "prefix": "fnUnitApplyTimedLifeBJ",
           "body": "UnitApplyTimedLifeBJ(${1:real_duration},${2:integer_buffId},${3:unit_whichUnit}",
            "completion": "UnitApplyTimedLifeBJ( duration, buffId, whichUnit)",
           "description": "function UnitApplyTimedLifeBJ takes real duration, integer buffId, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitShareVisionBJ": {
           "prefix": "fnUnitShareVisionBJ",
           "body": "UnitShareVisionBJ(${1:player_whichPlayer},${2:boolean_share},${3:unit_whichUnit}",
            "completion": "UnitShareVisionBJ( whichPlayer, share, whichUnit)",
           "description": "function UnitShareVisionBJ takes boolean share, unit whichUnit, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitRemoveBuffsBJ": {
           "prefix": "fnUnitRemoveBuffsBJ",
           "body": "UnitRemoveBuffsBJ(${1:integer_buffType},${2:unit_whichUnit}",
            "completion": "UnitRemoveBuffsBJ( buffType, whichUnit)",
           "description": "function UnitRemoveBuffsBJ takes integer buffType, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitRemoveBuffsExBJ": {
           "prefix": "fnUnitRemoveBuffsExBJ",
           "body": "UnitRemoveBuffsExBJ(${1:integer_resist},${2:boolean_bAura},${3:unit_whichUnit}",
            "completion": "UnitRemoveBuffsExBJ( resist, bAura, whichUnit)",
           "description": "function UnitRemoveBuffsExBJ takes integer polarity, integer resist, unit whichUnit, boolean bTLife, boolean bAura returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitCountBuffsExBJ": {
           "prefix": "fnUnitCountBuffsExBJ",
           "body": "UnitCountBuffsExBJ(${1:integer_resist},${2:boolean_bAura},${3:unit_whichUnit}",
            "completion": "UnitCountBuffsExBJ( resist, bAura, whichUnit)",
           "description": "function UnitCountBuffsExBJ takes integer polarity, integer resist, unit whichUnit, boolean bTLife, boolean bAura returns integer",
           "scope": "source.vjass"
       },
        "fnUnitRemoveAbilityBJ": {
           "prefix": "fnUnitRemoveAbilityBJ",
           "body": "UnitRemoveAbilityBJ(${1:integer_abilityId},${2:unit_whichUnit}",
            "completion": "UnitRemoveAbilityBJ( abilityId, whichUnit)",
           "description": "function UnitRemoveAbilityBJ takes integer abilityId, unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitAddAbilityBJ": {
           "prefix": "fnUnitAddAbilityBJ",
           "body": "UnitAddAbilityBJ(${1:integer_abilityId},${2:unit_whichUnit}",
            "completion": "UnitAddAbilityBJ( abilityId, whichUnit)",
           "description": "function UnitAddAbilityBJ takes integer abilityId, unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitRemoveTypeBJ": {
           "prefix": "fnUnitRemoveTypeBJ",
           "body": "UnitRemoveTypeBJ(${1:unittype_whichType},${2:unit_whichUnit}",
            "completion": "UnitRemoveTypeBJ( whichType, whichUnit)",
           "description": "function UnitRemoveTypeBJ takes unittype whichType, unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitAddTypeBJ": {
           "prefix": "fnUnitAddTypeBJ",
           "body": "UnitAddTypeBJ(${1:unittype_whichType},${2:unit_whichUnit}",
            "completion": "UnitAddTypeBJ( whichType, whichUnit)",
           "description": "function UnitAddTypeBJ takes unittype whichType, unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitMakeAbilityPermanentBJ": {
           "prefix": "fnUnitMakeAbilityPermanentBJ",
           "body": "UnitMakeAbilityPermanentBJ(${1:integer_abilityId},${2:boolean_permanent},${3:unit_whichUnit}",
            "completion": "UnitMakeAbilityPermanentBJ( abilityId, permanent, whichUnit)",
           "description": "function UnitMakeAbilityPermanentBJ takes boolean permanent, integer abilityId, unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnSetUnitExplodedBJ": {
           "prefix": "fnSetUnitExplodedBJ",
           "body": "SetUnitExplodedBJ(${1:boolean_exploded},${2:unit_whichUnit}",
            "completion": "SetUnitExplodedBJ( exploded, whichUnit)",
           "description": "function SetUnitExplodedBJ takes unit whichUnit, boolean exploded returns nothing",
           "scope": "source.vjass"
       },
        "fnExplodeUnitBJ": {
           "prefix": "fnExplodeUnitBJ",
           "body": "ExplodeUnitBJ(${1:unit_whichUnit}",
            "completion": "ExplodeUnitBJ( whichUnit)",
           "description": "function ExplodeUnitBJ takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnGetTransportUnitBJ": {
           "prefix": "fnGetTransportUnitBJ",
           "body": "GetTransportUnitBJ(",
            "completion": "GetTransportUnitBJ()",
           "description": "function GetTransportUnitBJ takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetLoadedUnitBJ": {
           "prefix": "fnGetLoadedUnitBJ",
           "body": "GetLoadedUnitBJ(",
            "completion": "GetLoadedUnitBJ()",
           "description": "function GetLoadedUnitBJ takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnIsUnitInTransportBJ": {
           "prefix": "fnIsUnitInTransportBJ",
           "body": "IsUnitInTransportBJ(${1:unit_whichTransport}",
            "completion": "IsUnitInTransportBJ( whichTransport)",
           "description": "function IsUnitInTransportBJ takes unit whichUnit, unit whichTransport returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitLoadedBJ": {
           "prefix": "fnIsUnitLoadedBJ",
           "body": "IsUnitLoadedBJ(${1:unit_whichUnit}",
            "completion": "IsUnitLoadedBJ( whichUnit)",
           "description": "function IsUnitLoadedBJ takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitIllusionBJ": {
           "prefix": "fnIsUnitIllusionBJ",
           "body": "IsUnitIllusionBJ(${1:unit_whichUnit}",
            "completion": "IsUnitIllusionBJ( whichUnit)",
           "description": "function IsUnitIllusionBJ takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnReplaceUnitBJ": {
           "prefix": "fnReplaceUnitBJ",
           "body": "ReplaceUnitBJ(${1:integer_unitStateMethod},${2:unit_whichUnit}",
            "completion": "ReplaceUnitBJ( unitStateMethod, whichUnit)",
           "description": "function ReplaceUnitBJ takes unit whichUnit, integer newUnitId, integer unitStateMethod returns unit",
           "scope": "source.vjass"
       },
        "fnGetLastReplacedUnitBJ": {
           "prefix": "fnGetLastReplacedUnitBJ",
           "body": "GetLastReplacedUnitBJ(",
            "completion": "GetLastReplacedUnitBJ()",
           "description": "function GetLastReplacedUnitBJ takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnSetUnitPositionLocFacingBJ": {
           "prefix": "fnSetUnitPositionLocFacingBJ",
           "body": "SetUnitPositionLocFacingBJ(${1:real_facing},${2:location_loc},${3:unit_whichUnit}",
            "completion": "SetUnitPositionLocFacingBJ( facing, loc, whichUnit)",
           "description": "function SetUnitPositionLocFacingBJ takes unit whichUnit, location loc, real facing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitPositionLocFacingLocBJ": {
           "prefix": "fnSetUnitPositionLocFacingLocBJ",
           "body": "SetUnitPositionLocFacingLocBJ(${1:location_lookAt},${2:unit_whichUnit}",
            "completion": "SetUnitPositionLocFacingLocBJ( lookAt, whichUnit)",
           "description": "function SetUnitPositionLocFacingLocBJ takes unit whichUnit, location loc, location lookAt returns nothing",
           "scope": "source.vjass"
       },
        "fnAddItemToStockBJ": {
           "prefix": "fnAddItemToStockBJ",
           "body": "AddItemToStockBJ(${1:integer_stockMax},${2:unit_whichUnit}",
            "completion": "AddItemToStockBJ( stockMax, whichUnit)",
           "description": "function AddItemToStockBJ takes integer itemId, unit whichUnit, integer currentStock, integer stockMax returns nothing",
           "scope": "source.vjass"
       },
        "fnAddUnitToStockBJ": {
           "prefix": "fnAddUnitToStockBJ",
           "body": "AddUnitToStockBJ(${1:integer_stockMax},${2:unit_whichUnit}",
            "completion": "AddUnitToStockBJ( stockMax, whichUnit)",
           "description": "function AddUnitToStockBJ takes integer unitId, unit whichUnit, integer currentStock, integer stockMax returns nothing",
           "scope": "source.vjass"
       },
        "fnRemoveItemFromStockBJ": {
           "prefix": "fnRemoveItemFromStockBJ",
           "body": "RemoveItemFromStockBJ(${1:integer_itemId},${2:unit_whichUnit}",
            "completion": "RemoveItemFromStockBJ( itemId, whichUnit)",
           "description": "function RemoveItemFromStockBJ takes integer itemId, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnRemoveUnitFromStockBJ": {
           "prefix": "fnRemoveUnitFromStockBJ",
           "body": "RemoveUnitFromStockBJ(${1:integer_unitId},${2:unit_whichUnit}",
            "completion": "RemoveUnitFromStockBJ( unitId, whichUnit)",
           "description": "function RemoveUnitFromStockBJ takes integer unitId, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitUseFoodBJ": {
           "prefix": "fnSetUnitUseFoodBJ",
           "body": "SetUnitUseFoodBJ(${1:boolean_enable},${2:unit_whichUnit}",
            "completion": "SetUnitUseFoodBJ( enable, whichUnit)",
           "description": "function SetUnitUseFoodBJ takes boolean enable, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitDamagePointLoc": {
           "prefix": "fnUnitDamagePointLoc",
           "body": "UnitDamagePointLoc(${1:real_amount},${2:attacktype_whichAttack},${3:location_loc},${4:unit_whichUnit},${5:damagetype_whichDamage}",
            "completion": "UnitDamagePointLoc( amount, whichAttack, loc, whichUnit, whichDamage)",
           "description": "function UnitDamagePointLoc takes unit whichUnit, real delay, real radius, location loc, real amount, attacktype whichAttack, damagetype whichDamage returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitDamageTargetBJ": {
           "prefix": "fnUnitDamageTargetBJ",
           "body": "UnitDamageTargetBJ(${1:real_amount},${2:damagetype_whichDamage},${3:attacktype_whichAttack},${4:unit_target}",
            "completion": "UnitDamageTargetBJ( amount, whichDamage, whichAttack, target)",
           "description": "function UnitDamageTargetBJ takes unit whichUnit, unit target, real amount, attacktype whichAttack, damagetype whichDamage returns boolean",
           "scope": "source.vjass"
       },
        "fnCreateDestructableLoc": {
           "prefix": "fnCreateDestructableLoc",
           "body": "CreateDestructableLoc(${1:real_scale},${2:integer_variation},${3:location_loc}",
            "completion": "CreateDestructableLoc( scale, variation, loc)",
           "description": "function CreateDestructableLoc takes integer objectid, location loc, real facing, real scale, integer variation returns destructable",
           "scope": "source.vjass"
       },
        "fnCreateDeadDestructableLocBJ": {
           "prefix": "fnCreateDeadDestructableLocBJ",
           "body": "CreateDeadDestructableLocBJ(${1:real_scale},${2:integer_variation},${3:location_loc}",
            "completion": "CreateDeadDestructableLocBJ( scale, variation, loc)",
           "description": "function CreateDeadDestructableLocBJ takes integer objectid, location loc, real facing, real scale, integer variation returns destructable",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedDestructable": {
           "prefix": "fnGetLastCreatedDestructable",
           "body": "GetLastCreatedDestructable(",
            "completion": "GetLastCreatedDestructable()",
           "description": "function GetLastCreatedDestructable takes nothing returns destructable",
           "scope": "source.vjass"
       },
        "fnShowDestructableBJ": {
           "prefix": "fnShowDestructableBJ",
           "body": "ShowDestructableBJ(${1:boolean_flag},${2:destructable_d}",
            "completion": "ShowDestructableBJ( flag, d)",
           "description": "function ShowDestructableBJ takes boolean flag, destructable d returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDestructableInvulnerableBJ": {
           "prefix": "fnSetDestructableInvulnerableBJ",
           "body": "SetDestructableInvulnerableBJ(${1:boolean_flag},${2:destructable_d}",
            "completion": "SetDestructableInvulnerableBJ( flag, d)",
           "description": "function SetDestructableInvulnerableBJ takes destructable d, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnIsDestructableInvulnerableBJ": {
           "prefix": "fnIsDestructableInvulnerableBJ",
           "body": "IsDestructableInvulnerableBJ(${1:destructable_d}",
            "completion": "IsDestructableInvulnerableBJ( d)",
           "description": "function IsDestructableInvulnerableBJ takes destructable d returns boolean",
           "scope": "source.vjass"
       },
        "fnGetDestructableLoc": {
           "prefix": "fnGetDestructableLoc",
           "body": "GetDestructableLoc(${1:destructable_whichDestructable}",
            "completion": "GetDestructableLoc( whichDestructable)",
           "description": "function GetDestructableLoc takes destructable whichDestructable returns location",
           "scope": "source.vjass"
       },
        "fnEnumDestructablesInRectAll": {
           "prefix": "fnEnumDestructablesInRectAll",
           "body": "EnumDestructablesInRectAll(${1:code_actionFunc},${2:rect_r}",
            "completion": "EnumDestructablesInRectAll( actionFunc, r)",
           "description": "function EnumDestructablesInRectAll takes rect r, code actionFunc returns nothing",
           "scope": "source.vjass"
       },
        "fnEnumDestructablesInCircleBJFilter": {
           "prefix": "fnEnumDestructablesInCircleBJFilter",
           "body": "EnumDestructablesInCircleBJFilter(",
            "completion": "EnumDestructablesInCircleBJFilter()",
           "description": "function EnumDestructablesInCircleBJFilter takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnIsDestructableDeadBJ": {
           "prefix": "fnIsDestructableDeadBJ",
           "body": "IsDestructableDeadBJ(${1:destructable_d}",
            "completion": "IsDestructableDeadBJ( d)",
           "description": "function IsDestructableDeadBJ takes destructable d returns boolean",
           "scope": "source.vjass"
       },
        "fnIsDestructableAliveBJ": {
           "prefix": "fnIsDestructableAliveBJ",
           "body": "IsDestructableAliveBJ(${1:destructable_d}",
            "completion": "IsDestructableAliveBJ( d)",
           "description": "function IsDestructableAliveBJ takes destructable d returns boolean",
           "scope": "source.vjass"
       },
        "fnRandomDestructableInRectBJEnum": {
           "prefix": "fnRandomDestructableInRectBJEnum",
           "body": "RandomDestructableInRectBJEnum(",
            "completion": "RandomDestructableInRectBJEnum()",
           "description": "function RandomDestructableInRectBJEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnRandomDestructableInRectBJ": {
           "prefix": "fnRandomDestructableInRectBJ",
           "body": "RandomDestructableInRectBJ(${1:boolexpr_filter},${2:rect_r}",
            "completion": "RandomDestructableInRectBJ( filter, r)",
           "description": "function RandomDestructableInRectBJ takes rect r, boolexpr filter returns destructable",
           "scope": "source.vjass"
       },
        "fnRandomDestructableInRectSimpleBJ": {
           "prefix": "fnRandomDestructableInRectSimpleBJ",
           "body": "RandomDestructableInRectSimpleBJ(${1:rect_r}",
            "completion": "RandomDestructableInRectSimpleBJ( r)",
           "description": "function RandomDestructableInRectSimpleBJ takes rect r returns destructable",
           "scope": "source.vjass"
       },
        "fnEnumDestructablesInCircleBJ": {
           "prefix": "fnEnumDestructablesInCircleBJ",
           "body": "EnumDestructablesInCircleBJ(${1:real_radius},${2:code_actionFunc},${3:location_loc}",
            "completion": "EnumDestructablesInCircleBJ( radius, actionFunc, loc)",
           "description": "function EnumDestructablesInCircleBJ takes real radius, location loc, code actionFunc returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDestructableLifePercentBJ": {
           "prefix": "fnSetDestructableLifePercentBJ",
           "body": "SetDestructableLifePercentBJ(${1:real_percent},${2:destructable_d}",
            "completion": "SetDestructableLifePercentBJ( percent, d)",
           "description": "function SetDestructableLifePercentBJ takes destructable d, real percent returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDestructableMaxLifeBJ": {
           "prefix": "fnSetDestructableMaxLifeBJ",
           "body": "SetDestructableMaxLifeBJ(${1:real_max},${2:destructable_d}",
            "completion": "SetDestructableMaxLifeBJ( max, d)",
           "description": "function SetDestructableMaxLifeBJ takes destructable d, real max returns nothing",
           "scope": "source.vjass"
       },
        "fnModifyGateBJ": {
           "prefix": "fnModifyGateBJ",
           "body": "ModifyGateBJ(${1:integer_gateOperation},${2:destructable_d}",
            "completion": "ModifyGateBJ( gateOperation, d)",
           "description": "function ModifyGateBJ takes integer gateOperation, destructable d returns nothing",
           "scope": "source.vjass"
       },
        "fnGetElevatorHeight": {
           "prefix": "fnGetElevatorHeight",
           "body": "GetElevatorHeight(${1:destructable_d}",
            "completion": "GetElevatorHeight( d)",
           "description": "function GetElevatorHeight takes destructable d returns integer",
           "scope": "source.vjass"
       },
        "fnChangeElevatorHeight": {
           "prefix": "fnChangeElevatorHeight",
           "body": "ChangeElevatorHeight(${1:integer_newHeight},${2:destructable_d}",
            "completion": "ChangeElevatorHeight( newHeight, d)",
           "description": "function ChangeElevatorHeight takes destructable d, integer newHeight returns nothing",
           "scope": "source.vjass"
       },
        "fnNudgeUnitsInRectEnum": {
           "prefix": "fnNudgeUnitsInRectEnum",
           "body": "NudgeUnitsInRectEnum(",
            "completion": "NudgeUnitsInRectEnum()",
           "description": "function NudgeUnitsInRectEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnNudgeItemsInRectEnum": {
           "prefix": "fnNudgeItemsInRectEnum",
           "body": "NudgeItemsInRectEnum(",
            "completion": "NudgeItemsInRectEnum()",
           "description": "function NudgeItemsInRectEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnNudgeObjectsInRect": {
           "prefix": "fnNudgeObjectsInRect",
           "body": "NudgeObjectsInRect(${1:rect_nudgeArea}",
            "completion": "NudgeObjectsInRect( nudgeArea)",
           "description": "function NudgeObjectsInRect takes rect nudgeArea returns nothing",
           "scope": "source.vjass"
       },
        "fnNearbyElevatorExistsEnum": {
           "prefix": "fnNearbyElevatorExistsEnum",
           "body": "NearbyElevatorExistsEnum(",
            "completion": "NearbyElevatorExistsEnum()",
           "description": "function NearbyElevatorExistsEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnNearbyElevatorExists": {
           "prefix": "fnNearbyElevatorExists",
           "body": "NearbyElevatorExists(${1:real_y}",
            "completion": "NearbyElevatorExists( y)",
           "description": "function NearbyElevatorExists takes real x, real y returns boolean",
           "scope": "source.vjass"
       },
        "fnFindElevatorWallBlockerEnum": {
           "prefix": "fnFindElevatorWallBlockerEnum",
           "body": "FindElevatorWallBlockerEnum(",
            "completion": "FindElevatorWallBlockerEnum()",
           "description": "function FindElevatorWallBlockerEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnChangeElevatorWallBlocker": {
           "prefix": "fnChangeElevatorWallBlocker",
           "body": "ChangeElevatorWallBlocker(${1:real_facing},${2:boolean_open}",
            "completion": "ChangeElevatorWallBlocker( facing, open)",
           "description": "function ChangeElevatorWallBlocker takes real x, real y, real facing, boolean open returns nothing",
           "scope": "source.vjass"
       },
        "fnChangeElevatorWalls": {
           "prefix": "fnChangeElevatorWalls",
           "body": "ChangeElevatorWalls(${1:integer_walls},${2:boolean_open},${3:destructable_d}",
            "completion": "ChangeElevatorWalls( walls, open, d)",
           "description": "function ChangeElevatorWalls takes boolean open, integer walls, destructable d returns nothing",
           "scope": "source.vjass"
       },
        "fnWaygateActivateBJ": {
           "prefix": "fnWaygateActivateBJ",
           "body": "WaygateActivateBJ(${1:boolean_activate},${2:unit_waygate}",
            "completion": "WaygateActivateBJ( activate, waygate)",
           "description": "function WaygateActivateBJ takes boolean activate, unit waygate returns nothing",
           "scope": "source.vjass"
       },
        "fnWaygateIsActiveBJ": {
           "prefix": "fnWaygateIsActiveBJ",
           "body": "WaygateIsActiveBJ(${1:unit_waygate}",
            "completion": "WaygateIsActiveBJ( waygate)",
           "description": "function WaygateIsActiveBJ takes unit waygate returns boolean",
           "scope": "source.vjass"
       },
        "fnWaygateSetDestinationLocBJ": {
           "prefix": "fnWaygateSetDestinationLocBJ",
           "body": "WaygateSetDestinationLocBJ(${1:location_loc},${2:unit_waygate}",
            "completion": "WaygateSetDestinationLocBJ( loc, waygate)",
           "description": "function WaygateSetDestinationLocBJ takes unit waygate, location loc returns nothing",
           "scope": "source.vjass"
       },
        "fnWaygateGetDestinationLocBJ": {
           "prefix": "fnWaygateGetDestinationLocBJ",
           "body": "WaygateGetDestinationLocBJ(${1:unit_waygate}",
            "completion": "WaygateGetDestinationLocBJ( waygate)",
           "description": "function WaygateGetDestinationLocBJ takes unit waygate returns location",
           "scope": "source.vjass"
       },
        "fnUnitSetUsesAltIconBJ": {
           "prefix": "fnUnitSetUsesAltIconBJ",
           "body": "UnitSetUsesAltIconBJ(${1:boolean_flag},${2:unit_whichUnit}",
            "completion": "UnitSetUsesAltIconBJ( flag, whichUnit)",
           "description": "function UnitSetUsesAltIconBJ takes boolean flag, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnForceUIKeyBJ": {
           "prefix": "fnForceUIKeyBJ",
           "body": "ForceUIKeyBJ(${1:player_whichPlayer},${2:string_key}",
            "completion": "ForceUIKeyBJ( whichPlayer, key)",
           "description": "function ForceUIKeyBJ takes player whichPlayer, string key returns nothing",
           "scope": "source.vjass"
       },
        "fnForceUICancelBJ": {
           "prefix": "fnForceUICancelBJ",
           "body": "ForceUICancelBJ(${1:player_whichPlayer}",
            "completion": "ForceUICancelBJ( whichPlayer)",
           "description": "function ForceUICancelBJ takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnForGroupBJ": {
           "prefix": "fnForGroupBJ",
           "body": "ForGroupBJ(${1:code_callback},${2:group_whichGroup}",
            "completion": "ForGroupBJ( callback, whichGroup)",
           "description": "function ForGroupBJ takes group whichGroup, code callback returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupAddUnitSimple": {
           "prefix": "fnGroupAddUnitSimple",
           "body": "GroupAddUnitSimple(${1:group_whichGroup},${2:unit_whichUnit}",
            "completion": "GroupAddUnitSimple( whichGroup, whichUnit)",
           "description": "function GroupAddUnitSimple takes unit whichUnit, group whichGroup returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupRemoveUnitSimple": {
           "prefix": "fnGroupRemoveUnitSimple",
           "body": "GroupRemoveUnitSimple(${1:group_whichGroup},${2:unit_whichUnit}",
            "completion": "GroupRemoveUnitSimple( whichGroup, whichUnit)",
           "description": "function GroupRemoveUnitSimple takes unit whichUnit, group whichGroup returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupAddGroupEnum": {
           "prefix": "fnGroupAddGroupEnum",
           "body": "GroupAddGroupEnum(",
            "completion": "GroupAddGroupEnum()",
           "description": "function GroupAddGroupEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupAddGroup": {
           "prefix": "fnGroupAddGroup",
           "body": "GroupAddGroup(${1:group_destGroup}",
            "completion": "GroupAddGroup( destGroup)",
           "description": "function GroupAddGroup takes group sourceGroup, group destGroup returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupRemoveGroupEnum": {
           "prefix": "fnGroupRemoveGroupEnum",
           "body": "GroupRemoveGroupEnum(",
            "completion": "GroupRemoveGroupEnum()",
           "description": "function GroupRemoveGroupEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupRemoveGroup": {
           "prefix": "fnGroupRemoveGroup",
           "body": "GroupRemoveGroup(${1:group_destGroup}",
            "completion": "GroupRemoveGroup( destGroup)",
           "description": "function GroupRemoveGroup takes group sourceGroup, group destGroup returns nothing",
           "scope": "source.vjass"
       },
        "fnForceAddPlayerSimple": {
           "prefix": "fnForceAddPlayerSimple",
           "body": "ForceAddPlayerSimple(${1:player_whichPlayer},${2:force_whichForce}",
            "completion": "ForceAddPlayerSimple( whichPlayer, whichForce)",
           "description": "function ForceAddPlayerSimple takes player whichPlayer, force whichForce returns nothing",
           "scope": "source.vjass"
       },
        "fnForceRemovePlayerSimple": {
           "prefix": "fnForceRemovePlayerSimple",
           "body": "ForceRemovePlayerSimple(${1:player_whichPlayer},${2:force_whichForce}",
            "completion": "ForceRemovePlayerSimple( whichPlayer, whichForce)",
           "description": "function ForceRemovePlayerSimple takes player whichPlayer, force whichForce returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupPickRandomUnitEnum": {
           "prefix": "fnGroupPickRandomUnitEnum",
           "body": "GroupPickRandomUnitEnum(",
            "completion": "GroupPickRandomUnitEnum()",
           "description": "function GroupPickRandomUnitEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupPickRandomUnit": {
           "prefix": "fnGroupPickRandomUnit",
           "body": "GroupPickRandomUnit(${1:group_whichGroup}",
            "completion": "GroupPickRandomUnit( whichGroup)",
           "description": "function GroupPickRandomUnit takes group whichGroup returns unit",
           "scope": "source.vjass"
       },
        "fnForcePickRandomPlayerEnum": {
           "prefix": "fnForcePickRandomPlayerEnum",
           "body": "ForcePickRandomPlayerEnum(",
            "completion": "ForcePickRandomPlayerEnum()",
           "description": "function ForcePickRandomPlayerEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnForcePickRandomPlayer": {
           "prefix": "fnForcePickRandomPlayer",
           "body": "ForcePickRandomPlayer(${1:force_whichForce}",
            "completion": "ForcePickRandomPlayer( whichForce)",
           "description": "function ForcePickRandomPlayer takes force whichForce returns player",
           "scope": "source.vjass"
       },
        "fnEnumUnitsSelected": {
           "prefix": "fnEnumUnitsSelected",
           "body": "EnumUnitsSelected(${1:player_whichPlayer},${2:code_enumAction},${3:boolexpr_enumFilter}",
            "completion": "EnumUnitsSelected( whichPlayer, enumAction, enumFilter)",
           "description": "function EnumUnitsSelected takes player whichPlayer, boolexpr enumFilter, code enumAction returns nothing",
           "scope": "source.vjass"
       },
        "fnGetUnitsInRectMatching": {
           "prefix": "fnGetUnitsInRectMatching",
           "body": "GetUnitsInRectMatching(${1:boolexpr_filter},${2:rect_r}",
            "completion": "GetUnitsInRectMatching( filter, r)",
           "description": "function GetUnitsInRectMatching takes rect r, boolexpr filter returns group",
           "scope": "source.vjass"
       },
        "fnGetUnitsInRectAll": {
           "prefix": "fnGetUnitsInRectAll",
           "body": "GetUnitsInRectAll(${1:rect_r}",
            "completion": "GetUnitsInRectAll( r)",
           "description": "function GetUnitsInRectAll takes rect r returns group",
           "scope": "source.vjass"
       },
        "fnGetUnitsInRectOfPlayerFilter": {
           "prefix": "fnGetUnitsInRectOfPlayerFilter",
           "body": "GetUnitsInRectOfPlayerFilter(",
            "completion": "GetUnitsInRectOfPlayerFilter()",
           "description": "function GetUnitsInRectOfPlayerFilter takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnGetUnitsInRectOfPlayer": {
           "prefix": "fnGetUnitsInRectOfPlayer",
           "body": "GetUnitsInRectOfPlayer(${1:player_whichPlayer},${2:rect_r}",
            "completion": "GetUnitsInRectOfPlayer( whichPlayer, r)",
           "description": "function GetUnitsInRectOfPlayer takes rect r, player whichPlayer returns group",
           "scope": "source.vjass"
       },
        "fnGetUnitsInRangeOfLocMatching": {
           "prefix": "fnGetUnitsInRangeOfLocMatching",
           "body": "GetUnitsInRangeOfLocMatching(${1:real_radius},${2:location_whichLocation},${3:boolexpr_filter}",
            "completion": "GetUnitsInRangeOfLocMatching( radius, whichLocation, filter)",
           "description": "function GetUnitsInRangeOfLocMatching takes real radius, location whichLocation, boolexpr filter returns group",
           "scope": "source.vjass"
       },
        "fnGetUnitsInRangeOfLocAll": {
           "prefix": "fnGetUnitsInRangeOfLocAll",
           "body": "GetUnitsInRangeOfLocAll(${1:real_radius},${2:location_whichLocation}",
            "completion": "GetUnitsInRangeOfLocAll( radius, whichLocation)",
           "description": "function GetUnitsInRangeOfLocAll takes real radius, location whichLocation returns group",
           "scope": "source.vjass"
       },
        "fnGetUnitsOfTypeIdAllFilter": {
           "prefix": "fnGetUnitsOfTypeIdAllFilter",
           "body": "GetUnitsOfTypeIdAllFilter(",
            "completion": "GetUnitsOfTypeIdAllFilter()",
           "description": "function GetUnitsOfTypeIdAllFilter takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnGetUnitsOfTypeIdAll": {
           "prefix": "fnGetUnitsOfTypeIdAll",
           "body": "GetUnitsOfTypeIdAll(${1:integer_unitid}",
            "completion": "GetUnitsOfTypeIdAll( unitid)",
           "description": "function GetUnitsOfTypeIdAll takes integer unitid returns group",
           "scope": "source.vjass"
       },
        "fnGetUnitsOfPlayerMatching": {
           "prefix": "fnGetUnitsOfPlayerMatching",
           "body": "GetUnitsOfPlayerMatching(${1:player_whichPlayer},${2:boolexpr_filter}",
            "completion": "GetUnitsOfPlayerMatching( whichPlayer, filter)",
           "description": "function GetUnitsOfPlayerMatching takes player whichPlayer, boolexpr filter returns group",
           "scope": "source.vjass"
       },
        "fnGetUnitsOfPlayerAll": {
           "prefix": "fnGetUnitsOfPlayerAll",
           "body": "GetUnitsOfPlayerAll(${1:player_whichPlayer}",
            "completion": "GetUnitsOfPlayerAll( whichPlayer)",
           "description": "function GetUnitsOfPlayerAll takes player whichPlayer returns group",
           "scope": "source.vjass"
       },
        "fnGetUnitsOfPlayerAndTypeIdFilter": {
           "prefix": "fnGetUnitsOfPlayerAndTypeIdFilter",
           "body": "GetUnitsOfPlayerAndTypeIdFilter(",
            "completion": "GetUnitsOfPlayerAndTypeIdFilter()",
           "description": "function GetUnitsOfPlayerAndTypeIdFilter takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnGetUnitsOfPlayerAndTypeId": {
           "prefix": "fnGetUnitsOfPlayerAndTypeId",
           "body": "GetUnitsOfPlayerAndTypeId(${1:player_whichPlayer},${2:integer_unitid}",
            "completion": "GetUnitsOfPlayerAndTypeId( whichPlayer, unitid)",
           "description": "function GetUnitsOfPlayerAndTypeId takes player whichPlayer, integer unitid returns group",
           "scope": "source.vjass"
       },
        "fnGetUnitsSelectedAll": {
           "prefix": "fnGetUnitsSelectedAll",
           "body": "GetUnitsSelectedAll(${1:player_whichPlayer}",
            "completion": "GetUnitsSelectedAll( whichPlayer)",
           "description": "function GetUnitsSelectedAll takes player whichPlayer returns group",
           "scope": "source.vjass"
       },
        "fnGetForceOfPlayer": {
           "prefix": "fnGetForceOfPlayer",
           "body": "GetForceOfPlayer(${1:player_whichPlayer}",
            "completion": "GetForceOfPlayer( whichPlayer)",
           "description": "function GetForceOfPlayer takes player whichPlayer returns force",
           "scope": "source.vjass"
       },
        "fnGetPlayersAll": {
           "prefix": "fnGetPlayersAll",
           "body": "GetPlayersAll(",
            "completion": "GetPlayersAll()",
           "description": "function GetPlayersAll takes nothing returns force",
           "scope": "source.vjass"
       },
        "fnGetPlayersByMapControl": {
           "prefix": "fnGetPlayersByMapControl",
           "body": "GetPlayersByMapControl(${1:mapcontrol_whichControl}",
            "completion": "GetPlayersByMapControl( whichControl)",
           "description": "function GetPlayersByMapControl takes mapcontrol whichControl returns force",
           "scope": "source.vjass"
       },
        "fnGetPlayersAllies": {
           "prefix": "fnGetPlayersAllies",
           "body": "GetPlayersAllies(${1:player_whichPlayer}",
            "completion": "GetPlayersAllies( whichPlayer)",
           "description": "function GetPlayersAllies takes player whichPlayer returns force",
           "scope": "source.vjass"
       },
        "fnGetPlayersEnemies": {
           "prefix": "fnGetPlayersEnemies",
           "body": "GetPlayersEnemies(${1:player_whichPlayer}",
            "completion": "GetPlayersEnemies( whichPlayer)",
           "description": "function GetPlayersEnemies takes player whichPlayer returns force",
           "scope": "source.vjass"
       },
        "fnGetPlayersMatching": {
           "prefix": "fnGetPlayersMatching",
           "body": "GetPlayersMatching(${1:boolexpr_filter}",
            "completion": "GetPlayersMatching( filter)",
           "description": "function GetPlayersMatching takes boolexpr filter returns force",
           "scope": "source.vjass"
       },
        "fnCountUnitsInGroupEnum": {
           "prefix": "fnCountUnitsInGroupEnum",
           "body": "CountUnitsInGroupEnum(",
            "completion": "CountUnitsInGroupEnum()",
           "description": "function CountUnitsInGroupEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCountUnitsInGroup": {
           "prefix": "fnCountUnitsInGroup",
           "body": "CountUnitsInGroup(${1:group_g}",
            "completion": "CountUnitsInGroup( g)",
           "description": "function CountUnitsInGroup takes group g returns integer",
           "scope": "source.vjass"
       },
        "fnCountPlayersInForceEnum": {
           "prefix": "fnCountPlayersInForceEnum",
           "body": "CountPlayersInForceEnum(",
            "completion": "CountPlayersInForceEnum()",
           "description": "function CountPlayersInForceEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCountPlayersInForceBJ": {
           "prefix": "fnCountPlayersInForceBJ",
           "body": "CountPlayersInForceBJ(${1:force_f}",
            "completion": "CountPlayersInForceBJ( f)",
           "description": "function CountPlayersInForceBJ takes force f returns integer",
           "scope": "source.vjass"
       },
        "fnGetRandomSubGroupEnum": {
           "prefix": "fnGetRandomSubGroupEnum",
           "body": "GetRandomSubGroupEnum(",
            "completion": "GetRandomSubGroupEnum()",
           "description": "function GetRandomSubGroupEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnGetRandomSubGroup": {
           "prefix": "fnGetRandomSubGroup",
           "body": "GetRandomSubGroup(${1:integer_count},${2:group_sourceGroup}",
            "completion": "GetRandomSubGroup( count, sourceGroup)",
           "description": "function GetRandomSubGroup takes integer count, group sourceGroup returns group",
           "scope": "source.vjass"
       },
        "fnLivingPlayerUnitsOfTypeIdFilter": {
           "prefix": "fnLivingPlayerUnitsOfTypeIdFilter",
           "body": "LivingPlayerUnitsOfTypeIdFilter(",
            "completion": "LivingPlayerUnitsOfTypeIdFilter()",
           "description": "function LivingPlayerUnitsOfTypeIdFilter takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnCountLivingPlayerUnitsOfTypeId": {
           "prefix": "fnCountLivingPlayerUnitsOfTypeId",
           "body": "CountLivingPlayerUnitsOfTypeId(${1:integer_unitId},${2:player_whichPlayer}",
            "completion": "CountLivingPlayerUnitsOfTypeId( unitId, whichPlayer)",
           "description": "function CountLivingPlayerUnitsOfTypeId takes integer unitId, player whichPlayer returns integer",
           "scope": "source.vjass"
       },
        "fnResetUnitAnimation": {
           "prefix": "fnResetUnitAnimation",
           "body": "ResetUnitAnimation(${1:unit_whichUnit}",
            "completion": "ResetUnitAnimation( whichUnit)",
           "description": "function ResetUnitAnimation takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitTimeScalePercent": {
           "prefix": "fnSetUnitTimeScalePercent",
           "body": "SetUnitTimeScalePercent(${1:real_percentScale},${2:unit_whichUnit}",
            "completion": "SetUnitTimeScalePercent( percentScale, whichUnit)",
           "description": "function SetUnitTimeScalePercent takes unit whichUnit, real percentScale returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitScalePercent": {
           "prefix": "fnSetUnitScalePercent",
           "body": "SetUnitScalePercent(${1:real_percentScaleZ},${2:unit_whichUnit}",
            "completion": "SetUnitScalePercent( percentScaleZ, whichUnit)",
           "description": "function SetUnitScalePercent takes unit whichUnit, real percentScaleX, real percentScaleY, real percentScaleZ returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitVertexColorBJ": {
           "prefix": "fnSetUnitVertexColorBJ",
           "body": "SetUnitVertexColorBJ(${1:real_transparency},${2:unit_whichUnit}",
            "completion": "SetUnitVertexColorBJ( transparency, whichUnit)",
           "description": "function SetUnitVertexColorBJ takes unit whichUnit, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitAddIndicatorBJ": {
           "prefix": "fnUnitAddIndicatorBJ",
           "body": "UnitAddIndicatorBJ(${1:real_transparency},${2:unit_whichUnit}",
            "completion": "UnitAddIndicatorBJ( transparency, whichUnit)",
           "description": "function UnitAddIndicatorBJ takes unit whichUnit, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnDestructableAddIndicatorBJ": {
           "prefix": "fnDestructableAddIndicatorBJ",
           "body": "DestructableAddIndicatorBJ(${1:real_transparency},${2:destructable_whichDestructable}",
            "completion": "DestructableAddIndicatorBJ( transparency, whichDestructable)",
           "description": "function DestructableAddIndicatorBJ takes destructable whichDestructable, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnItemAddIndicatorBJ": {
           "prefix": "fnItemAddIndicatorBJ",
           "body": "ItemAddIndicatorBJ(${1:real_transparency},${2:item_whichItem}",
            "completion": "ItemAddIndicatorBJ( transparency, whichItem)",
           "description": "function ItemAddIndicatorBJ takes item whichItem, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitFacingToFaceLocTimed": {
           "prefix": "fnSetUnitFacingToFaceLocTimed",
           "body": "SetUnitFacingToFaceLocTimed(${1:real_duration},${2:location_target},${3:unit_whichUnit}",
            "completion": "SetUnitFacingToFaceLocTimed( duration, target, whichUnit)",
           "description": "function SetUnitFacingToFaceLocTimed takes unit whichUnit, location target, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitFacingToFaceUnitTimed": {
           "prefix": "fnSetUnitFacingToFaceUnitTimed",
           "body": "SetUnitFacingToFaceUnitTimed(${1:real_duration},${2:unit_target}",
            "completion": "SetUnitFacingToFaceUnitTimed( duration, target)",
           "description": "function SetUnitFacingToFaceUnitTimed takes unit whichUnit, unit target, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnQueueUnitAnimationBJ": {
           "prefix": "fnQueueUnitAnimationBJ",
           "body": "QueueUnitAnimationBJ(${1:string_whichAnimation},${2:unit_whichUnit}",
            "completion": "QueueUnitAnimationBJ( whichAnimation, whichUnit)",
           "description": "function QueueUnitAnimationBJ takes unit whichUnit, string whichAnimation returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDestructableAnimationBJ": {
           "prefix": "fnSetDestructableAnimationBJ",
           "body": "SetDestructableAnimationBJ(${1:string_whichAnimation},${2:destructable_d}",
            "completion": "SetDestructableAnimationBJ( whichAnimation, d)",
           "description": "function SetDestructableAnimationBJ takes destructable d, string whichAnimation returns nothing",
           "scope": "source.vjass"
       },
        "fnQueueDestructableAnimationBJ": {
           "prefix": "fnQueueDestructableAnimationBJ",
           "body": "QueueDestructableAnimationBJ(${1:string_whichAnimation},${2:destructable_d}",
            "completion": "QueueDestructableAnimationBJ( whichAnimation, d)",
           "description": "function QueueDestructableAnimationBJ takes destructable d, string whichAnimation returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDestAnimationSpeedPercent": {
           "prefix": "fnSetDestAnimationSpeedPercent",
           "body": "SetDestAnimationSpeedPercent(${1:real_percentScale},${2:destructable_d}",
            "completion": "SetDestAnimationSpeedPercent( percentScale, d)",
           "description": "function SetDestAnimationSpeedPercent takes destructable d, real percentScale returns nothing",
           "scope": "source.vjass"
       },
        "fnDialogDisplayBJ": {
           "prefix": "fnDialogDisplayBJ",
           "body": "DialogDisplayBJ(${1:player_whichPlayer},${2:boolean_flag},${3:dialog_whichDialog}",
            "completion": "DialogDisplayBJ( whichPlayer, flag, whichDialog)",
           "description": "function DialogDisplayBJ takes boolean flag, dialog whichDialog, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnDialogSetMessageBJ": {
           "prefix": "fnDialogSetMessageBJ",
           "body": "DialogSetMessageBJ(${1:string_message},${2:dialog_whichDialog}",
            "completion": "DialogSetMessageBJ( message, whichDialog)",
           "description": "function DialogSetMessageBJ takes dialog whichDialog, string message returns nothing",
           "scope": "source.vjass"
       },
        "fnDialogAddButtonBJ": {
           "prefix": "fnDialogAddButtonBJ",
           "body": "DialogAddButtonBJ(${1:string_buttonText},${2:dialog_whichDialog}",
            "completion": "DialogAddButtonBJ( buttonText, whichDialog)",
           "description": "function DialogAddButtonBJ takes dialog whichDialog, string buttonText returns button",
           "scope": "source.vjass"
       },
        "fnDialogAddButtonWithHotkeyBJ": {
           "prefix": "fnDialogAddButtonWithHotkeyBJ",
           "body": "DialogAddButtonWithHotkeyBJ(${1:integer_hotkey},${2:string_buttonText},${3:dialog_whichDialog}",
            "completion": "DialogAddButtonWithHotkeyBJ( hotkey, buttonText, whichDialog)",
           "description": "function DialogAddButtonWithHotkeyBJ takes dialog whichDialog, string buttonText, integer hotkey returns button",
           "scope": "source.vjass"
       },
        "fnDialogClearBJ": {
           "prefix": "fnDialogClearBJ",
           "body": "DialogClearBJ(${1:dialog_whichDialog}",
            "completion": "DialogClearBJ( whichDialog)",
           "description": "function DialogClearBJ takes dialog whichDialog returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedButtonBJ": {
           "prefix": "fnGetLastCreatedButtonBJ",
           "body": "GetLastCreatedButtonBJ(",
            "completion": "GetLastCreatedButtonBJ()",
           "description": "function GetLastCreatedButtonBJ takes nothing returns button",
           "scope": "source.vjass"
       },
        "fnGetClickedButtonBJ": {
           "prefix": "fnGetClickedButtonBJ",
           "body": "GetClickedButtonBJ(",
            "completion": "GetClickedButtonBJ()",
           "description": "function GetClickedButtonBJ takes nothing returns button",
           "scope": "source.vjass"
       },
        "fnGetClickedDialogBJ": {
           "prefix": "fnGetClickedDialogBJ",
           "body": "GetClickedDialogBJ(",
            "completion": "GetClickedDialogBJ()",
           "description": "function GetClickedDialogBJ takes nothing returns dialog",
           "scope": "source.vjass"
       },
        "fnSetPlayerAllianceBJ": {
           "prefix": "fnSetPlayerAllianceBJ",
           "body": "SetPlayerAllianceBJ(${1:player_otherPlayer},${2:boolean_value},${3:alliancetype_whichAllianceSetting}",
            "completion": "SetPlayerAllianceBJ( otherPlayer, value, whichAllianceSetting)",
           "description": "function SetPlayerAllianceBJ takes player sourcePlayer, alliancetype whichAllianceSetting, boolean value, player otherPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerAllianceStateAllyBJ": {
           "prefix": "fnSetPlayerAllianceStateAllyBJ",
           "body": "SetPlayerAllianceStateAllyBJ(${1:player_otherPlayer},${2:boolean_flag}",
            "completion": "SetPlayerAllianceStateAllyBJ( otherPlayer, flag)",
           "description": "function SetPlayerAllianceStateAllyBJ takes player sourcePlayer, player otherPlayer, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerAllianceStateVisionBJ": {
           "prefix": "fnSetPlayerAllianceStateVisionBJ",
           "body": "SetPlayerAllianceStateVisionBJ(${1:player_otherPlayer},${2:boolean_flag}",
            "completion": "SetPlayerAllianceStateVisionBJ( otherPlayer, flag)",
           "description": "function SetPlayerAllianceStateVisionBJ takes player sourcePlayer, player otherPlayer, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerAllianceStateControlBJ": {
           "prefix": "fnSetPlayerAllianceStateControlBJ",
           "body": "SetPlayerAllianceStateControlBJ(${1:player_otherPlayer},${2:boolean_flag}",
            "completion": "SetPlayerAllianceStateControlBJ( otherPlayer, flag)",
           "description": "function SetPlayerAllianceStateControlBJ takes player sourcePlayer, player otherPlayer, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerAllianceStateFullControlBJ": {
           "prefix": "fnSetPlayerAllianceStateFullControlBJ",
           "body": "SetPlayerAllianceStateFullControlBJ(${1:player_otherPlayer},${2:boolean_flag}",
            "completion": "SetPlayerAllianceStateFullControlBJ( otherPlayer, flag)",
           "description": "function SetPlayerAllianceStateFullControlBJ takes player sourcePlayer, player otherPlayer, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerAllianceStateBJ": {
           "prefix": "fnSetPlayerAllianceStateBJ",
           "body": "SetPlayerAllianceStateBJ(${1:player_otherPlayer},${2:integer_allianceState}",
            "completion": "SetPlayerAllianceStateBJ( otherPlayer, allianceState)",
           "description": "function SetPlayerAllianceStateBJ takes player sourcePlayer, player otherPlayer, integer allianceState returns nothing",
           "scope": "source.vjass"
       },
        "fnSetForceAllianceStateBJ": {
           "prefix": "fnSetForceAllianceStateBJ",
           "body": "SetForceAllianceStateBJ(${1:integer_allianceState},${2:force_targetForce}",
            "completion": "SetForceAllianceStateBJ( allianceState, targetForce)",
           "description": "function SetForceAllianceStateBJ takes force sourceForce, force targetForce, integer allianceState returns nothing",
           "scope": "source.vjass"
       },
        "fnPlayersAreCoAllied": {
           "prefix": "fnPlayersAreCoAllied",
           "body": "PlayersAreCoAllied(${1:player_playerB}",
            "completion": "PlayersAreCoAllied( playerB)",
           "description": "function PlayersAreCoAllied takes player playerA, player playerB returns boolean",
           "scope": "source.vjass"
       },
        "fnShareEverythingWithTeamAI": {
           "prefix": "fnShareEverythingWithTeamAI",
           "body": "ShareEverythingWithTeamAI(${1:player_whichPlayer}",
            "completion": "ShareEverythingWithTeamAI( whichPlayer)",
           "description": "function ShareEverythingWithTeamAI takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnShareEverythingWithTeam": {
           "prefix": "fnShareEverythingWithTeam",
           "body": "ShareEverythingWithTeam(${1:player_whichPlayer}",
            "completion": "ShareEverythingWithTeam( whichPlayer)",
           "description": "function ShareEverythingWithTeam takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnConfigureNeutralVictim": {
           "prefix": "fnConfigureNeutralVictim",
           "body": "ConfigureNeutralVictim(",
            "completion": "ConfigureNeutralVictim()",
           "description": "function ConfigureNeutralVictim takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMakeUnitsPassiveForPlayerEnum": {
           "prefix": "fnMakeUnitsPassiveForPlayerEnum",
           "body": "MakeUnitsPassiveForPlayerEnum(",
            "completion": "MakeUnitsPassiveForPlayerEnum()",
           "description": "function MakeUnitsPassiveForPlayerEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMakeUnitsPassiveForPlayer": {
           "prefix": "fnMakeUnitsPassiveForPlayer",
           "body": "MakeUnitsPassiveForPlayer(${1:player_whichPlayer}",
            "completion": "MakeUnitsPassiveForPlayer( whichPlayer)",
           "description": "function MakeUnitsPassiveForPlayer takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnMakeUnitsPassiveForTeam": {
           "prefix": "fnMakeUnitsPassiveForTeam",
           "body": "MakeUnitsPassiveForTeam(${1:player_whichPlayer}",
            "completion": "MakeUnitsPassiveForTeam( whichPlayer)",
           "description": "function MakeUnitsPassiveForTeam takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnAllowVictoryDefeat": {
           "prefix": "fnAllowVictoryDefeat",
           "body": "AllowVictoryDefeat(${1:playergameresult_gameResult}",
            "completion": "AllowVictoryDefeat( gameResult)",
           "description": "function AllowVictoryDefeat takes playergameresult gameResult returns boolean",
           "scope": "source.vjass"
       },
        "fnEndGameBJ": {
           "prefix": "fnEndGameBJ",
           "body": "EndGameBJ(",
            "completion": "EndGameBJ()",
           "description": "function EndGameBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeVictoryDialogBJ": {
           "prefix": "fnMeleeVictoryDialogBJ",
           "body": "MeleeVictoryDialogBJ(${1:player_whichPlayer},${2:boolean_leftGame}",
            "completion": "MeleeVictoryDialogBJ( whichPlayer, leftGame)",
           "description": "function MeleeVictoryDialogBJ takes player whichPlayer, boolean leftGame returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeDefeatDialogBJ": {
           "prefix": "fnMeleeDefeatDialogBJ",
           "body": "MeleeDefeatDialogBJ(${1:player_whichPlayer},${2:boolean_leftGame}",
            "completion": "MeleeDefeatDialogBJ( whichPlayer, leftGame)",
           "description": "function MeleeDefeatDialogBJ takes player whichPlayer, boolean leftGame returns nothing",
           "scope": "source.vjass"
       },
        "fnGameOverDialogBJ": {
           "prefix": "fnGameOverDialogBJ",
           "body": "GameOverDialogBJ(${1:player_whichPlayer},${2:boolean_leftGame}",
            "completion": "GameOverDialogBJ( whichPlayer, leftGame)",
           "description": "function GameOverDialogBJ takes player whichPlayer, boolean leftGame returns nothing",
           "scope": "source.vjass"
       },
        "fnRemovePlayerPreserveUnitsBJ": {
           "prefix": "fnRemovePlayerPreserveUnitsBJ",
           "body": "RemovePlayerPreserveUnitsBJ(${1:player_whichPlayer},${2:playergameresult_gameResult},${3:boolean_leftGame}",
            "completion": "RemovePlayerPreserveUnitsBJ( whichPlayer, gameResult, leftGame)",
           "description": "function RemovePlayerPreserveUnitsBJ takes player whichPlayer, playergameresult gameResult, boolean leftGame returns nothing",
           "scope": "source.vjass"
       },
        "fnCustomVictoryOkBJ": {
           "prefix": "fnCustomVictoryOkBJ",
           "body": "CustomVictoryOkBJ(",
            "completion": "CustomVictoryOkBJ()",
           "description": "function CustomVictoryOkBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCustomVictoryQuitBJ": {
           "prefix": "fnCustomVictoryQuitBJ",
           "body": "CustomVictoryQuitBJ(",
            "completion": "CustomVictoryQuitBJ()",
           "description": "function CustomVictoryQuitBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCustomVictoryDialogBJ": {
           "prefix": "fnCustomVictoryDialogBJ",
           "body": "CustomVictoryDialogBJ(${1:player_whichPlayer}",
            "completion": "CustomVictoryDialogBJ( whichPlayer)",
           "description": "function CustomVictoryDialogBJ takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnCustomVictorySkipBJ": {
           "prefix": "fnCustomVictorySkipBJ",
           "body": "CustomVictorySkipBJ(${1:player_whichPlayer}",
            "completion": "CustomVictorySkipBJ( whichPlayer)",
           "description": "function CustomVictorySkipBJ takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnCustomVictoryBJ": {
           "prefix": "fnCustomVictoryBJ",
           "body": "CustomVictoryBJ(${1:player_whichPlayer},${2:boolean_showScores}",
            "completion": "CustomVictoryBJ( whichPlayer, showScores)",
           "description": "function CustomVictoryBJ takes player whichPlayer, boolean showDialog, boolean showScores returns nothing",
           "scope": "source.vjass"
       },
        "fnCustomDefeatRestartBJ": {
           "prefix": "fnCustomDefeatRestartBJ",
           "body": "CustomDefeatRestartBJ(",
            "completion": "CustomDefeatRestartBJ()",
           "description": "function CustomDefeatRestartBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCustomDefeatReduceDifficultyBJ": {
           "prefix": "fnCustomDefeatReduceDifficultyBJ",
           "body": "CustomDefeatReduceDifficultyBJ(",
            "completion": "CustomDefeatReduceDifficultyBJ()",
           "description": "function CustomDefeatReduceDifficultyBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCustomDefeatLoadBJ": {
           "prefix": "fnCustomDefeatLoadBJ",
           "body": "CustomDefeatLoadBJ(",
            "completion": "CustomDefeatLoadBJ()",
           "description": "function CustomDefeatLoadBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCustomDefeatQuitBJ": {
           "prefix": "fnCustomDefeatQuitBJ",
           "body": "CustomDefeatQuitBJ(",
            "completion": "CustomDefeatQuitBJ()",
           "description": "function CustomDefeatQuitBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCustomDefeatDialogBJ": {
           "prefix": "fnCustomDefeatDialogBJ",
           "body": "CustomDefeatDialogBJ(${1:player_whichPlayer},${2:string_message}",
            "completion": "CustomDefeatDialogBJ( whichPlayer, message)",
           "description": "function CustomDefeatDialogBJ takes player whichPlayer, string message returns nothing",
           "scope": "source.vjass"
       },
        "fnCustomDefeatBJ": {
           "prefix": "fnCustomDefeatBJ",
           "body": "CustomDefeatBJ(${1:player_whichPlayer},${2:string_message}",
            "completion": "CustomDefeatBJ( whichPlayer, message)",
           "description": "function CustomDefeatBJ takes player whichPlayer, string message returns nothing",
           "scope": "source.vjass"
       },
        "fnSetNextLevelBJ": {
           "prefix": "fnSetNextLevelBJ",
           "body": "SetNextLevelBJ(${1:string_nextLevel}",
            "completion": "SetNextLevelBJ( nextLevel)",
           "description": "function SetNextLevelBJ takes string nextLevel returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerOnScoreScreenBJ": {
           "prefix": "fnSetPlayerOnScoreScreenBJ",
           "body": "SetPlayerOnScoreScreenBJ(${1:player_whichPlayer},${2:boolean_flag}",
            "completion": "SetPlayerOnScoreScreenBJ( whichPlayer, flag)",
           "description": "function SetPlayerOnScoreScreenBJ takes boolean flag, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnCreateQuestBJ": {
           "prefix": "fnCreateQuestBJ",
           "body": "CreateQuestBJ(${1:integer_questType},${2:string_iconPath}",
            "completion": "CreateQuestBJ( questType, iconPath)",
           "description": "function CreateQuestBJ takes integer questType, string title, string description, string iconPath returns quest",
           "scope": "source.vjass"
       },
        "fnDestroyQuestBJ": {
           "prefix": "fnDestroyQuestBJ",
           "body": "DestroyQuestBJ(${1:quest_whichQuest}",
            "completion": "DestroyQuestBJ( whichQuest)",
           "description": "function DestroyQuestBJ takes quest whichQuest returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestSetEnabledBJ": {
           "prefix": "fnQuestSetEnabledBJ",
           "body": "QuestSetEnabledBJ(${1:quest_whichQuest},${2:boolean_enabled}",
            "completion": "QuestSetEnabledBJ( whichQuest, enabled)",
           "description": "function QuestSetEnabledBJ takes boolean enabled, quest whichQuest returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestSetTitleBJ": {
           "prefix": "fnQuestSetTitleBJ",
           "body": "QuestSetTitleBJ(${1:quest_whichQuest},${2:string_title}",
            "completion": "QuestSetTitleBJ( whichQuest, title)",
           "description": "function QuestSetTitleBJ takes quest whichQuest, string title returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestSetDescriptionBJ": {
           "prefix": "fnQuestSetDescriptionBJ",
           "body": "QuestSetDescriptionBJ(${1:quest_whichQuest},${2:string_description}",
            "completion": "QuestSetDescriptionBJ( whichQuest, description)",
           "description": "function QuestSetDescriptionBJ takes quest whichQuest, string description returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestSetCompletedBJ": {
           "prefix": "fnQuestSetCompletedBJ",
           "body": "QuestSetCompletedBJ(${1:boolean_completed},${2:quest_whichQuest}",
            "completion": "QuestSetCompletedBJ( completed, whichQuest)",
           "description": "function QuestSetCompletedBJ takes quest whichQuest, boolean completed returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestSetFailedBJ": {
           "prefix": "fnQuestSetFailedBJ",
           "body": "QuestSetFailedBJ(${1:boolean_failed},${2:quest_whichQuest}",
            "completion": "QuestSetFailedBJ( failed, whichQuest)",
           "description": "function QuestSetFailedBJ takes quest whichQuest, boolean failed returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestSetDiscoveredBJ": {
           "prefix": "fnQuestSetDiscoveredBJ",
           "body": "QuestSetDiscoveredBJ(${1:boolean_discovered},${2:quest_whichQuest}",
            "completion": "QuestSetDiscoveredBJ( discovered, whichQuest)",
           "description": "function QuestSetDiscoveredBJ takes quest whichQuest, boolean discovered returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedQuestBJ": {
           "prefix": "fnGetLastCreatedQuestBJ",
           "body": "GetLastCreatedQuestBJ(",
            "completion": "GetLastCreatedQuestBJ()",
           "description": "function GetLastCreatedQuestBJ takes nothing returns quest",
           "scope": "source.vjass"
       },
        "fnCreateQuestItemBJ": {
           "prefix": "fnCreateQuestItemBJ",
           "body": "CreateQuestItemBJ(${1:quest_whichQuest},${2:string_description}",
            "completion": "CreateQuestItemBJ( whichQuest, description)",
           "description": "function CreateQuestItemBJ takes quest whichQuest, string description returns questitem",
           "scope": "source.vjass"
       },
        "fnQuestItemSetDescriptionBJ": {
           "prefix": "fnQuestItemSetDescriptionBJ",
           "body": "QuestItemSetDescriptionBJ(${1:questitem_whichQuestItem},${2:string_description}",
            "completion": "QuestItemSetDescriptionBJ( whichQuestItem, description)",
           "description": "function QuestItemSetDescriptionBJ takes questitem whichQuestItem, string description returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestItemSetCompletedBJ": {
           "prefix": "fnQuestItemSetCompletedBJ",
           "body": "QuestItemSetCompletedBJ(${1:questitem_whichQuestItem},${2:boolean_completed}",
            "completion": "QuestItemSetCompletedBJ( whichQuestItem, completed)",
           "description": "function QuestItemSetCompletedBJ takes questitem whichQuestItem, boolean completed returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedQuestItemBJ": {
           "prefix": "fnGetLastCreatedQuestItemBJ",
           "body": "GetLastCreatedQuestItemBJ(",
            "completion": "GetLastCreatedQuestItemBJ()",
           "description": "function GetLastCreatedQuestItemBJ takes nothing returns questitem",
           "scope": "source.vjass"
       },
        "fnCreateDefeatConditionBJ": {
           "prefix": "fnCreateDefeatConditionBJ",
           "body": "CreateDefeatConditionBJ(${1:string_description}",
            "completion": "CreateDefeatConditionBJ( description)",
           "description": "function CreateDefeatConditionBJ takes string description returns defeatcondition",
           "scope": "source.vjass"
       },
        "fnDestroyDefeatConditionBJ": {
           "prefix": "fnDestroyDefeatConditionBJ",
           "body": "DestroyDefeatConditionBJ(${1:defeatcondition_whichCondition}",
            "completion": "DestroyDefeatConditionBJ( whichCondition)",
           "description": "function DestroyDefeatConditionBJ takes defeatcondition whichCondition returns nothing",
           "scope": "source.vjass"
       },
        "fnDefeatConditionSetDescriptionBJ": {
           "prefix": "fnDefeatConditionSetDescriptionBJ",
           "body": "DefeatConditionSetDescriptionBJ(${1:defeatcondition_whichCondition},${2:string_description}",
            "completion": "DefeatConditionSetDescriptionBJ( whichCondition, description)",
           "description": "function DefeatConditionSetDescriptionBJ takes defeatcondition whichCondition, string description returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedDefeatConditionBJ": {
           "prefix": "fnGetLastCreatedDefeatConditionBJ",
           "body": "GetLastCreatedDefeatConditionBJ(",
            "completion": "GetLastCreatedDefeatConditionBJ()",
           "description": "function GetLastCreatedDefeatConditionBJ takes nothing returns defeatcondition",
           "scope": "source.vjass"
       },
        "fnFlashQuestDialogButtonBJ": {
           "prefix": "fnFlashQuestDialogButtonBJ",
           "body": "FlashQuestDialogButtonBJ(",
            "completion": "FlashQuestDialogButtonBJ()",
           "description": "function FlashQuestDialogButtonBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestMessageBJ": {
           "prefix": "fnQuestMessageBJ",
           "body": "QuestMessageBJ(${1:integer_messageType},${2:force_f},${3:string_message}",
            "completion": "QuestMessageBJ( messageType, f, message)",
           "description": "function QuestMessageBJ takes force f, integer messageType, string message returns nothing",
           "scope": "source.vjass"
       },
        "fnStartTimerBJ": {
           "prefix": "fnStartTimerBJ",
           "body": "StartTimerBJ(${1:real_timeout},${2:boolean_periodic},${3:timer_t}",
            "completion": "StartTimerBJ( timeout, periodic, t)",
           "description": "function StartTimerBJ takes timer t, boolean periodic, real timeout returns timer",
           "scope": "source.vjass"
       },
        "fnCreateTimerBJ": {
           "prefix": "fnCreateTimerBJ",
           "body": "CreateTimerBJ(${1:real_timeout},${2:boolean_periodic}",
            "completion": "CreateTimerBJ( timeout, periodic)",
           "description": "function CreateTimerBJ takes boolean periodic, real timeout returns timer",
           "scope": "source.vjass"
       },
        "fnDestroyTimerBJ": {
           "prefix": "fnDestroyTimerBJ",
           "body": "DestroyTimerBJ(${1:timer_whichTimer}",
            "completion": "DestroyTimerBJ( whichTimer)",
           "description": "function DestroyTimerBJ takes timer whichTimer returns nothing",
           "scope": "source.vjass"
       },
        "fnPauseTimerBJ": {
           "prefix": "fnPauseTimerBJ",
           "body": "PauseTimerBJ(${1:boolean_pause},${2:timer_whichTimer}",
            "completion": "PauseTimerBJ( pause, whichTimer)",
           "description": "function PauseTimerBJ takes boolean pause, timer whichTimer returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedTimerBJ": {
           "prefix": "fnGetLastCreatedTimerBJ",
           "body": "GetLastCreatedTimerBJ(",
            "completion": "GetLastCreatedTimerBJ()",
           "description": "function GetLastCreatedTimerBJ takes nothing returns timer",
           "scope": "source.vjass"
       },
        "fnCreateTimerDialogBJ": {
           "prefix": "fnCreateTimerDialogBJ",
           "body": "CreateTimerDialogBJ(${1:string_title},${2:timer_t}",
            "completion": "CreateTimerDialogBJ( title, t)",
           "description": "function CreateTimerDialogBJ takes timer t, string title returns timerdialog",
           "scope": "source.vjass"
       },
        "fnDestroyTimerDialogBJ": {
           "prefix": "fnDestroyTimerDialogBJ",
           "body": "DestroyTimerDialogBJ(${1:timerdialog_td}",
            "completion": "DestroyTimerDialogBJ( td)",
           "description": "function DestroyTimerDialogBJ takes timerdialog td returns nothing",
           "scope": "source.vjass"
       },
        "fnTimerDialogSetTitleBJ": {
           "prefix": "fnTimerDialogSetTitleBJ",
           "body": "TimerDialogSetTitleBJ(${1:timerdialog_td},${2:string_title}",
            "completion": "TimerDialogSetTitleBJ( td, title)",
           "description": "function TimerDialogSetTitleBJ takes timerdialog td, string title returns nothing",
           "scope": "source.vjass"
       },
        "fnTimerDialogSetTitleColorBJ": {
           "prefix": "fnTimerDialogSetTitleColorBJ",
           "body": "TimerDialogSetTitleColorBJ(${1:real_transparency},${2:timerdialog_td}",
            "completion": "TimerDialogSetTitleColorBJ( transparency, td)",
           "description": "function TimerDialogSetTitleColorBJ takes timerdialog td, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnTimerDialogSetTimeColorBJ": {
           "prefix": "fnTimerDialogSetTimeColorBJ",
           "body": "TimerDialogSetTimeColorBJ(${1:real_transparency},${2:timerdialog_td}",
            "completion": "TimerDialogSetTimeColorBJ( transparency, td)",
           "description": "function TimerDialogSetTimeColorBJ takes timerdialog td, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnTimerDialogSetSpeedBJ": {
           "prefix": "fnTimerDialogSetSpeedBJ",
           "body": "TimerDialogSetSpeedBJ(${1:real_speedMultFactor},${2:timerdialog_td}",
            "completion": "TimerDialogSetSpeedBJ( speedMultFactor, td)",
           "description": "function TimerDialogSetSpeedBJ takes timerdialog td, real speedMultFactor returns nothing",
           "scope": "source.vjass"
       },
        "fnTimerDialogDisplayForPlayerBJ": {
           "prefix": "fnTimerDialogDisplayForPlayerBJ",
           "body": "TimerDialogDisplayForPlayerBJ(${1:player_whichPlayer},${2:boolean_show},${3:timerdialog_td}",
            "completion": "TimerDialogDisplayForPlayerBJ( whichPlayer, show, td)",
           "description": "function TimerDialogDisplayForPlayerBJ takes boolean show, timerdialog td, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnTimerDialogDisplayBJ": {
           "prefix": "fnTimerDialogDisplayBJ",
           "body": "TimerDialogDisplayBJ(${1:boolean_show},${2:timerdialog_td}",
            "completion": "TimerDialogDisplayBJ( show, td)",
           "description": "function TimerDialogDisplayBJ takes boolean show, timerdialog td returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedTimerDialogBJ": {
           "prefix": "fnGetLastCreatedTimerDialogBJ",
           "body": "GetLastCreatedTimerDialogBJ(",
            "completion": "GetLastCreatedTimerDialogBJ()",
           "description": "function GetLastCreatedTimerDialogBJ takes nothing returns timerdialog",
           "scope": "source.vjass"
       },
        "fnLeaderboardResizeBJ": {
           "prefix": "fnLeaderboardResizeBJ",
           "body": "LeaderboardResizeBJ(${1:leaderboard_lb}",
            "completion": "LeaderboardResizeBJ( lb)",
           "description": "function LeaderboardResizeBJ takes leaderboard lb returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetPlayerItemValueBJ": {
           "prefix": "fnLeaderboardSetPlayerItemValueBJ",
           "body": "LeaderboardSetPlayerItemValueBJ(${1:player_whichPlayer},${2:leaderboard_lb},${3:integer_val}",
            "completion": "LeaderboardSetPlayerItemValueBJ( whichPlayer, lb, val)",
           "description": "function LeaderboardSetPlayerItemValueBJ takes player whichPlayer, leaderboard lb, integer val returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetPlayerItemLabelBJ": {
           "prefix": "fnLeaderboardSetPlayerItemLabelBJ",
           "body": "LeaderboardSetPlayerItemLabelBJ(${1:player_whichPlayer},${2:string_val},${3:leaderboard_lb}",
            "completion": "LeaderboardSetPlayerItemLabelBJ( whichPlayer, val, lb)",
           "description": "function LeaderboardSetPlayerItemLabelBJ takes player whichPlayer, leaderboard lb, string val returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetPlayerItemStyleBJ": {
           "prefix": "fnLeaderboardSetPlayerItemStyleBJ",
           "body": "LeaderboardSetPlayerItemStyleBJ(${1:player_whichPlayer},${2:boolean_showIcon},${3:leaderboard_lb}",
            "completion": "LeaderboardSetPlayerItemStyleBJ( whichPlayer, showIcon, lb)",
           "description": "function LeaderboardSetPlayerItemStyleBJ takes player whichPlayer, leaderboard lb, boolean showLabel, boolean showValue, boolean showIcon returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetPlayerItemLabelColorBJ": {
           "prefix": "fnLeaderboardSetPlayerItemLabelColorBJ",
           "body": "LeaderboardSetPlayerItemLabelColorBJ(${1:real_transparency},${2:player_whichPlayer},${3:leaderboard_lb}",
            "completion": "LeaderboardSetPlayerItemLabelColorBJ( transparency, whichPlayer, lb)",
           "description": "function LeaderboardSetPlayerItemLabelColorBJ takes player whichPlayer, leaderboard lb, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetPlayerItemValueColorBJ": {
           "prefix": "fnLeaderboardSetPlayerItemValueColorBJ",
           "body": "LeaderboardSetPlayerItemValueColorBJ(${1:real_transparency},${2:player_whichPlayer},${3:leaderboard_lb}",
            "completion": "LeaderboardSetPlayerItemValueColorBJ( transparency, whichPlayer, lb)",
           "description": "function LeaderboardSetPlayerItemValueColorBJ takes player whichPlayer, leaderboard lb, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetLabelColorBJ": {
           "prefix": "fnLeaderboardSetLabelColorBJ",
           "body": "LeaderboardSetLabelColorBJ(${1:real_transparency},${2:leaderboard_lb}",
            "completion": "LeaderboardSetLabelColorBJ( transparency, lb)",
           "description": "function LeaderboardSetLabelColorBJ takes leaderboard lb, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetValueColorBJ": {
           "prefix": "fnLeaderboardSetValueColorBJ",
           "body": "LeaderboardSetValueColorBJ(${1:real_transparency},${2:leaderboard_lb}",
            "completion": "LeaderboardSetValueColorBJ( transparency, lb)",
           "description": "function LeaderboardSetValueColorBJ takes leaderboard lb, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetLabelBJ": {
           "prefix": "fnLeaderboardSetLabelBJ",
           "body": "LeaderboardSetLabelBJ(${1:string_label},${2:leaderboard_lb}",
            "completion": "LeaderboardSetLabelBJ( label, lb)",
           "description": "function LeaderboardSetLabelBJ takes leaderboard lb, string label returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetStyleBJ": {
           "prefix": "fnLeaderboardSetStyleBJ",
           "body": "LeaderboardSetStyleBJ(${1:boolean_showIcons},${2:leaderboard_lb}",
            "completion": "LeaderboardSetStyleBJ( showIcons, lb)",
           "description": "function LeaderboardSetStyleBJ takes leaderboard lb, boolean showLabel, boolean showNames, boolean showValues, boolean showIcons returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardGetItemCountBJ": {
           "prefix": "fnLeaderboardGetItemCountBJ",
           "body": "LeaderboardGetItemCountBJ(${1:leaderboard_lb}",
            "completion": "LeaderboardGetItemCountBJ( lb)",
           "description": "function LeaderboardGetItemCountBJ takes leaderboard lb returns integer",
           "scope": "source.vjass"
       },
        "fnLeaderboardHasPlayerItemBJ": {
           "prefix": "fnLeaderboardHasPlayerItemBJ",
           "body": "LeaderboardHasPlayerItemBJ(${1:player_whichPlayer},${2:leaderboard_lb}",
            "completion": "LeaderboardHasPlayerItemBJ( whichPlayer, lb)",
           "description": "function LeaderboardHasPlayerItemBJ takes leaderboard lb, player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnForceSetLeaderboardBJ": {
           "prefix": "fnForceSetLeaderboardBJ",
           "body": "ForceSetLeaderboardBJ(${1:force_toForce},${2:leaderboard_lb}",
            "completion": "ForceSetLeaderboardBJ( toForce, lb)",
           "description": "function ForceSetLeaderboardBJ takes leaderboard lb, force toForce returns nothing",
           "scope": "source.vjass"
       },
        "fnCreateLeaderboardBJ": {
           "prefix": "fnCreateLeaderboardBJ",
           "body": "CreateLeaderboardBJ(${1:force_toForce},${2:string_label}",
            "completion": "CreateLeaderboardBJ( toForce, label)",
           "description": "function CreateLeaderboardBJ takes force toForce, string label returns leaderboard",
           "scope": "source.vjass"
       },
        "fnDestroyLeaderboardBJ": {
           "prefix": "fnDestroyLeaderboardBJ",
           "body": "DestroyLeaderboardBJ(${1:leaderboard_lb}",
            "completion": "DestroyLeaderboardBJ( lb)",
           "description": "function DestroyLeaderboardBJ takes leaderboard lb returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardDisplayBJ": {
           "prefix": "fnLeaderboardDisplayBJ",
           "body": "LeaderboardDisplayBJ(${1:boolean_show},${2:leaderboard_lb}",
            "completion": "LeaderboardDisplayBJ( show, lb)",
           "description": "function LeaderboardDisplayBJ takes boolean show, leaderboard lb returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardAddItemBJ": {
           "prefix": "fnLeaderboardAddItemBJ",
           "body": "LeaderboardAddItemBJ(${1:player_whichPlayer},${2:string_label},${3:leaderboard_lb},${4:integer_value}",
            "completion": "LeaderboardAddItemBJ( whichPlayer, label, lb, value)",
           "description": "function LeaderboardAddItemBJ takes player whichPlayer, leaderboard lb, string label, integer value returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardRemovePlayerItemBJ": {
           "prefix": "fnLeaderboardRemovePlayerItemBJ",
           "body": "LeaderboardRemovePlayerItemBJ(${1:player_whichPlayer},${2:leaderboard_lb}",
            "completion": "LeaderboardRemovePlayerItemBJ( whichPlayer, lb)",
           "description": "function LeaderboardRemovePlayerItemBJ takes player whichPlayer, leaderboard lb returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSortItemsBJ": {
           "prefix": "fnLeaderboardSortItemsBJ",
           "body": "LeaderboardSortItemsBJ(${1:integer_sortType},${2:boolean_ascending},${3:leaderboard_lb}",
            "completion": "LeaderboardSortItemsBJ( sortType, ascending, lb)",
           "description": "function LeaderboardSortItemsBJ takes leaderboard lb, integer sortType, boolean ascending returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSortItemsByPlayerBJ": {
           "prefix": "fnLeaderboardSortItemsByPlayerBJ",
           "body": "LeaderboardSortItemsByPlayerBJ(${1:boolean_ascending},${2:leaderboard_lb}",
            "completion": "LeaderboardSortItemsByPlayerBJ( ascending, lb)",
           "description": "function LeaderboardSortItemsByPlayerBJ takes leaderboard lb, boolean ascending returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSortItemsByLabelBJ": {
           "prefix": "fnLeaderboardSortItemsByLabelBJ",
           "body": "LeaderboardSortItemsByLabelBJ(${1:boolean_ascending},${2:leaderboard_lb}",
            "completion": "LeaderboardSortItemsByLabelBJ( ascending, lb)",
           "description": "function LeaderboardSortItemsByLabelBJ takes leaderboard lb, boolean ascending returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardGetPlayerIndexBJ": {
           "prefix": "fnLeaderboardGetPlayerIndexBJ",
           "body": "LeaderboardGetPlayerIndexBJ(${1:player_whichPlayer},${2:leaderboard_lb}",
            "completion": "LeaderboardGetPlayerIndexBJ( whichPlayer, lb)",
           "description": "function LeaderboardGetPlayerIndexBJ takes player whichPlayer, leaderboard lb returns integer",
           "scope": "source.vjass"
       },
        "fnLeaderboardGetIndexedPlayerBJ": {
           "prefix": "fnLeaderboardGetIndexedPlayerBJ",
           "body": "LeaderboardGetIndexedPlayerBJ(${1:integer_position},${2:leaderboard_lb}",
            "completion": "LeaderboardGetIndexedPlayerBJ( position, lb)",
           "description": "function LeaderboardGetIndexedPlayerBJ takes integer position, leaderboard lb returns player",
           "scope": "source.vjass"
       },
        "fnPlayerGetLeaderboardBJ": {
           "prefix": "fnPlayerGetLeaderboardBJ",
           "body": "PlayerGetLeaderboardBJ(${1:player_whichPlayer}",
            "completion": "PlayerGetLeaderboardBJ( whichPlayer)",
           "description": "function PlayerGetLeaderboardBJ takes player whichPlayer returns leaderboard",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedLeaderboard": {
           "prefix": "fnGetLastCreatedLeaderboard",
           "body": "GetLastCreatedLeaderboard(",
            "completion": "GetLastCreatedLeaderboard()",
           "description": "function GetLastCreatedLeaderboard takes nothing returns leaderboard",
           "scope": "source.vjass"
       },
        "fnCreateMultiboardBJ": {
           "prefix": "fnCreateMultiboardBJ",
           "body": "CreateMultiboardBJ(${1:integer_rows},${2:string_title}",
            "completion": "CreateMultiboardBJ( rows, title)",
           "description": "function CreateMultiboardBJ takes integer cols, integer rows, string title returns multiboard",
           "scope": "source.vjass"
       },
        "fnDestroyMultiboardBJ": {
           "prefix": "fnDestroyMultiboardBJ",
           "body": "DestroyMultiboardBJ(${1:multiboard_mb}",
            "completion": "DestroyMultiboardBJ( mb)",
           "description": "function DestroyMultiboardBJ takes multiboard mb returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedMultiboard": {
           "prefix": "fnGetLastCreatedMultiboard",
           "body": "GetLastCreatedMultiboard(",
            "completion": "GetLastCreatedMultiboard()",
           "description": "function GetLastCreatedMultiboard takes nothing returns multiboard",
           "scope": "source.vjass"
       },
        "fnMultiboardDisplayBJ": {
           "prefix": "fnMultiboardDisplayBJ",
           "body": "MultiboardDisplayBJ(${1:boolean_show},${2:multiboard_mb}",
            "completion": "MultiboardDisplayBJ( show, mb)",
           "description": "function MultiboardDisplayBJ takes boolean show, multiboard mb returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardMinimizeBJ": {
           "prefix": "fnMultiboardMinimizeBJ",
           "body": "MultiboardMinimizeBJ(${1:boolean_minimize},${2:multiboard_mb}",
            "completion": "MultiboardMinimizeBJ( minimize, mb)",
           "description": "function MultiboardMinimizeBJ takes boolean minimize, multiboard mb returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetTitleTextColorBJ": {
           "prefix": "fnMultiboardSetTitleTextColorBJ",
           "body": "MultiboardSetTitleTextColorBJ(${1:real_transparency},${2:multiboard_mb}",
            "completion": "MultiboardSetTitleTextColorBJ( transparency, mb)",
           "description": "function MultiboardSetTitleTextColorBJ takes multiboard mb, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardAllowDisplayBJ": {
           "prefix": "fnMultiboardAllowDisplayBJ",
           "body": "MultiboardAllowDisplayBJ(${1:boolean_flag}",
            "completion": "MultiboardAllowDisplayBJ( flag)",
           "description": "function MultiboardAllowDisplayBJ takes boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemStyleBJ": {
           "prefix": "fnMultiboardSetItemStyleBJ",
           "body": "MultiboardSetItemStyleBJ(${1:boolean_showIcon},${2:integer_row},${3:multiboard_mb}",
            "completion": "MultiboardSetItemStyleBJ( showIcon, row, mb)",
           "description": "function MultiboardSetItemStyleBJ takes multiboard mb, integer col, integer row, boolean showValue, boolean showIcon returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemValueBJ": {
           "prefix": "fnMultiboardSetItemValueBJ",
           "body": "MultiboardSetItemValueBJ(${1:integer_row},${2:multiboard_mb},${3:string_val}",
            "completion": "MultiboardSetItemValueBJ( row, mb, val)",
           "description": "function MultiboardSetItemValueBJ takes multiboard mb, integer col, integer row, string val returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemColorBJ": {
           "prefix": "fnMultiboardSetItemColorBJ",
           "body": "MultiboardSetItemColorBJ(${1:real_transparency},${2:integer_row},${3:multiboard_mb}",
            "completion": "MultiboardSetItemColorBJ( transparency, row, mb)",
           "description": "function MultiboardSetItemColorBJ takes multiboard mb, integer col, integer row, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemWidthBJ": {
           "prefix": "fnMultiboardSetItemWidthBJ",
           "body": "MultiboardSetItemWidthBJ(${1:real_width},${2:integer_row},${3:multiboard_mb}",
            "completion": "MultiboardSetItemWidthBJ( width, row, mb)",
           "description": "function MultiboardSetItemWidthBJ takes multiboard mb, integer col, integer row, real width returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemIconBJ": {
           "prefix": "fnMultiboardSetItemIconBJ",
           "body": "MultiboardSetItemIconBJ(${1:integer_row},${2:multiboard_mb},${3:string_iconFileName}",
            "completion": "MultiboardSetItemIconBJ( row, mb, iconFileName)",
           "description": "function MultiboardSetItemIconBJ takes multiboard mb, integer col, integer row, string iconFileName returns nothing",
           "scope": "source.vjass"
       },
        "fnTextTagSize2Height": {
           "prefix": "fnTextTagSize2Height",
           "body": "TextTagSize2Height(${1:real_size}",
            "completion": "TextTagSize2Height( size)",
           "description": "function TextTagSize2Height takes real size returns real",
           "scope": "source.vjass"
       },
        "fnTextTagSpeed2Velocity": {
           "prefix": "fnTextTagSpeed2Velocity",
           "body": "TextTagSpeed2Velocity(${1:real_speed}",
            "completion": "TextTagSpeed2Velocity( speed)",
           "description": "function TextTagSpeed2Velocity takes real speed returns real",
           "scope": "source.vjass"
       },
        "fnSetTextTagColorBJ": {
           "prefix": "fnSetTextTagColorBJ",
           "body": "SetTextTagColorBJ(${1:texttag_tt},${2:real_transparency}",
            "completion": "SetTextTagColorBJ( tt, transparency)",
           "description": "function SetTextTagColorBJ takes texttag tt, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagVelocityBJ": {
           "prefix": "fnSetTextTagVelocityBJ",
           "body": "SetTextTagVelocityBJ(${1:texttag_tt},${2:real_angle}",
            "completion": "SetTextTagVelocityBJ( tt, angle)",
           "description": "function SetTextTagVelocityBJ takes texttag tt, real speed, real angle returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagTextBJ": {
           "prefix": "fnSetTextTagTextBJ",
           "body": "SetTextTagTextBJ(${1:texttag_tt},${2:real_size},${3:string_s}",
            "completion": "SetTextTagTextBJ( tt, size, s)",
           "description": "function SetTextTagTextBJ takes texttag tt, string s, real size returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagPosBJ": {
           "prefix": "fnSetTextTagPosBJ",
           "body": "SetTextTagPosBJ(${1:texttag_tt},${2:real_zOffset},${3:location_loc}",
            "completion": "SetTextTagPosBJ( tt, zOffset, loc)",
           "description": "function SetTextTagPosBJ takes texttag tt, location loc, real zOffset returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagPosUnitBJ": {
           "prefix": "fnSetTextTagPosUnitBJ",
           "body": "SetTextTagPosUnitBJ(${1:texttag_tt},${2:real_zOffset},${3:unit_whichUnit}",
            "completion": "SetTextTagPosUnitBJ( tt, zOffset, whichUnit)",
           "description": "function SetTextTagPosUnitBJ takes texttag tt, unit whichUnit, real zOffset returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagSuspendedBJ": {
           "prefix": "fnSetTextTagSuspendedBJ",
           "body": "SetTextTagSuspendedBJ(${1:texttag_tt},${2:boolean_flag}",
            "completion": "SetTextTagSuspendedBJ( tt, flag)",
           "description": "function SetTextTagSuspendedBJ takes texttag tt, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagPermanentBJ": {
           "prefix": "fnSetTextTagPermanentBJ",
           "body": "SetTextTagPermanentBJ(${1:texttag_tt},${2:boolean_flag}",
            "completion": "SetTextTagPermanentBJ( tt, flag)",
           "description": "function SetTextTagPermanentBJ takes texttag tt, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagAgeBJ": {
           "prefix": "fnSetTextTagAgeBJ",
           "body": "SetTextTagAgeBJ(${1:texttag_tt},${2:real_age}",
            "completion": "SetTextTagAgeBJ( tt, age)",
           "description": "function SetTextTagAgeBJ takes texttag tt, real age returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagLifespanBJ": {
           "prefix": "fnSetTextTagLifespanBJ",
           "body": "SetTextTagLifespanBJ(${1:texttag_tt},${2:real_lifespan}",
            "completion": "SetTextTagLifespanBJ( tt, lifespan)",
           "description": "function SetTextTagLifespanBJ takes texttag tt, real lifespan returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagFadepointBJ": {
           "prefix": "fnSetTextTagFadepointBJ",
           "body": "SetTextTagFadepointBJ(${1:texttag_tt},${2:real_fadepoint}",
            "completion": "SetTextTagFadepointBJ( tt, fadepoint)",
           "description": "function SetTextTagFadepointBJ takes texttag tt, real fadepoint returns nothing",
           "scope": "source.vjass"
       },
        "fnCreateTextTagLocBJ": {
           "prefix": "fnCreateTextTagLocBJ",
           "body": "CreateTextTagLocBJ(${1:real_transparency},${2:string_s},${3:location_loc}",
            "completion": "CreateTextTagLocBJ( transparency, s, loc)",
           "description": "function CreateTextTagLocBJ takes string s, location loc, real zOffset, real size, real red, real green, real blue, real transparency returns texttag",
           "scope": "source.vjass"
       },
        "fnCreateTextTagUnitBJ": {
           "prefix": "fnCreateTextTagUnitBJ",
           "body": "CreateTextTagUnitBJ(${1:real_transparency},${2:string_s},${3:unit_whichUnit}",
            "completion": "CreateTextTagUnitBJ( transparency, s, whichUnit)",
           "description": "function CreateTextTagUnitBJ takes string s, unit whichUnit, real zOffset, real size, real red, real green, real blue, real transparency returns texttag",
           "scope": "source.vjass"
       },
        "fnDestroyTextTagBJ": {
           "prefix": "fnDestroyTextTagBJ",
           "body": "DestroyTextTagBJ(${1:texttag_tt}",
            "completion": "DestroyTextTagBJ( tt)",
           "description": "function DestroyTextTagBJ takes texttag tt returns nothing",
           "scope": "source.vjass"
       },
        "fnShowTextTagForceBJ": {
           "prefix": "fnShowTextTagForceBJ",
           "body": "ShowTextTagForceBJ(${1:texttag_tt},${2:boolean_show},${3:force_whichForce}",
            "completion": "ShowTextTagForceBJ( tt, show, whichForce)",
           "description": "function ShowTextTagForceBJ takes boolean show, texttag tt, force whichForce returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedTextTag": {
           "prefix": "fnGetLastCreatedTextTag",
           "body": "GetLastCreatedTextTag(",
            "completion": "GetLastCreatedTextTag()",
           "description": "function GetLastCreatedTextTag takes nothing returns texttag",
           "scope": "source.vjass"
       },
        "fnPauseGameOn": {
           "prefix": "fnPauseGameOn",
           "body": "PauseGameOn(",
            "completion": "PauseGameOn()",
           "description": "function PauseGameOn takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnPauseGameOff": {
           "prefix": "fnPauseGameOff",
           "body": "PauseGameOff(",
            "completion": "PauseGameOff()",
           "description": "function PauseGameOff takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUserControlForceOn": {
           "prefix": "fnSetUserControlForceOn",
           "body": "SetUserControlForceOn(${1:force_whichForce}",
            "completion": "SetUserControlForceOn( whichForce)",
           "description": "function SetUserControlForceOn takes force whichForce returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUserControlForceOff": {
           "prefix": "fnSetUserControlForceOff",
           "body": "SetUserControlForceOff(${1:force_whichForce}",
            "completion": "SetUserControlForceOff( whichForce)",
           "description": "function SetUserControlForceOff takes force whichForce returns nothing",
           "scope": "source.vjass"
       },
        "fnShowInterfaceForceOn": {
           "prefix": "fnShowInterfaceForceOn",
           "body": "ShowInterfaceForceOn(${1:real_fadeDuration},${2:force_whichForce}",
            "completion": "ShowInterfaceForceOn( fadeDuration, whichForce)",
           "description": "function ShowInterfaceForceOn takes force whichForce, real fadeDuration returns nothing",
           "scope": "source.vjass"
       },
        "fnShowInterfaceForceOff": {
           "prefix": "fnShowInterfaceForceOff",
           "body": "ShowInterfaceForceOff(${1:real_fadeDuration},${2:force_whichForce}",
            "completion": "ShowInterfaceForceOff( fadeDuration, whichForce)",
           "description": "function ShowInterfaceForceOff takes force whichForce, real fadeDuration returns nothing",
           "scope": "source.vjass"
       },
        "fnPingMinimapForForce": {
           "prefix": "fnPingMinimapForForce",
           "body": "PingMinimapForForce(${1:real_duration},${2:force_whichForce}",
            "completion": "PingMinimapForForce( duration, whichForce)",
           "description": "function PingMinimapForForce takes force whichForce, real x, real y, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnPingMinimapLocForForce": {
           "prefix": "fnPingMinimapLocForForce",
           "body": "PingMinimapLocForForce(${1:real_duration},${2:force_whichForce},${3:location_loc}",
            "completion": "PingMinimapLocForForce( duration, whichForce, loc)",
           "description": "function PingMinimapLocForForce takes force whichForce, location loc, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnPingMinimapForPlayer": {
           "prefix": "fnPingMinimapForPlayer",
           "body": "PingMinimapForPlayer(${1:real_duration},${2:player_whichPlayer}",
            "completion": "PingMinimapForPlayer( duration, whichPlayer)",
           "description": "function PingMinimapForPlayer takes player whichPlayer, real x, real y, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnPingMinimapLocForPlayer": {
           "prefix": "fnPingMinimapLocForPlayer",
           "body": "PingMinimapLocForPlayer(${1:real_duration},${2:player_whichPlayer},${3:location_loc}",
            "completion": "PingMinimapLocForPlayer( duration, whichPlayer, loc)",
           "description": "function PingMinimapLocForPlayer takes player whichPlayer, location loc, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnPingMinimapForForceEx": {
           "prefix": "fnPingMinimapForForceEx",
           "body": "PingMinimapForForceEx(${1:real_blue},${2:integer_style},${3:force_whichForce}",
            "completion": "PingMinimapForForceEx( blue, style, whichForce)",
           "description": "function PingMinimapForForceEx takes force whichForce, real x, real y, real duration, integer style, real red, real green, real blue returns nothing",
           "scope": "source.vjass"
       },
        "fnPingMinimapLocForForceEx": {
           "prefix": "fnPingMinimapLocForForceEx",
           "body": "PingMinimapLocForForceEx(${1:real_blue},${2:integer_style},${3:force_whichForce},${4:location_loc}",
            "completion": "PingMinimapLocForForceEx( blue, style, whichForce, loc)",
           "description": "function PingMinimapLocForForceEx takes force whichForce, location loc, real duration, integer style, real red, real green, real blue returns nothing",
           "scope": "source.vjass"
       },
        "fnEnableWorldFogBoundaryBJ": {
           "prefix": "fnEnableWorldFogBoundaryBJ",
           "body": "EnableWorldFogBoundaryBJ(${1:boolean_enable},${2:force_f}",
            "completion": "EnableWorldFogBoundaryBJ( enable, f)",
           "description": "function EnableWorldFogBoundaryBJ takes boolean enable, force f returns nothing",
           "scope": "source.vjass"
       },
        "fnEnableOcclusionBJ": {
           "prefix": "fnEnableOcclusionBJ",
           "body": "EnableOcclusionBJ(${1:boolean_enable},${2:force_f}",
            "completion": "EnableOcclusionBJ( enable, f)",
           "description": "function EnableOcclusionBJ takes boolean enable, force f returns nothing",
           "scope": "source.vjass"
       },
        "fnCancelCineSceneBJ": {
           "prefix": "fnCancelCineSceneBJ",
           "body": "CancelCineSceneBJ(",
            "completion": "CancelCineSceneBJ()",
           "description": "function CancelCineSceneBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnTryInitCinematicBehaviorBJ": {
           "prefix": "fnTryInitCinematicBehaviorBJ",
           "body": "TryInitCinematicBehaviorBJ(",
            "completion": "TryInitCinematicBehaviorBJ()",
           "description": "function TryInitCinematicBehaviorBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCinematicSceneBJ": {
           "prefix": "fnSetCinematicSceneBJ",
           "body": "SetCinematicSceneBJ(${1:sound_soundHandle},${2:integer_portraitUnitId},${3:playercolor_color},${4:real_voiceoverDuration},${5:string_text}",
            "completion": "SetCinematicSceneBJ( soundHandle, portraitUnitId, color, voiceoverDuration, text)",
           "description": "function SetCinematicSceneBJ takes sound soundHandle, integer portraitUnitId, playercolor color, string speakerTitle, string text, real sceneDuration, real voiceoverDuration returns nothing",
           "scope": "source.vjass"
       },
        "fnGetTransmissionDuration": {
           "prefix": "fnGetTransmissionDuration",
           "body": "GetTransmissionDuration(${1:sound_soundHandle},${2:integer_timeType},${3:real_timeVal}",
            "completion": "GetTransmissionDuration( soundHandle, timeType, timeVal)",
           "description": "function GetTransmissionDuration takes sound soundHandle, integer timeType, real timeVal returns real",
           "scope": "source.vjass"
       },
        "fnWaitTransmissionDuration": {
           "prefix": "fnWaitTransmissionDuration",
           "body": "WaitTransmissionDuration(${1:sound_soundHandle},${2:integer_timeType},${3:real_timeVal}",
            "completion": "WaitTransmissionDuration( soundHandle, timeType, timeVal)",
           "description": "function WaitTransmissionDuration takes sound soundHandle, integer timeType, real timeVal returns nothing",
           "scope": "source.vjass"
       },
        "fnDoTransmissionBasicsXYBJ": {
           "prefix": "fnDoTransmissionBasicsXYBJ",
           "body": "DoTransmissionBasicsXYBJ(${1:real_duration},${2:integer_unitId},${3:sound_soundHandle},${4:playercolor_color},${5:string_message}",
            "completion": "DoTransmissionBasicsXYBJ( duration, unitId, soundHandle, color, message)",
           "description": "function DoTransmissionBasicsXYBJ takes integer unitId, playercolor color, real x, real y, sound soundHandle, string unitName, string message, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnTransmissionFromUnitWithNameBJ": {
           "prefix": "fnTransmissionFromUnitWithNameBJ",
           "body": "TransmissionFromUnitWithNameBJ(${1:sound_soundHandle},${2:real_timeVal},${3:force_toForce},${4:string_message},${5:boolean_wait},${6:integer_timeType},${7:unit_whichUnit}",
            "completion": "TransmissionFromUnitWithNameBJ( soundHandle, timeVal, toForce, message, wait, timeType, whichUnit)",
           "description": "function TransmissionFromUnitWithNameBJ takes force toForce, unit whichUnit, string unitName, sound soundHandle, string message, integer timeType, real timeVal, boolean wait returns nothing",
           "scope": "source.vjass"
       },
        "fnTransmissionFromUnitTypeWithNameBJ": {
           "prefix": "fnTransmissionFromUnitTypeWithNameBJ",
           "body": "TransmissionFromUnitTypeWithNameBJ(${1:sound_soundHandle},${2:real_timeVal},${3:force_toForce},${4:string_message},${5:player_fromPlayer},${6:boolean_wait},${7:location_loc},${8:integer_timeType}",
            "completion": "TransmissionFromUnitTypeWithNameBJ( soundHandle, timeVal, toForce, message, fromPlayer, wait, loc, timeType)",
           "description": "function TransmissionFromUnitTypeWithNameBJ takes force toForce, player fromPlayer, integer unitId, string unitName, location loc, sound soundHandle, string message, integer timeType, real timeVal, boolean wait returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastTransmissionDurationBJ": {
           "prefix": "fnGetLastTransmissionDurationBJ",
           "body": "GetLastTransmissionDurationBJ(",
            "completion": "GetLastTransmissionDurationBJ()",
           "description": "function GetLastTransmissionDurationBJ takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnForceCinematicSubtitlesBJ": {
           "prefix": "fnForceCinematicSubtitlesBJ",
           "body": "ForceCinematicSubtitlesBJ(${1:boolean_flag}",
            "completion": "ForceCinematicSubtitlesBJ( flag)",
           "description": "function ForceCinematicSubtitlesBJ takes boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnCinematicModeExBJ": {
           "prefix": "fnCinematicModeExBJ",
           "body": "CinematicModeExBJ(${1:real_interfaceFadeTime},${2:boolean_cineMode},${3:force_forForce}",
            "completion": "CinematicModeExBJ( interfaceFadeTime, cineMode, forForce)",
           "description": "function CinematicModeExBJ takes boolean cineMode, force forForce, real interfaceFadeTime returns nothing",
           "scope": "source.vjass"
       },
        "fnCinematicModeBJ": {
           "prefix": "fnCinematicModeBJ",
           "body": "CinematicModeBJ(${1:boolean_cineMode},${2:force_forForce}",
            "completion": "CinematicModeBJ( cineMode, forForce)",
           "description": "function CinematicModeBJ takes boolean cineMode, force forForce returns nothing",
           "scope": "source.vjass"
       },
        "fnDisplayCineFilterBJ": {
           "prefix": "fnDisplayCineFilterBJ",
           "body": "DisplayCineFilterBJ(${1:boolean_flag}",
            "completion": "DisplayCineFilterBJ( flag)",
           "description": "function DisplayCineFilterBJ takes boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnCinematicFadeCommonBJ": {
           "prefix": "fnCinematicFadeCommonBJ",
           "body": "CinematicFadeCommonBJ(${1:real_endTrans},${2:string_tex}",
            "completion": "CinematicFadeCommonBJ( endTrans, tex)",
           "description": "function CinematicFadeCommonBJ takes real red, real green, real blue, real duration, string tex, real startTrans, real endTrans returns nothing",
           "scope": "source.vjass"
       },
        "fnFinishCinematicFadeBJ": {
           "prefix": "fnFinishCinematicFadeBJ",
           "body": "FinishCinematicFadeBJ(",
            "completion": "FinishCinematicFadeBJ()",
           "description": "function FinishCinematicFadeBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnFinishCinematicFadeAfterBJ": {
           "prefix": "fnFinishCinematicFadeAfterBJ",
           "body": "FinishCinematicFadeAfterBJ(${1:real_duration}",
            "completion": "FinishCinematicFadeAfterBJ( duration)",
           "description": "function FinishCinematicFadeAfterBJ takes real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnContinueCinematicFadeBJ": {
           "prefix": "fnContinueCinematicFadeBJ",
           "body": "ContinueCinematicFadeBJ(",
            "completion": "ContinueCinematicFadeBJ()",
           "description": "function ContinueCinematicFadeBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnContinueCinematicFadeAfterBJ": {
           "prefix": "fnContinueCinematicFadeAfterBJ",
           "body": "ContinueCinematicFadeAfterBJ(${1:real_trans},${2:string_tex}",
            "completion": "ContinueCinematicFadeAfterBJ( trans, tex)",
           "description": "function ContinueCinematicFadeAfterBJ takes real duration, real red, real green, real blue, real trans, string tex returns nothing",
           "scope": "source.vjass"
       },
        "fnAbortCinematicFadeBJ": {
           "prefix": "fnAbortCinematicFadeBJ",
           "body": "AbortCinematicFadeBJ(",
            "completion": "AbortCinematicFadeBJ()",
           "description": "function AbortCinematicFadeBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCinematicFadeBJ": {
           "prefix": "fnCinematicFadeBJ",
           "body": "CinematicFadeBJ(${1:real_trans},${2:integer_fadetype},${3:string_tex}",
            "completion": "CinematicFadeBJ( trans, fadetype, tex)",
           "description": "function CinematicFadeBJ takes integer fadetype, real duration, string tex, real red, real green, real blue, real trans returns nothing",
           "scope": "source.vjass"
       },
        "fnCinematicFilterGenericBJ": {
           "prefix": "fnCinematicFilterGenericBJ",
           "body": "CinematicFilterGenericBJ(${1:real_trans1},${2:blendmode_bmode},${3:string_tex}",
            "completion": "CinematicFilterGenericBJ( trans1, bmode, tex)",
           "description": "function CinematicFilterGenericBJ takes real duration, blendmode bmode, string tex, real red0, real green0, real blue0, real trans0, real red1, real green1, real blue1, real trans1 returns nothing",
           "scope": "source.vjass"
       },
        "fnRescueUnitBJ": {
           "prefix": "fnRescueUnitBJ",
           "body": "RescueUnitBJ(${1:player_rescuer},${2:boolean_changeColor},${3:unit_whichUnit}",
            "completion": "RescueUnitBJ( rescuer, changeColor, whichUnit)",
           "description": "function RescueUnitBJ takes unit whichUnit, player rescuer, boolean changeColor returns nothing",
           "scope": "source.vjass"
       },
        "fnTriggerActionUnitRescuedBJ": {
           "prefix": "fnTriggerActionUnitRescuedBJ",
           "body": "TriggerActionUnitRescuedBJ(",
            "completion": "TriggerActionUnitRescuedBJ()",
           "description": "function TriggerActionUnitRescuedBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnTryInitRescuableTriggersBJ": {
           "prefix": "fnTryInitRescuableTriggersBJ",
           "body": "TryInitRescuableTriggersBJ(",
            "completion": "TryInitRescuableTriggersBJ()",
           "description": "function TryInitRescuableTriggersBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetRescueUnitColorChangeBJ": {
           "prefix": "fnSetRescueUnitColorChangeBJ",
           "body": "SetRescueUnitColorChangeBJ(${1:boolean_changeColor}",
            "completion": "SetRescueUnitColorChangeBJ( changeColor)",
           "description": "function SetRescueUnitColorChangeBJ takes boolean changeColor returns nothing",
           "scope": "source.vjass"
       },
        "fnSetRescueBuildingColorChangeBJ": {
           "prefix": "fnSetRescueBuildingColorChangeBJ",
           "body": "SetRescueBuildingColorChangeBJ(${1:boolean_changeColor}",
            "completion": "SetRescueBuildingColorChangeBJ( changeColor)",
           "description": "function SetRescueBuildingColorChangeBJ takes boolean changeColor returns nothing",
           "scope": "source.vjass"
       },
        "fnMakeUnitRescuableToForceBJEnum": {
           "prefix": "fnMakeUnitRescuableToForceBJEnum",
           "body": "MakeUnitRescuableToForceBJEnum(",
            "completion": "MakeUnitRescuableToForceBJEnum()",
           "description": "function MakeUnitRescuableToForceBJEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMakeUnitRescuableToForceBJ": {
           "prefix": "fnMakeUnitRescuableToForceBJ",
           "body": "MakeUnitRescuableToForceBJ(${1:boolean_isRescuable},${2:force_whichForce},${3:unit_whichUnit}",
            "completion": "MakeUnitRescuableToForceBJ( isRescuable, whichForce, whichUnit)",
           "description": "function MakeUnitRescuableToForceBJ takes unit whichUnit, boolean isRescuable, force whichForce returns nothing",
           "scope": "source.vjass"
       },
        "fnInitRescuableBehaviorBJ": {
           "prefix": "fnInitRescuableBehaviorBJ",
           "body": "InitRescuableBehaviorBJ(",
            "completion": "InitRescuableBehaviorBJ()",
           "description": "function InitRescuableBehaviorBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerTechResearchedSwap": {
           "prefix": "fnSetPlayerTechResearchedSwap",
           "body": "SetPlayerTechResearchedSwap(${1:integer_levels},${2:player_whichPlayer}",
            "completion": "SetPlayerTechResearchedSwap( levels, whichPlayer)",
           "description": "function SetPlayerTechResearchedSwap takes integer techid, integer levels, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerTechMaxAllowedSwap": {
           "prefix": "fnSetPlayerTechMaxAllowedSwap",
           "body": "SetPlayerTechMaxAllowedSwap(${1:integer_maximum},${2:player_whichPlayer}",
            "completion": "SetPlayerTechMaxAllowedSwap( maximum, whichPlayer)",
           "description": "function SetPlayerTechMaxAllowedSwap takes integer techid, integer maximum, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerMaxHeroesAllowed": {
           "prefix": "fnSetPlayerMaxHeroesAllowed",
           "body": "SetPlayerMaxHeroesAllowed(${1:integer_maximum},${2:player_whichPlayer}",
            "completion": "SetPlayerMaxHeroesAllowed( maximum, whichPlayer)",
           "description": "function SetPlayerMaxHeroesAllowed takes integer maximum, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnGetPlayerTechCountSimple": {
           "prefix": "fnGetPlayerTechCountSimple",
           "body": "GetPlayerTechCountSimple(${1:integer_techid},${2:player_whichPlayer}",
            "completion": "GetPlayerTechCountSimple( techid, whichPlayer)",
           "description": "function GetPlayerTechCountSimple takes integer techid, player whichPlayer returns integer",
           "scope": "source.vjass"
       },
        "fnGetPlayerTechMaxAllowedSwap": {
           "prefix": "fnGetPlayerTechMaxAllowedSwap",
           "body": "GetPlayerTechMaxAllowedSwap(${1:integer_techid},${2:player_whichPlayer}",
            "completion": "GetPlayerTechMaxAllowedSwap( techid, whichPlayer)",
           "description": "function GetPlayerTechMaxAllowedSwap takes integer techid, player whichPlayer returns integer",
           "scope": "source.vjass"
       },
        "fnSetPlayerAbilityAvailableBJ": {
           "prefix": "fnSetPlayerAbilityAvailableBJ",
           "body": "SetPlayerAbilityAvailableBJ(${1:integer_abilid},${2:boolean_avail},${3:player_whichPlayer}",
            "completion": "SetPlayerAbilityAvailableBJ( abilid, avail, whichPlayer)",
           "description": "function SetPlayerAbilityAvailableBJ takes boolean avail, integer abilid, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCampaignMenuRaceBJ": {
           "prefix": "fnSetCampaignMenuRaceBJ",
           "body": "SetCampaignMenuRaceBJ(${1:integer_campaignNumber}",
            "completion": "SetCampaignMenuRaceBJ( campaignNumber)",
           "description": "function SetCampaignMenuRaceBJ takes integer campaignNumber returns nothing",
           "scope": "source.vjass"
       },
        "fnSetMissionAvailableBJ": {
           "prefix": "fnSetMissionAvailableBJ",
           "body": "SetMissionAvailableBJ(${1:integer_missionIndex},${2:boolean_available}",
            "completion": "SetMissionAvailableBJ( missionIndex, available)",
           "description": "function SetMissionAvailableBJ takes boolean available, integer missionIndex returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCampaignAvailableBJ": {
           "prefix": "fnSetCampaignAvailableBJ",
           "body": "SetCampaignAvailableBJ(${1:integer_campaignNumber},${2:boolean_available}",
            "completion": "SetCampaignAvailableBJ( campaignNumber, available)",
           "description": "function SetCampaignAvailableBJ takes boolean available, integer campaignNumber returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCinematicAvailableBJ": {
           "prefix": "fnSetCinematicAvailableBJ",
           "body": "SetCinematicAvailableBJ(${1:integer_cinematicIndex},${2:boolean_available}",
            "completion": "SetCinematicAvailableBJ( cinematicIndex, available)",
           "description": "function SetCinematicAvailableBJ takes boolean available, integer cinematicIndex returns nothing",
           "scope": "source.vjass"
       },
        "fnInitGameCacheBJ": {
           "prefix": "fnInitGameCacheBJ",
           "body": "InitGameCacheBJ(${1:string_campaignFile}",
            "completion": "InitGameCacheBJ( campaignFile)",
           "description": "function InitGameCacheBJ takes string campaignFile returns gamecache",
           "scope": "source.vjass"
       },
        "fnSaveGameCacheBJ": {
           "prefix": "fnSaveGameCacheBJ",
           "body": "SaveGameCacheBJ(${1:gamecache_cache}",
            "completion": "SaveGameCacheBJ( cache)",
           "description": "function SaveGameCacheBJ takes gamecache cache returns boolean",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedGameCacheBJ": {
           "prefix": "fnGetLastCreatedGameCacheBJ",
           "body": "GetLastCreatedGameCacheBJ(",
            "completion": "GetLastCreatedGameCacheBJ()",
           "description": "function GetLastCreatedGameCacheBJ takes nothing returns gamecache",
           "scope": "source.vjass"
       },
        "fnInitHashtableBJ": {
           "prefix": "fnInitHashtableBJ",
           "body": "InitHashtableBJ(",
            "completion": "InitHashtableBJ()",
           "description": "function InitHashtableBJ takes nothing returns hashtable",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedHashtableBJ": {
           "prefix": "fnGetLastCreatedHashtableBJ",
           "body": "GetLastCreatedHashtableBJ(",
            "completion": "GetLastCreatedHashtableBJ()",
           "description": "function GetLastCreatedHashtableBJ takes nothing returns hashtable",
           "scope": "source.vjass"
       },
        "fnStoreRealBJ": {
           "prefix": "fnStoreRealBJ",
           "body": "StoreRealBJ(${1:real_value},${2:gamecache_cache},${3:string_missionKey}",
            "completion": "StoreRealBJ( value, cache, missionKey)",
           "description": "function StoreRealBJ takes real value, string key, string missionKey, gamecache cache returns nothing",
           "scope": "source.vjass"
       },
        "fnStoreIntegerBJ": {
           "prefix": "fnStoreIntegerBJ",
           "body": "StoreIntegerBJ(${1:integer_value},${2:string_missionKey},${3:gamecache_cache}",
            "completion": "StoreIntegerBJ( value, missionKey, cache)",
           "description": "function StoreIntegerBJ takes integer value, string key, string missionKey, gamecache cache returns nothing",
           "scope": "source.vjass"
       },
        "fnStoreBooleanBJ": {
           "prefix": "fnStoreBooleanBJ",
           "body": "StoreBooleanBJ(${1:gamecache_cache},${2:boolean_value},${3:string_missionKey}",
            "completion": "StoreBooleanBJ( cache, value, missionKey)",
           "description": "function StoreBooleanBJ takes boolean value, string key, string missionKey, gamecache cache returns nothing",
           "scope": "source.vjass"
       },
        "fnStoreStringBJ": {
           "prefix": "fnStoreStringBJ",
           "body": "StoreStringBJ(${1:gamecache_cache},${2:string_missionKey}",
            "completion": "StoreStringBJ( cache, missionKey)",
           "description": "function StoreStringBJ takes string value, string key, string missionKey, gamecache cache returns boolean",
           "scope": "source.vjass"
       },
        "fnStoreUnitBJ": {
           "prefix": "fnStoreUnitBJ",
           "body": "StoreUnitBJ(${1:gamecache_cache},${2:string_missionKey},${3:unit_whichUnit}",
            "completion": "StoreUnitBJ( cache, missionKey, whichUnit)",
           "description": "function StoreUnitBJ takes unit whichUnit, string key, string missionKey, gamecache cache returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveRealBJ": {
           "prefix": "fnSaveRealBJ",
           "body": "SaveRealBJ(${1:real_value},${2:integer_missionKey},${3:hashtable_table}",
            "completion": "SaveRealBJ( value, missionKey, table)",
           "description": "function SaveRealBJ takes real value, integer key, integer missionKey, hashtable table returns nothing",
           "scope": "source.vjass"
       },
        "fnSaveIntegerBJ": {
           "prefix": "fnSaveIntegerBJ",
           "body": "SaveIntegerBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "SaveIntegerBJ( missionKey, table)",
           "description": "function SaveIntegerBJ takes integer value, integer key, integer missionKey, hashtable table returns nothing",
           "scope": "source.vjass"
       },
        "fnSaveBooleanBJ": {
           "prefix": "fnSaveBooleanBJ",
           "body": "SaveBooleanBJ(${1:integer_missionKey},${2:boolean_value},${3:hashtable_table}",
            "completion": "SaveBooleanBJ( missionKey, value, table)",
           "description": "function SaveBooleanBJ takes boolean value, integer key, integer missionKey, hashtable table returns nothing",
           "scope": "source.vjass"
       },
        "fnSaveStringBJ": {
           "prefix": "fnSaveStringBJ",
           "body": "SaveStringBJ(${1:integer_missionKey},${2:string_value},${3:hashtable_table}",
            "completion": "SaveStringBJ( missionKey, value, table)",
           "description": "function SaveStringBJ takes string value, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSavePlayerHandleBJ": {
           "prefix": "fnSavePlayerHandleBJ",
           "body": "SavePlayerHandleBJ(${1:player_whichPlayer},${2:hashtable_table},${3:integer_missionKey}",
            "completion": "SavePlayerHandleBJ( whichPlayer, table, missionKey)",
           "description": "function SavePlayerHandleBJ takes player whichPlayer, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveWidgetHandleBJ": {
           "prefix": "fnSaveWidgetHandleBJ",
           "body": "SaveWidgetHandleBJ(${1:integer_missionKey},${2:widget_whichWidget},${3:hashtable_table}",
            "completion": "SaveWidgetHandleBJ( missionKey, whichWidget, table)",
           "description": "function SaveWidgetHandleBJ takes widget whichWidget, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveDestructableHandleBJ": {
           "prefix": "fnSaveDestructableHandleBJ",
           "body": "SaveDestructableHandleBJ(${1:integer_missionKey},${2:hashtable_table},${3:destructable_whichDestructable}",
            "completion": "SaveDestructableHandleBJ( missionKey, table, whichDestructable)",
           "description": "function SaveDestructableHandleBJ takes destructable whichDestructable, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveItemHandleBJ": {
           "prefix": "fnSaveItemHandleBJ",
           "body": "SaveItemHandleBJ(${1:item_whichItem},${2:hashtable_table},${3:integer_missionKey}",
            "completion": "SaveItemHandleBJ( whichItem, table, missionKey)",
           "description": "function SaveItemHandleBJ takes item whichItem, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveUnitHandleBJ": {
           "prefix": "fnSaveUnitHandleBJ",
           "body": "SaveUnitHandleBJ(${1:integer_missionKey},${2:hashtable_table},${3:unit_whichUnit}",
            "completion": "SaveUnitHandleBJ( missionKey, table, whichUnit)",
           "description": "function SaveUnitHandleBJ takes unit whichUnit, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveAbilityHandleBJ": {
           "prefix": "fnSaveAbilityHandleBJ",
           "body": "SaveAbilityHandleBJ(${1:integer_missionKey},${2:ability_whichAbility},${3:hashtable_table}",
            "completion": "SaveAbilityHandleBJ( missionKey, whichAbility, table)",
           "description": "function SaveAbilityHandleBJ takes ability whichAbility, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveTimerHandleBJ": {
           "prefix": "fnSaveTimerHandleBJ",
           "body": "SaveTimerHandleBJ(${1:integer_missionKey},${2:hashtable_table},${3:timer_whichTimer}",
            "completion": "SaveTimerHandleBJ( missionKey, table, whichTimer)",
           "description": "function SaveTimerHandleBJ takes timer whichTimer, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveTriggerHandleBJ": {
           "prefix": "fnSaveTriggerHandleBJ",
           "body": "SaveTriggerHandleBJ(${1:integer_missionKey},${2:trigger_whichTrigger},${3:hashtable_table}",
            "completion": "SaveTriggerHandleBJ( missionKey, whichTrigger, table)",
           "description": "function SaveTriggerHandleBJ takes trigger whichTrigger, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveTriggerConditionHandleBJ": {
           "prefix": "fnSaveTriggerConditionHandleBJ",
           "body": "SaveTriggerConditionHandleBJ(${1:integer_missionKey},${2:triggercondition_whichTriggercondition},${3:hashtable_table}",
            "completion": "SaveTriggerConditionHandleBJ( missionKey, whichTriggercondition, table)",
           "description": "function SaveTriggerConditionHandleBJ takes triggercondition whichTriggercondition, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveTriggerActionHandleBJ": {
           "prefix": "fnSaveTriggerActionHandleBJ",
           "body": "SaveTriggerActionHandleBJ(${1:integer_missionKey},${2:hashtable_table},${3:triggeraction_whichTriggeraction}",
            "completion": "SaveTriggerActionHandleBJ( missionKey, table, whichTriggeraction)",
           "description": "function SaveTriggerActionHandleBJ takes triggeraction whichTriggeraction, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveTriggerEventHandleBJ": {
           "prefix": "fnSaveTriggerEventHandleBJ",
           "body": "SaveTriggerEventHandleBJ(${1:integer_missionKey},${2:event_whichEvent},${3:hashtable_table}",
            "completion": "SaveTriggerEventHandleBJ( missionKey, whichEvent, table)",
           "description": "function SaveTriggerEventHandleBJ takes event whichEvent, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveForceHandleBJ": {
           "prefix": "fnSaveForceHandleBJ",
           "body": "SaveForceHandleBJ(${1:integer_missionKey},${2:force_whichForce},${3:hashtable_table}",
            "completion": "SaveForceHandleBJ( missionKey, whichForce, table)",
           "description": "function SaveForceHandleBJ takes force whichForce, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveGroupHandleBJ": {
           "prefix": "fnSaveGroupHandleBJ",
           "body": "SaveGroupHandleBJ(${1:integer_missionKey},${2:group_whichGroup},${3:hashtable_table}",
            "completion": "SaveGroupHandleBJ( missionKey, whichGroup, table)",
           "description": "function SaveGroupHandleBJ takes group whichGroup, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveLocationHandleBJ": {
           "prefix": "fnSaveLocationHandleBJ",
           "body": "SaveLocationHandleBJ(${1:integer_missionKey},${2:location_whichLocation},${3:hashtable_table}",
            "completion": "SaveLocationHandleBJ( missionKey, whichLocation, table)",
           "description": "function SaveLocationHandleBJ takes location whichLocation, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveRectHandleBJ": {
           "prefix": "fnSaveRectHandleBJ",
           "body": "SaveRectHandleBJ(${1:integer_missionKey},${2:hashtable_table},${3:rect_whichRect}",
            "completion": "SaveRectHandleBJ( missionKey, table, whichRect)",
           "description": "function SaveRectHandleBJ takes rect whichRect, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveBooleanExprHandleBJ": {
           "prefix": "fnSaveBooleanExprHandleBJ",
           "body": "SaveBooleanExprHandleBJ(${1:integer_missionKey},${2:boolexpr_whichBoolexpr},${3:hashtable_table}",
            "completion": "SaveBooleanExprHandleBJ( missionKey, whichBoolexpr, table)",
           "description": "function SaveBooleanExprHandleBJ takes boolexpr whichBoolexpr, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveSoundHandleBJ": {
           "prefix": "fnSaveSoundHandleBJ",
           "body": "SaveSoundHandleBJ(${1:sound_whichSound},${2:integer_missionKey},${3:hashtable_table}",
            "completion": "SaveSoundHandleBJ( whichSound, missionKey, table)",
           "description": "function SaveSoundHandleBJ takes sound whichSound, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveEffectHandleBJ": {
           "prefix": "fnSaveEffectHandleBJ",
           "body": "SaveEffectHandleBJ(${1:integer_missionKey},${2:effect_whichEffect},${3:hashtable_table}",
            "completion": "SaveEffectHandleBJ( missionKey, whichEffect, table)",
           "description": "function SaveEffectHandleBJ takes effect whichEffect, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveUnitPoolHandleBJ": {
           "prefix": "fnSaveUnitPoolHandleBJ",
           "body": "SaveUnitPoolHandleBJ(${1:integer_missionKey},${2:unitpool_whichUnitpool},${3:hashtable_table}",
            "completion": "SaveUnitPoolHandleBJ( missionKey, whichUnitpool, table)",
           "description": "function SaveUnitPoolHandleBJ takes unitpool whichUnitpool, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveItemPoolHandleBJ": {
           "prefix": "fnSaveItemPoolHandleBJ",
           "body": "SaveItemPoolHandleBJ(${1:integer_missionKey},${2:hashtable_table},${3:itempool_whichItempool}",
            "completion": "SaveItemPoolHandleBJ( missionKey, table, whichItempool)",
           "description": "function SaveItemPoolHandleBJ takes itempool whichItempool, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveQuestHandleBJ": {
           "prefix": "fnSaveQuestHandleBJ",
           "body": "SaveQuestHandleBJ(${1:integer_missionKey},${2:quest_whichQuest},${3:hashtable_table}",
            "completion": "SaveQuestHandleBJ( missionKey, whichQuest, table)",
           "description": "function SaveQuestHandleBJ takes quest whichQuest, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveQuestItemHandleBJ": {
           "prefix": "fnSaveQuestItemHandleBJ",
           "body": "SaveQuestItemHandleBJ(${1:integer_missionKey},${2:questitem_whichQuestitem},${3:hashtable_table}",
            "completion": "SaveQuestItemHandleBJ( missionKey, whichQuestitem, table)",
           "description": "function SaveQuestItemHandleBJ takes questitem whichQuestitem, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveDefeatConditionHandleBJ": {
           "prefix": "fnSaveDefeatConditionHandleBJ",
           "body": "SaveDefeatConditionHandleBJ(${1:integer_missionKey},${2:defeatcondition_whichDefeatcondition},${3:hashtable_table}",
            "completion": "SaveDefeatConditionHandleBJ( missionKey, whichDefeatcondition, table)",
           "description": "function SaveDefeatConditionHandleBJ takes defeatcondition whichDefeatcondition, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveTimerDialogHandleBJ": {
           "prefix": "fnSaveTimerDialogHandleBJ",
           "body": "SaveTimerDialogHandleBJ(${1:integer_missionKey},${2:timerdialog_whichTimerdialog},${3:hashtable_table}",
            "completion": "SaveTimerDialogHandleBJ( missionKey, whichTimerdialog, table)",
           "description": "function SaveTimerDialogHandleBJ takes timerdialog whichTimerdialog, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveLeaderboardHandleBJ": {
           "prefix": "fnSaveLeaderboardHandleBJ",
           "body": "SaveLeaderboardHandleBJ(${1:integer_missionKey},${2:hashtable_table},${3:leaderboard_whichLeaderboard}",
            "completion": "SaveLeaderboardHandleBJ( missionKey, table, whichLeaderboard)",
           "description": "function SaveLeaderboardHandleBJ takes leaderboard whichLeaderboard, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveMultiboardHandleBJ": {
           "prefix": "fnSaveMultiboardHandleBJ",
           "body": "SaveMultiboardHandleBJ(${1:integer_missionKey},${2:multiboard_whichMultiboard},${3:hashtable_table}",
            "completion": "SaveMultiboardHandleBJ( missionKey, whichMultiboard, table)",
           "description": "function SaveMultiboardHandleBJ takes multiboard whichMultiboard, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveMultiboardItemHandleBJ": {
           "prefix": "fnSaveMultiboardItemHandleBJ",
           "body": "SaveMultiboardItemHandleBJ(${1:integer_missionKey},${2:multiboarditem_whichMultiboarditem},${3:hashtable_table}",
            "completion": "SaveMultiboardItemHandleBJ( missionKey, whichMultiboarditem, table)",
           "description": "function SaveMultiboardItemHandleBJ takes multiboarditem whichMultiboarditem, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveTrackableHandleBJ": {
           "prefix": "fnSaveTrackableHandleBJ",
           "body": "SaveTrackableHandleBJ(${1:trackable_whichTrackable},${2:integer_missionKey},${3:hashtable_table}",
            "completion": "SaveTrackableHandleBJ( whichTrackable, missionKey, table)",
           "description": "function SaveTrackableHandleBJ takes trackable whichTrackable, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveDialogHandleBJ": {
           "prefix": "fnSaveDialogHandleBJ",
           "body": "SaveDialogHandleBJ(${1:integer_missionKey},${2:hashtable_table},${3:dialog_whichDialog}",
            "completion": "SaveDialogHandleBJ( missionKey, table, whichDialog)",
           "description": "function SaveDialogHandleBJ takes dialog whichDialog, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveButtonHandleBJ": {
           "prefix": "fnSaveButtonHandleBJ",
           "body": "SaveButtonHandleBJ(${1:integer_missionKey},${2:button_whichButton},${3:hashtable_table}",
            "completion": "SaveButtonHandleBJ( missionKey, whichButton, table)",
           "description": "function SaveButtonHandleBJ takes button whichButton, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveTextTagHandleBJ": {
           "prefix": "fnSaveTextTagHandleBJ",
           "body": "SaveTextTagHandleBJ(${1:texttag_whichTexttag},${2:integer_missionKey},${3:hashtable_table}",
            "completion": "SaveTextTagHandleBJ( whichTexttag, missionKey, table)",
           "description": "function SaveTextTagHandleBJ takes texttag whichTexttag, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveLightningHandleBJ": {
           "prefix": "fnSaveLightningHandleBJ",
           "body": "SaveLightningHandleBJ(${1:integer_missionKey},${2:hashtable_table},${3:lightning_whichLightning}",
            "completion": "SaveLightningHandleBJ( missionKey, table, whichLightning)",
           "description": "function SaveLightningHandleBJ takes lightning whichLightning, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveImageHandleBJ": {
           "prefix": "fnSaveImageHandleBJ",
           "body": "SaveImageHandleBJ(${1:integer_missionKey},${2:image_whichImage},${3:hashtable_table}",
            "completion": "SaveImageHandleBJ( missionKey, whichImage, table)",
           "description": "function SaveImageHandleBJ takes image whichImage, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveUbersplatHandleBJ": {
           "prefix": "fnSaveUbersplatHandleBJ",
           "body": "SaveUbersplatHandleBJ(${1:integer_missionKey},${2:ubersplat_whichUbersplat},${3:hashtable_table}",
            "completion": "SaveUbersplatHandleBJ( missionKey, whichUbersplat, table)",
           "description": "function SaveUbersplatHandleBJ takes ubersplat whichUbersplat, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveRegionHandleBJ": {
           "prefix": "fnSaveRegionHandleBJ",
           "body": "SaveRegionHandleBJ(${1:integer_missionKey},${2:region_whichRegion},${3:hashtable_table}",
            "completion": "SaveRegionHandleBJ( missionKey, whichRegion, table)",
           "description": "function SaveRegionHandleBJ takes region whichRegion, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveFogStateHandleBJ": {
           "prefix": "fnSaveFogStateHandleBJ",
           "body": "SaveFogStateHandleBJ(${1:integer_missionKey},${2:hashtable_table},${3:fogstate_whichFogState}",
            "completion": "SaveFogStateHandleBJ( missionKey, table, whichFogState)",
           "description": "function SaveFogStateHandleBJ takes fogstate whichFogState, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveFogModifierHandleBJ": {
           "prefix": "fnSaveFogModifierHandleBJ",
           "body": "SaveFogModifierHandleBJ(${1:fogmodifier_whichFogModifier},${2:integer_missionKey},${3:hashtable_table}",
            "completion": "SaveFogModifierHandleBJ( whichFogModifier, missionKey, table)",
           "description": "function SaveFogModifierHandleBJ takes fogmodifier whichFogModifier, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveAgentHandleBJ": {
           "prefix": "fnSaveAgentHandleBJ",
           "body": "SaveAgentHandleBJ(${1:integer_missionKey},${2:hashtable_table},${3:agent_whichAgent}",
            "completion": "SaveAgentHandleBJ( missionKey, table, whichAgent)",
           "description": "function SaveAgentHandleBJ takes agent whichAgent, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveHashtableHandleBJ": {
           "prefix": "fnSaveHashtableHandleBJ",
           "body": "SaveHashtableHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "SaveHashtableHandleBJ( missionKey, table)",
           "description": "function SaveHashtableHandleBJ takes hashtable whichHashtable, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnGetStoredRealBJ": {
           "prefix": "fnGetStoredRealBJ",
           "body": "GetStoredRealBJ(${1:gamecache_cache},${2:string_missionKey}",
            "completion": "GetStoredRealBJ( cache, missionKey)",
           "description": "function GetStoredRealBJ takes string key, string missionKey, gamecache cache returns real",
           "scope": "source.vjass"
       },
        "fnGetStoredIntegerBJ": {
           "prefix": "fnGetStoredIntegerBJ",
           "body": "GetStoredIntegerBJ(${1:gamecache_cache},${2:string_missionKey}",
            "completion": "GetStoredIntegerBJ( cache, missionKey)",
           "description": "function GetStoredIntegerBJ takes string key, string missionKey, gamecache cache returns integer",
           "scope": "source.vjass"
       },
        "fnGetStoredBooleanBJ": {
           "prefix": "fnGetStoredBooleanBJ",
           "body": "GetStoredBooleanBJ(${1:gamecache_cache},${2:string_missionKey}",
            "completion": "GetStoredBooleanBJ( cache, missionKey)",
           "description": "function GetStoredBooleanBJ takes string key, string missionKey, gamecache cache returns boolean",
           "scope": "source.vjass"
       },
        "fnGetStoredStringBJ": {
           "prefix": "fnGetStoredStringBJ",
           "body": "GetStoredStringBJ(${1:gamecache_cache},${2:string_missionKey}",
            "completion": "GetStoredStringBJ( cache, missionKey)",
           "description": "function GetStoredStringBJ takes string key, string missionKey, gamecache cache returns string",
           "scope": "source.vjass"
       },
        "fnLoadRealBJ": {
           "prefix": "fnLoadRealBJ",
           "body": "LoadRealBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadRealBJ( missionKey, table)",
           "description": "function LoadRealBJ takes integer key, integer missionKey, hashtable table returns real",
           "scope": "source.vjass"
       },
        "fnLoadIntegerBJ": {
           "prefix": "fnLoadIntegerBJ",
           "body": "LoadIntegerBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadIntegerBJ( missionKey, table)",
           "description": "function LoadIntegerBJ takes integer key, integer missionKey, hashtable table returns integer",
           "scope": "source.vjass"
       },
        "fnLoadBooleanBJ": {
           "prefix": "fnLoadBooleanBJ",
           "body": "LoadBooleanBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadBooleanBJ( missionKey, table)",
           "description": "function LoadBooleanBJ takes integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnLoadStringBJ": {
           "prefix": "fnLoadStringBJ",
           "body": "LoadStringBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadStringBJ( missionKey, table)",
           "description": "function LoadStringBJ takes integer key, integer missionKey, hashtable table returns string",
           "scope": "source.vjass"
       },
        "fnLoadPlayerHandleBJ": {
           "prefix": "fnLoadPlayerHandleBJ",
           "body": "LoadPlayerHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadPlayerHandleBJ( missionKey, table)",
           "description": "function LoadPlayerHandleBJ takes integer key, integer missionKey, hashtable table returns player",
           "scope": "source.vjass"
       },
        "fnLoadWidgetHandleBJ": {
           "prefix": "fnLoadWidgetHandleBJ",
           "body": "LoadWidgetHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadWidgetHandleBJ( missionKey, table)",
           "description": "function LoadWidgetHandleBJ takes integer key, integer missionKey, hashtable table returns widget",
           "scope": "source.vjass"
       },
        "fnLoadDestructableHandleBJ": {
           "prefix": "fnLoadDestructableHandleBJ",
           "body": "LoadDestructableHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadDestructableHandleBJ( missionKey, table)",
           "description": "function LoadDestructableHandleBJ takes integer key, integer missionKey, hashtable table returns destructable",
           "scope": "source.vjass"
       },
        "fnLoadItemHandleBJ": {
           "prefix": "fnLoadItemHandleBJ",
           "body": "LoadItemHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadItemHandleBJ( missionKey, table)",
           "description": "function LoadItemHandleBJ takes integer key, integer missionKey, hashtable table returns item",
           "scope": "source.vjass"
       },
        "fnLoadUnitHandleBJ": {
           "prefix": "fnLoadUnitHandleBJ",
           "body": "LoadUnitHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadUnitHandleBJ( missionKey, table)",
           "description": "function LoadUnitHandleBJ takes integer key, integer missionKey, hashtable table returns unit",
           "scope": "source.vjass"
       },
        "fnLoadAbilityHandleBJ": {
           "prefix": "fnLoadAbilityHandleBJ",
           "body": "LoadAbilityHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadAbilityHandleBJ( missionKey, table)",
           "description": "function LoadAbilityHandleBJ takes integer key, integer missionKey, hashtable table returns ability",
           "scope": "source.vjass"
       },
        "fnLoadTimerHandleBJ": {
           "prefix": "fnLoadTimerHandleBJ",
           "body": "LoadTimerHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadTimerHandleBJ( missionKey, table)",
           "description": "function LoadTimerHandleBJ takes integer key, integer missionKey, hashtable table returns timer",
           "scope": "source.vjass"
       },
        "fnLoadTriggerHandleBJ": {
           "prefix": "fnLoadTriggerHandleBJ",
           "body": "LoadTriggerHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadTriggerHandleBJ( missionKey, table)",
           "description": "function LoadTriggerHandleBJ takes integer key, integer missionKey, hashtable table returns trigger",
           "scope": "source.vjass"
       },
        "fnLoadTriggerConditionHandleBJ": {
           "prefix": "fnLoadTriggerConditionHandleBJ",
           "body": "LoadTriggerConditionHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadTriggerConditionHandleBJ( missionKey, table)",
           "description": "function LoadTriggerConditionHandleBJ takes integer key, integer missionKey, hashtable table returns triggercondition",
           "scope": "source.vjass"
       },
        "fnLoadTriggerActionHandleBJ": {
           "prefix": "fnLoadTriggerActionHandleBJ",
           "body": "LoadTriggerActionHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadTriggerActionHandleBJ( missionKey, table)",
           "description": "function LoadTriggerActionHandleBJ takes integer key, integer missionKey, hashtable table returns triggeraction",
           "scope": "source.vjass"
       },
        "fnLoadTriggerEventHandleBJ": {
           "prefix": "fnLoadTriggerEventHandleBJ",
           "body": "LoadTriggerEventHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadTriggerEventHandleBJ( missionKey, table)",
           "description": "function LoadTriggerEventHandleBJ takes integer key, integer missionKey, hashtable table returns event",
           "scope": "source.vjass"
       },
        "fnLoadForceHandleBJ": {
           "prefix": "fnLoadForceHandleBJ",
           "body": "LoadForceHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadForceHandleBJ( missionKey, table)",
           "description": "function LoadForceHandleBJ takes integer key, integer missionKey, hashtable table returns force",
           "scope": "source.vjass"
       },
        "fnLoadGroupHandleBJ": {
           "prefix": "fnLoadGroupHandleBJ",
           "body": "LoadGroupHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadGroupHandleBJ( missionKey, table)",
           "description": "function LoadGroupHandleBJ takes integer key, integer missionKey, hashtable table returns group",
           "scope": "source.vjass"
       },
        "fnLoadLocationHandleBJ": {
           "prefix": "fnLoadLocationHandleBJ",
           "body": "LoadLocationHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadLocationHandleBJ( missionKey, table)",
           "description": "function LoadLocationHandleBJ takes integer key, integer missionKey, hashtable table returns location",
           "scope": "source.vjass"
       },
        "fnLoadRectHandleBJ": {
           "prefix": "fnLoadRectHandleBJ",
           "body": "LoadRectHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadRectHandleBJ( missionKey, table)",
           "description": "function LoadRectHandleBJ takes integer key, integer missionKey, hashtable table returns rect",
           "scope": "source.vjass"
       },
        "fnLoadBooleanExprHandleBJ": {
           "prefix": "fnLoadBooleanExprHandleBJ",
           "body": "LoadBooleanExprHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadBooleanExprHandleBJ( missionKey, table)",
           "description": "function LoadBooleanExprHandleBJ takes integer key, integer missionKey, hashtable table returns boolexpr",
           "scope": "source.vjass"
       },
        "fnLoadSoundHandleBJ": {
           "prefix": "fnLoadSoundHandleBJ",
           "body": "LoadSoundHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadSoundHandleBJ( missionKey, table)",
           "description": "function LoadSoundHandleBJ takes integer key, integer missionKey, hashtable table returns sound",
           "scope": "source.vjass"
       },
        "fnLoadEffectHandleBJ": {
           "prefix": "fnLoadEffectHandleBJ",
           "body": "LoadEffectHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadEffectHandleBJ( missionKey, table)",
           "description": "function LoadEffectHandleBJ takes integer key, integer missionKey, hashtable table returns effect",
           "scope": "source.vjass"
       },
        "fnLoadUnitPoolHandleBJ": {
           "prefix": "fnLoadUnitPoolHandleBJ",
           "body": "LoadUnitPoolHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadUnitPoolHandleBJ( missionKey, table)",
           "description": "function LoadUnitPoolHandleBJ takes integer key, integer missionKey, hashtable table returns unitpool",
           "scope": "source.vjass"
       },
        "fnLoadItemPoolHandleBJ": {
           "prefix": "fnLoadItemPoolHandleBJ",
           "body": "LoadItemPoolHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadItemPoolHandleBJ( missionKey, table)",
           "description": "function LoadItemPoolHandleBJ takes integer key, integer missionKey, hashtable table returns itempool",
           "scope": "source.vjass"
       },
        "fnLoadQuestHandleBJ": {
           "prefix": "fnLoadQuestHandleBJ",
           "body": "LoadQuestHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadQuestHandleBJ( missionKey, table)",
           "description": "function LoadQuestHandleBJ takes integer key, integer missionKey, hashtable table returns quest",
           "scope": "source.vjass"
       },
        "fnLoadQuestItemHandleBJ": {
           "prefix": "fnLoadQuestItemHandleBJ",
           "body": "LoadQuestItemHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadQuestItemHandleBJ( missionKey, table)",
           "description": "function LoadQuestItemHandleBJ takes integer key, integer missionKey, hashtable table returns questitem",
           "scope": "source.vjass"
       },
        "fnLoadDefeatConditionHandleBJ": {
           "prefix": "fnLoadDefeatConditionHandleBJ",
           "body": "LoadDefeatConditionHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadDefeatConditionHandleBJ( missionKey, table)",
           "description": "function LoadDefeatConditionHandleBJ takes integer key, integer missionKey, hashtable table returns defeatcondition",
           "scope": "source.vjass"
       },
        "fnLoadTimerDialogHandleBJ": {
           "prefix": "fnLoadTimerDialogHandleBJ",
           "body": "LoadTimerDialogHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadTimerDialogHandleBJ( missionKey, table)",
           "description": "function LoadTimerDialogHandleBJ takes integer key, integer missionKey, hashtable table returns timerdialog",
           "scope": "source.vjass"
       },
        "fnLoadLeaderboardHandleBJ": {
           "prefix": "fnLoadLeaderboardHandleBJ",
           "body": "LoadLeaderboardHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadLeaderboardHandleBJ( missionKey, table)",
           "description": "function LoadLeaderboardHandleBJ takes integer key, integer missionKey, hashtable table returns leaderboard",
           "scope": "source.vjass"
       },
        "fnLoadMultiboardHandleBJ": {
           "prefix": "fnLoadMultiboardHandleBJ",
           "body": "LoadMultiboardHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadMultiboardHandleBJ( missionKey, table)",
           "description": "function LoadMultiboardHandleBJ takes integer key, integer missionKey, hashtable table returns multiboard",
           "scope": "source.vjass"
       },
        "fnLoadMultiboardItemHandleBJ": {
           "prefix": "fnLoadMultiboardItemHandleBJ",
           "body": "LoadMultiboardItemHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadMultiboardItemHandleBJ( missionKey, table)",
           "description": "function LoadMultiboardItemHandleBJ takes integer key, integer missionKey, hashtable table returns multiboarditem",
           "scope": "source.vjass"
       },
        "fnLoadTrackableHandleBJ": {
           "prefix": "fnLoadTrackableHandleBJ",
           "body": "LoadTrackableHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadTrackableHandleBJ( missionKey, table)",
           "description": "function LoadTrackableHandleBJ takes integer key, integer missionKey, hashtable table returns trackable",
           "scope": "source.vjass"
       },
        "fnLoadDialogHandleBJ": {
           "prefix": "fnLoadDialogHandleBJ",
           "body": "LoadDialogHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadDialogHandleBJ( missionKey, table)",
           "description": "function LoadDialogHandleBJ takes integer key, integer missionKey, hashtable table returns dialog",
           "scope": "source.vjass"
       },
        "fnLoadButtonHandleBJ": {
           "prefix": "fnLoadButtonHandleBJ",
           "body": "LoadButtonHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadButtonHandleBJ( missionKey, table)",
           "description": "function LoadButtonHandleBJ takes integer key, integer missionKey, hashtable table returns button",
           "scope": "source.vjass"
       },
        "fnLoadTextTagHandleBJ": {
           "prefix": "fnLoadTextTagHandleBJ",
           "body": "LoadTextTagHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadTextTagHandleBJ( missionKey, table)",
           "description": "function LoadTextTagHandleBJ takes integer key, integer missionKey, hashtable table returns texttag",
           "scope": "source.vjass"
       },
        "fnLoadLightningHandleBJ": {
           "prefix": "fnLoadLightningHandleBJ",
           "body": "LoadLightningHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadLightningHandleBJ( missionKey, table)",
           "description": "function LoadLightningHandleBJ takes integer key, integer missionKey, hashtable table returns lightning",
           "scope": "source.vjass"
       },
        "fnLoadImageHandleBJ": {
           "prefix": "fnLoadImageHandleBJ",
           "body": "LoadImageHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadImageHandleBJ( missionKey, table)",
           "description": "function LoadImageHandleBJ takes integer key, integer missionKey, hashtable table returns image",
           "scope": "source.vjass"
       },
        "fnLoadUbersplatHandleBJ": {
           "prefix": "fnLoadUbersplatHandleBJ",
           "body": "LoadUbersplatHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadUbersplatHandleBJ( missionKey, table)",
           "description": "function LoadUbersplatHandleBJ takes integer key, integer missionKey, hashtable table returns ubersplat",
           "scope": "source.vjass"
       },
        "fnLoadRegionHandleBJ": {
           "prefix": "fnLoadRegionHandleBJ",
           "body": "LoadRegionHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadRegionHandleBJ( missionKey, table)",
           "description": "function LoadRegionHandleBJ takes integer key, integer missionKey, hashtable table returns region",
           "scope": "source.vjass"
       },
        "fnLoadFogStateHandleBJ": {
           "prefix": "fnLoadFogStateHandleBJ",
           "body": "LoadFogStateHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadFogStateHandleBJ( missionKey, table)",
           "description": "function LoadFogStateHandleBJ takes integer key, integer missionKey, hashtable table returns fogstate",
           "scope": "source.vjass"
       },
        "fnLoadFogModifierHandleBJ": {
           "prefix": "fnLoadFogModifierHandleBJ",
           "body": "LoadFogModifierHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadFogModifierHandleBJ( missionKey, table)",
           "description": "function LoadFogModifierHandleBJ takes integer key, integer missionKey, hashtable table returns fogmodifier",
           "scope": "source.vjass"
       },
        "fnLoadHashtableHandleBJ": {
           "prefix": "fnLoadHashtableHandleBJ",
           "body": "LoadHashtableHandleBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "LoadHashtableHandleBJ( missionKey, table)",
           "description": "function LoadHashtableHandleBJ takes integer key, integer missionKey, hashtable table returns hashtable",
           "scope": "source.vjass"
       },
        "fnRestoreUnitLocFacingAngleBJ": {
           "prefix": "fnRestoreUnitLocFacingAngleBJ",
           "body": "RestoreUnitLocFacingAngleBJ(${1:real_facing},${2:gamecache_cache},${3:location_loc},${4:string_missionKey},${5:player_forWhichPlayer}",
            "completion": "RestoreUnitLocFacingAngleBJ( facing, cache, loc, missionKey, forWhichPlayer)",
           "description": "function RestoreUnitLocFacingAngleBJ takes string key, string missionKey, gamecache cache, player forWhichPlayer, location loc, real facing returns unit",
           "scope": "source.vjass"
       },
        "fnRestoreUnitLocFacingPointBJ": {
           "prefix": "fnRestoreUnitLocFacingPointBJ",
           "body": "RestoreUnitLocFacingPointBJ(${1:gamecache_cache},${2:location_lookAt},${3:string_missionKey},${4:player_forWhichPlayer}",
            "completion": "RestoreUnitLocFacingPointBJ( cache, lookAt, missionKey, forWhichPlayer)",
           "description": "function RestoreUnitLocFacingPointBJ takes string key, string missionKey, gamecache cache, player forWhichPlayer, location loc, location lookAt returns unit",
           "scope": "source.vjass"
       },
        "fnGetLastRestoredUnitBJ": {
           "prefix": "fnGetLastRestoredUnitBJ",
           "body": "GetLastRestoredUnitBJ(",
            "completion": "GetLastRestoredUnitBJ()",
           "description": "function GetLastRestoredUnitBJ takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnFlushGameCacheBJ": {
           "prefix": "fnFlushGameCacheBJ",
           "body": "FlushGameCacheBJ(${1:gamecache_cache}",
            "completion": "FlushGameCacheBJ( cache)",
           "description": "function FlushGameCacheBJ takes gamecache cache returns nothing",
           "scope": "source.vjass"
       },
        "fnFlushStoredMissionBJ": {
           "prefix": "fnFlushStoredMissionBJ",
           "body": "FlushStoredMissionBJ(${1:gamecache_cache},${2:string_missionKey}",
            "completion": "FlushStoredMissionBJ( cache, missionKey)",
           "description": "function FlushStoredMissionBJ takes string missionKey, gamecache cache returns nothing",
           "scope": "source.vjass"
       },
        "fnFlushParentHashtableBJ": {
           "prefix": "fnFlushParentHashtableBJ",
           "body": "FlushParentHashtableBJ(${1:hashtable_table}",
            "completion": "FlushParentHashtableBJ( table)",
           "description": "function FlushParentHashtableBJ takes hashtable table returns nothing",
           "scope": "source.vjass"
       },
        "fnFlushChildHashtableBJ": {
           "prefix": "fnFlushChildHashtableBJ",
           "body": "FlushChildHashtableBJ(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "FlushChildHashtableBJ( missionKey, table)",
           "description": "function FlushChildHashtableBJ takes integer missionKey, hashtable table returns nothing",
           "scope": "source.vjass"
       },
        "fnHaveStoredValue": {
           "prefix": "fnHaveStoredValue",
           "body": "HaveStoredValue(${1:integer_valueType},${2:string_missionKey},${3:gamecache_cache}",
            "completion": "HaveStoredValue( valueType, missionKey, cache)",
           "description": "function HaveStoredValue takes string key, integer valueType, string missionKey, gamecache cache returns boolean",
           "scope": "source.vjass"
       },
        "fnHaveSavedValue": {
           "prefix": "fnHaveSavedValue",
           "body": "HaveSavedValue(${1:integer_missionKey},${2:hashtable_table}",
            "completion": "HaveSavedValue( missionKey, table)",
           "description": "function HaveSavedValue takes integer key, integer valueType, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnShowCustomCampaignButton": {
           "prefix": "fnShowCustomCampaignButton",
           "body": "ShowCustomCampaignButton(${1:integer_whichButton},${2:boolean_show}",
            "completion": "ShowCustomCampaignButton( whichButton, show)",
           "description": "function ShowCustomCampaignButton takes boolean show, integer whichButton returns nothing",
           "scope": "source.vjass"
       },
        "fnIsCustomCampaignButtonVisibile": {
           "prefix": "fnIsCustomCampaignButtonVisibile",
           "body": "IsCustomCampaignButtonVisibile(${1:integer_whichButton}",
            "completion": "IsCustomCampaignButtonVisibile( whichButton)",
           "description": "function IsCustomCampaignButtonVisibile takes integer whichButton returns boolean",
           "scope": "source.vjass"
       },
        "fnLoadGameBJ": {
           "prefix": "fnLoadGameBJ",
           "body": "LoadGameBJ(${1:boolean_doScoreScreen},${2:string_loadFileName}",
            "completion": "LoadGameBJ( doScoreScreen, loadFileName)",
           "description": "function LoadGameBJ takes string loadFileName, boolean doScoreScreen returns nothing",
           "scope": "source.vjass"
       },
        "fnSaveAndChangeLevelBJ": {
           "prefix": "fnSaveAndChangeLevelBJ",
           "body": "SaveAndChangeLevelBJ(${1:boolean_doScoreScreen},${2:string_newLevel}",
            "completion": "SaveAndChangeLevelBJ( doScoreScreen, newLevel)",
           "description": "function SaveAndChangeLevelBJ takes string saveFileName, string newLevel, boolean doScoreScreen returns nothing",
           "scope": "source.vjass"
       },
        "fnSaveAndLoadGameBJ": {
           "prefix": "fnSaveAndLoadGameBJ",
           "body": "SaveAndLoadGameBJ(${1:boolean_doScoreScreen},${2:string_loadFileName}",
            "completion": "SaveAndLoadGameBJ( doScoreScreen, loadFileName)",
           "description": "function SaveAndLoadGameBJ takes string saveFileName, string loadFileName, boolean doScoreScreen returns nothing",
           "scope": "source.vjass"
       },
        "fnRenameSaveDirectoryBJ": {
           "prefix": "fnRenameSaveDirectoryBJ",
           "body": "RenameSaveDirectoryBJ(${1:string_destDirName}",
            "completion": "RenameSaveDirectoryBJ( destDirName)",
           "description": "function RenameSaveDirectoryBJ takes string sourceDirName, string destDirName returns boolean",
           "scope": "source.vjass"
       },
        "fnRemoveSaveDirectoryBJ": {
           "prefix": "fnRemoveSaveDirectoryBJ",
           "body": "RemoveSaveDirectoryBJ(${1:string_sourceDirName}",
            "completion": "RemoveSaveDirectoryBJ( sourceDirName)",
           "description": "function RemoveSaveDirectoryBJ takes string sourceDirName returns boolean",
           "scope": "source.vjass"
       },
        "fnCopySaveGameBJ": {
           "prefix": "fnCopySaveGameBJ",
           "body": "CopySaveGameBJ(${1:string_destSaveName}",
            "completion": "CopySaveGameBJ( destSaveName)",
           "description": "function CopySaveGameBJ takes string sourceSaveName, string destSaveName returns boolean",
           "scope": "source.vjass"
       },
        "fnGetPlayerStartLocationX": {
           "prefix": "fnGetPlayerStartLocationX",
           "body": "GetPlayerStartLocationX(${1:player_whichPlayer}",
            "completion": "GetPlayerStartLocationX( whichPlayer)",
           "description": "function GetPlayerStartLocationX takes player whichPlayer returns real",
           "scope": "source.vjass"
       },
        "fnGetPlayerStartLocationY": {
           "prefix": "fnGetPlayerStartLocationY",
           "body": "GetPlayerStartLocationY(${1:player_whichPlayer}",
            "completion": "GetPlayerStartLocationY( whichPlayer)",
           "description": "function GetPlayerStartLocationY takes player whichPlayer returns real",
           "scope": "source.vjass"
       },
        "fnGetPlayerStartLocationLoc": {
           "prefix": "fnGetPlayerStartLocationLoc",
           "body": "GetPlayerStartLocationLoc(${1:player_whichPlayer}",
            "completion": "GetPlayerStartLocationLoc( whichPlayer)",
           "description": "function GetPlayerStartLocationLoc takes player whichPlayer returns location",
           "scope": "source.vjass"
       },
        "fnGetRectCenter": {
           "prefix": "fnGetRectCenter",
           "body": "GetRectCenter(${1:rect_whichRect}",
            "completion": "GetRectCenter( whichRect)",
           "description": "function GetRectCenter takes rect whichRect returns location",
           "scope": "source.vjass"
       },
        "fnIsPlayerSlotState": {
           "prefix": "fnIsPlayerSlotState",
           "body": "IsPlayerSlotState(${1:player_whichPlayer},${2:playerslotstate_whichState}",
            "completion": "IsPlayerSlotState( whichPlayer, whichState)",
           "description": "function IsPlayerSlotState takes player whichPlayer, playerslotstate whichState returns boolean",
           "scope": "source.vjass"
       },
        "fnGetFadeFromSeconds": {
           "prefix": "fnGetFadeFromSeconds",
           "body": "GetFadeFromSeconds(${1:real_seconds}",
            "completion": "GetFadeFromSeconds( seconds)",
           "description": "function GetFadeFromSeconds takes real seconds returns integer",
           "scope": "source.vjass"
       },
        "fnGetFadeFromSecondsAsReal": {
           "prefix": "fnGetFadeFromSecondsAsReal",
           "body": "GetFadeFromSecondsAsReal(${1:real_seconds}",
            "completion": "GetFadeFromSecondsAsReal( seconds)",
           "description": "function GetFadeFromSecondsAsReal takes real seconds returns real",
           "scope": "source.vjass"
       },
        "fnAdjustPlayerStateSimpleBJ": {
           "prefix": "fnAdjustPlayerStateSimpleBJ",
           "body": "AdjustPlayerStateSimpleBJ(${1:player_whichPlayer},${2:integer_delta},${3:playerstate_whichPlayerState}",
            "completion": "AdjustPlayerStateSimpleBJ( whichPlayer, delta, whichPlayerState)",
           "description": "function AdjustPlayerStateSimpleBJ takes player whichPlayer, playerstate whichPlayerState, integer delta returns nothing",
           "scope": "source.vjass"
       },
        "fnAdjustPlayerStateBJ": {
           "prefix": "fnAdjustPlayerStateBJ",
           "body": "AdjustPlayerStateBJ(${1:integer_delta},${2:playerstate_whichPlayerState},${3:player_whichPlayer}",
            "completion": "AdjustPlayerStateBJ( delta, whichPlayerState, whichPlayer)",
           "description": "function AdjustPlayerStateBJ takes integer delta, player whichPlayer, playerstate whichPlayerState returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerStateBJ": {
           "prefix": "fnSetPlayerStateBJ",
           "body": "SetPlayerStateBJ(${1:player_whichPlayer},${2:integer_value},${3:playerstate_whichPlayerState}",
            "completion": "SetPlayerStateBJ( whichPlayer, value, whichPlayerState)",
           "description": "function SetPlayerStateBJ takes player whichPlayer, playerstate whichPlayerState, integer value returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerFlagBJ": {
           "prefix": "fnSetPlayerFlagBJ",
           "body": "SetPlayerFlagBJ(${1:playerstate_whichPlayerFlag},${2:boolean_flag},${3:player_whichPlayer}",
            "completion": "SetPlayerFlagBJ( whichPlayerFlag, flag, whichPlayer)",
           "description": "function SetPlayerFlagBJ takes playerstate whichPlayerFlag, boolean flag, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerTaxRateBJ": {
           "prefix": "fnSetPlayerTaxRateBJ",
           "body": "SetPlayerTaxRateBJ(${1:player_otherPlayer},${2:integer_rate},${3:playerstate_whichResource}",
            "completion": "SetPlayerTaxRateBJ( otherPlayer, rate, whichResource)",
           "description": "function SetPlayerTaxRateBJ takes integer rate, playerstate whichResource, player sourcePlayer, player otherPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnGetPlayerTaxRateBJ": {
           "prefix": "fnGetPlayerTaxRateBJ",
           "body": "GetPlayerTaxRateBJ(${1:playerstate_whichResource},${2:player_otherPlayer}",
            "completion": "GetPlayerTaxRateBJ( whichResource, otherPlayer)",
           "description": "function GetPlayerTaxRateBJ takes playerstate whichResource, player sourcePlayer, player otherPlayer returns integer",
           "scope": "source.vjass"
       },
        "fnIsPlayerFlagSetBJ": {
           "prefix": "fnIsPlayerFlagSetBJ",
           "body": "IsPlayerFlagSetBJ(${1:playerstate_whichPlayerFlag},${2:player_whichPlayer}",
            "completion": "IsPlayerFlagSetBJ( whichPlayerFlag, whichPlayer)",
           "description": "function IsPlayerFlagSetBJ takes playerstate whichPlayerFlag, player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnAddResourceAmountBJ": {
           "prefix": "fnAddResourceAmountBJ",
           "body": "AddResourceAmountBJ(${1:integer_delta},${2:unit_whichUnit}",
            "completion": "AddResourceAmountBJ( delta, whichUnit)",
           "description": "function AddResourceAmountBJ takes integer delta, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnGetConvertedPlayerId": {
           "prefix": "fnGetConvertedPlayerId",
           "body": "GetConvertedPlayerId(${1:player_whichPlayer}",
            "completion": "GetConvertedPlayerId( whichPlayer)",
           "description": "function GetConvertedPlayerId takes player whichPlayer returns integer",
           "scope": "source.vjass"
       },
        "fnConvertedPlayer": {
           "prefix": "fnConvertedPlayer",
           "body": "ConvertedPlayer(${1:integer_convertedPlayerId}",
            "completion": "ConvertedPlayer( convertedPlayerId)",
           "description": "function ConvertedPlayer takes integer convertedPlayerId returns player",
           "scope": "source.vjass"
       },
        "fnGetRectWidthBJ": {
           "prefix": "fnGetRectWidthBJ",
           "body": "GetRectWidthBJ(${1:rect_r}",
            "completion": "GetRectWidthBJ( r)",
           "description": "function GetRectWidthBJ takes rect r returns real",
           "scope": "source.vjass"
       },
        "fnGetRectHeightBJ": {
           "prefix": "fnGetRectHeightBJ",
           "body": "GetRectHeightBJ(${1:rect_r}",
            "completion": "GetRectHeightBJ( r)",
           "description": "function GetRectHeightBJ takes rect r returns real",
           "scope": "source.vjass"
       },
        "fnBlightGoldMineForPlayerBJ": {
           "prefix": "fnBlightGoldMineForPlayerBJ",
           "body": "BlightGoldMineForPlayerBJ(${1:player_whichPlayer},${2:unit_goldMine}",
            "completion": "BlightGoldMineForPlayerBJ( whichPlayer, goldMine)",
           "description": "function BlightGoldMineForPlayerBJ takes unit goldMine, player whichPlayer returns unit",
           "scope": "source.vjass"
       },
        "fnBlightGoldMineForPlayer": {
           "prefix": "fnBlightGoldMineForPlayer",
           "body": "BlightGoldMineForPlayer(${1:player_whichPlayer},${2:unit_goldMine}",
            "completion": "BlightGoldMineForPlayer( whichPlayer, goldMine)",
           "description": "function BlightGoldMineForPlayer takes unit goldMine, player whichPlayer returns unit",
           "scope": "source.vjass"
       },
        "fnGetLastHauntedGoldMine": {
           "prefix": "fnGetLastHauntedGoldMine",
           "body": "GetLastHauntedGoldMine(",
            "completion": "GetLastHauntedGoldMine()",
           "description": "function GetLastHauntedGoldMine takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnIsPointBlightedBJ": {
           "prefix": "fnIsPointBlightedBJ",
           "body": "IsPointBlightedBJ(${1:location_where}",
            "completion": "IsPointBlightedBJ( where)",
           "description": "function IsPointBlightedBJ takes location where returns boolean",
           "scope": "source.vjass"
       },
        "fnSetPlayerColorBJEnum": {
           "prefix": "fnSetPlayerColorBJEnum",
           "body": "SetPlayerColorBJEnum(",
            "completion": "SetPlayerColorBJEnum()",
           "description": "function SetPlayerColorBJEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerColorBJ": {
           "prefix": "fnSetPlayerColorBJ",
           "body": "SetPlayerColorBJ(${1:boolean_changeExisting},${2:player_whichPlayer},${3:playercolor_color}",
            "completion": "SetPlayerColorBJ( changeExisting, whichPlayer, color)",
           "description": "function SetPlayerColorBJ takes player whichPlayer, playercolor color, boolean changeExisting returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerUnitAvailableBJ": {
           "prefix": "fnSetPlayerUnitAvailableBJ",
           "body": "SetPlayerUnitAvailableBJ(${1:integer_unitId},${2:boolean_allowed},${3:player_whichPlayer}",
            "completion": "SetPlayerUnitAvailableBJ( unitId, allowed, whichPlayer)",
           "description": "function SetPlayerUnitAvailableBJ takes integer unitId, boolean allowed, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnLockGameSpeedBJ": {
           "prefix": "fnLockGameSpeedBJ",
           "body": "LockGameSpeedBJ(",
            "completion": "LockGameSpeedBJ()",
           "description": "function LockGameSpeedBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnUnlockGameSpeedBJ": {
           "prefix": "fnUnlockGameSpeedBJ",
           "body": "UnlockGameSpeedBJ(",
            "completion": "UnlockGameSpeedBJ()",
           "description": "function UnlockGameSpeedBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnIssueTargetOrderBJ": {
           "prefix": "fnIssueTargetOrderBJ",
           "body": "IssueTargetOrderBJ(${1:widget_targetWidget},${2:string_order},${3:unit_whichUnit}",
            "completion": "IssueTargetOrderBJ( targetWidget, order, whichUnit)",
           "description": "function IssueTargetOrderBJ takes unit whichUnit, string order, widget targetWidget returns boolean",
           "scope": "source.vjass"
       },
        "fnIssuePointOrderLocBJ": {
           "prefix": "fnIssuePointOrderLocBJ",
           "body": "IssuePointOrderLocBJ(${1:string_order},${2:unit_whichUnit},${3:location_whichLocation}",
            "completion": "IssuePointOrderLocBJ( order, whichUnit, whichLocation)",
           "description": "function IssuePointOrderLocBJ takes unit whichUnit, string order, location whichLocation returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueTargetDestructableOrder": {
           "prefix": "fnIssueTargetDestructableOrder",
           "body": "IssueTargetDestructableOrder(${1:widget_targetWidget},${2:string_order},${3:unit_whichUnit}",
            "completion": "IssueTargetDestructableOrder( targetWidget, order, whichUnit)",
           "description": "function IssueTargetDestructableOrder takes unit whichUnit, string order, widget targetWidget returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueTargetItemOrder": {
           "prefix": "fnIssueTargetItemOrder",
           "body": "IssueTargetItemOrder(${1:widget_targetWidget},${2:string_order},${3:unit_whichUnit}",
            "completion": "IssueTargetItemOrder( targetWidget, order, whichUnit)",
           "description": "function IssueTargetItemOrder takes unit whichUnit, string order, widget targetWidget returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueImmediateOrderBJ": {
           "prefix": "fnIssueImmediateOrderBJ",
           "body": "IssueImmediateOrderBJ(${1:string_order},${2:unit_whichUnit}",
            "completion": "IssueImmediateOrderBJ( order, whichUnit)",
           "description": "function IssueImmediateOrderBJ takes unit whichUnit, string order returns boolean",
           "scope": "source.vjass"
       },
        "fnGroupTargetOrderBJ": {
           "prefix": "fnGroupTargetOrderBJ",
           "body": "GroupTargetOrderBJ(${1:widget_targetWidget},${2:group_whichGroup},${3:string_order}",
            "completion": "GroupTargetOrderBJ( targetWidget, whichGroup, order)",
           "description": "function GroupTargetOrderBJ takes group whichGroup, string order, widget targetWidget returns boolean",
           "scope": "source.vjass"
       },
        "fnGroupPointOrderLocBJ": {
           "prefix": "fnGroupPointOrderLocBJ",
           "body": "GroupPointOrderLocBJ(${1:group_whichGroup},${2:string_order},${3:location_whichLocation}",
            "completion": "GroupPointOrderLocBJ( whichGroup, order, whichLocation)",
           "description": "function GroupPointOrderLocBJ takes group whichGroup, string order, location whichLocation returns boolean",
           "scope": "source.vjass"
       },
        "fnGroupImmediateOrderBJ": {
           "prefix": "fnGroupImmediateOrderBJ",
           "body": "GroupImmediateOrderBJ(${1:group_whichGroup},${2:string_order}",
            "completion": "GroupImmediateOrderBJ( whichGroup, order)",
           "description": "function GroupImmediateOrderBJ takes group whichGroup, string order returns boolean",
           "scope": "source.vjass"
       },
        "fnGroupTargetDestructableOrder": {
           "prefix": "fnGroupTargetDestructableOrder",
           "body": "GroupTargetDestructableOrder(${1:widget_targetWidget},${2:group_whichGroup},${3:string_order}",
            "completion": "GroupTargetDestructableOrder( targetWidget, whichGroup, order)",
           "description": "function GroupTargetDestructableOrder takes group whichGroup, string order, widget targetWidget returns boolean",
           "scope": "source.vjass"
       },
        "fnGroupTargetItemOrder": {
           "prefix": "fnGroupTargetItemOrder",
           "body": "GroupTargetItemOrder(${1:widget_targetWidget},${2:group_whichGroup},${3:string_order}",
            "completion": "GroupTargetItemOrder( targetWidget, whichGroup, order)",
           "description": "function GroupTargetItemOrder takes group whichGroup, string order, widget targetWidget returns boolean",
           "scope": "source.vjass"
       },
        "fnGetDyingDestructable": {
           "prefix": "fnGetDyingDestructable",
           "body": "GetDyingDestructable(",
            "completion": "GetDyingDestructable()",
           "description": "function GetDyingDestructable takes nothing returns destructable",
           "scope": "source.vjass"
       },
        "fnSetUnitRallyPoint": {
           "prefix": "fnSetUnitRallyPoint",
           "body": "SetUnitRallyPoint(${1:location_targPos},${2:unit_whichUnit}",
            "completion": "SetUnitRallyPoint( targPos, whichUnit)",
           "description": "function SetUnitRallyPoint takes unit whichUnit, location targPos returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitRallyUnit": {
           "prefix": "fnSetUnitRallyUnit",
           "body": "SetUnitRallyUnit(${1:unit_targUnit}",
            "completion": "SetUnitRallyUnit( targUnit)",
           "description": "function SetUnitRallyUnit takes unit whichUnit, unit targUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitRallyDestructable": {
           "prefix": "fnSetUnitRallyDestructable",
           "body": "SetUnitRallyDestructable(${1:destructable_targDest},${2:unit_whichUnit}",
            "completion": "SetUnitRallyDestructable( targDest, whichUnit)",
           "description": "function SetUnitRallyDestructable takes unit whichUnit, destructable targDest returns nothing",
           "scope": "source.vjass"
       },
        "fnSaveDyingWidget": {
           "prefix": "fnSaveDyingWidget",
           "body": "SaveDyingWidget(",
            "completion": "SaveDyingWidget()",
           "description": "function SaveDyingWidget takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetBlightRectBJ": {
           "prefix": "fnSetBlightRectBJ",
           "body": "SetBlightRectBJ(${1:player_whichPlayer},${2:boolean_addBlight},${3:rect_r}",
            "completion": "SetBlightRectBJ( whichPlayer, addBlight, r)",
           "description": "function SetBlightRectBJ takes boolean addBlight, player whichPlayer, rect r returns nothing",
           "scope": "source.vjass"
       },
        "fnSetBlightRadiusLocBJ": {
           "prefix": "fnSetBlightRadiusLocBJ",
           "body": "SetBlightRadiusLocBJ(${1:real_radius},${2:player_whichPlayer},${3:boolean_addBlight},${4:location_loc}",
            "completion": "SetBlightRadiusLocBJ( radius, whichPlayer, addBlight, loc)",
           "description": "function SetBlightRadiusLocBJ takes boolean addBlight, player whichPlayer, location loc, real radius returns nothing",
           "scope": "source.vjass"
       },
        "fnGetAbilityName": {
           "prefix": "fnGetAbilityName",
           "body": "GetAbilityName(${1:integer_abilcode}",
            "completion": "GetAbilityName( abilcode)",
           "description": "function GetAbilityName takes integer abilcode returns string",
           "scope": "source.vjass"
       },
        "fnMeleeStartingVisibility": {
           "prefix": "fnMeleeStartingVisibility",
           "body": "MeleeStartingVisibility(",
            "completion": "MeleeStartingVisibility()",
           "description": "function MeleeStartingVisibility takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeStartingResources": {
           "prefix": "fnMeleeStartingResources",
           "body": "MeleeStartingResources(",
            "completion": "MeleeStartingResources()",
           "description": "function MeleeStartingResources takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnReducePlayerTechMaxAllowed": {
           "prefix": "fnReducePlayerTechMaxAllowed",
           "body": "ReducePlayerTechMaxAllowed(${1:player_whichPlayer},${2:integer_limit}",
            "completion": "ReducePlayerTechMaxAllowed( whichPlayer, limit)",
           "description": "function ReducePlayerTechMaxAllowed takes player whichPlayer, integer techId, integer limit returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeStartingHeroLimit": {
           "prefix": "fnMeleeStartingHeroLimit",
           "body": "MeleeStartingHeroLimit(",
            "completion": "MeleeStartingHeroLimit()",
           "description": "function MeleeStartingHeroLimit takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeTrainedUnitIsHeroBJFilter": {
           "prefix": "fnMeleeTrainedUnitIsHeroBJFilter",
           "body": "MeleeTrainedUnitIsHeroBJFilter(",
            "completion": "MeleeTrainedUnitIsHeroBJFilter()",
           "description": "function MeleeTrainedUnitIsHeroBJFilter takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnMeleeGrantItemsToHero": {
           "prefix": "fnMeleeGrantItemsToHero",
           "body": "MeleeGrantItemsToHero(${1:unit_whichUnit}",
            "completion": "MeleeGrantItemsToHero( whichUnit)",
           "description": "function MeleeGrantItemsToHero takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeGrantItemsToTrainedHero": {
           "prefix": "fnMeleeGrantItemsToTrainedHero",
           "body": "MeleeGrantItemsToTrainedHero(",
            "completion": "MeleeGrantItemsToTrainedHero()",
           "description": "function MeleeGrantItemsToTrainedHero takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeGrantItemsToHiredHero": {
           "prefix": "fnMeleeGrantItemsToHiredHero",
           "body": "MeleeGrantItemsToHiredHero(",
            "completion": "MeleeGrantItemsToHiredHero()",
           "description": "function MeleeGrantItemsToHiredHero takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeGrantHeroItems": {
           "prefix": "fnMeleeGrantHeroItems",
           "body": "MeleeGrantHeroItems(",
            "completion": "MeleeGrantHeroItems()",
           "description": "function MeleeGrantHeroItems takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeClearExcessUnit": {
           "prefix": "fnMeleeClearExcessUnit",
           "body": "MeleeClearExcessUnit(",
            "completion": "MeleeClearExcessUnit()",
           "description": "function MeleeClearExcessUnit takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeClearNearbyUnits": {
           "prefix": "fnMeleeClearNearbyUnits",
           "body": "MeleeClearNearbyUnits(${1:real_range}",
            "completion": "MeleeClearNearbyUnits( range)",
           "description": "function MeleeClearNearbyUnits takes real x, real y, real range returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeClearExcessUnits": {
           "prefix": "fnMeleeClearExcessUnits",
           "body": "MeleeClearExcessUnits(",
            "completion": "MeleeClearExcessUnits()",
           "description": "function MeleeClearExcessUnits takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeEnumFindNearestMine": {
           "prefix": "fnMeleeEnumFindNearestMine",
           "body": "MeleeEnumFindNearestMine(",
            "completion": "MeleeEnumFindNearestMine()",
           "description": "function MeleeEnumFindNearestMine takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeFindNearestMine": {
           "prefix": "fnMeleeFindNearestMine",
           "body": "MeleeFindNearestMine(${1:real_range},${2:location_src}",
            "completion": "MeleeFindNearestMine( range, src)",
           "description": "function MeleeFindNearestMine takes location src, real range returns unit",
           "scope": "source.vjass"
       },
        "fnMeleeRandomHeroLoc": {
           "prefix": "fnMeleeRandomHeroLoc",
           "body": "MeleeRandomHeroLoc(${1:player_p},${2:location_loc},${3:integer_id4}",
            "completion": "MeleeRandomHeroLoc( p, loc, id4)",
           "description": "function MeleeRandomHeroLoc takes player p, integer id1, integer id2, integer id3, integer id4, location loc returns unit",
           "scope": "source.vjass"
       },
        "fnMeleeGetProjectedLoc": {
           "prefix": "fnMeleeGetProjectedLoc",
           "body": "MeleeGetProjectedLoc(${1:real_deltaAngle},${2:location_targ}",
            "completion": "MeleeGetProjectedLoc( deltaAngle, targ)",
           "description": "function MeleeGetProjectedLoc takes location src, location targ, real distance, real deltaAngle returns location",
           "scope": "source.vjass"
       },
        "fnMeleeGetNearestValueWithin": {
           "prefix": "fnMeleeGetNearestValueWithin",
           "body": "MeleeGetNearestValueWithin(${1:real_maxVal}",
            "completion": "MeleeGetNearestValueWithin( maxVal)",
           "description": "function MeleeGetNearestValueWithin takes real val, real minVal, real maxVal returns real",
           "scope": "source.vjass"
       },
        "fnMeleeGetLocWithinRect": {
           "prefix": "fnMeleeGetLocWithinRect",
           "body": "MeleeGetLocWithinRect(${1:location_src},${2:rect_r}",
            "completion": "MeleeGetLocWithinRect( src, r)",
           "description": "function MeleeGetLocWithinRect takes location src, rect r returns location",
           "scope": "source.vjass"
       },
        "fnMeleeStartingUnitsHuman": {
           "prefix": "fnMeleeStartingUnitsHuman",
           "body": "MeleeStartingUnitsHuman(${1:player_whichPlayer},${2:boolean_doPreload},${3:location_startLoc}",
            "completion": "MeleeStartingUnitsHuman( whichPlayer, doPreload, startLoc)",
           "description": "function MeleeStartingUnitsHuman takes player whichPlayer, location startLoc, boolean doHeroes, boolean doCamera, boolean doPreload returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeStartingUnitsOrc": {
           "prefix": "fnMeleeStartingUnitsOrc",
           "body": "MeleeStartingUnitsOrc(${1:player_whichPlayer},${2:boolean_doPreload},${3:location_startLoc}",
            "completion": "MeleeStartingUnitsOrc( whichPlayer, doPreload, startLoc)",
           "description": "function MeleeStartingUnitsOrc takes player whichPlayer, location startLoc, boolean doHeroes, boolean doCamera, boolean doPreload returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeStartingUnitsUndead": {
           "prefix": "fnMeleeStartingUnitsUndead",
           "body": "MeleeStartingUnitsUndead(${1:player_whichPlayer},${2:boolean_doPreload},${3:location_startLoc}",
            "completion": "MeleeStartingUnitsUndead( whichPlayer, doPreload, startLoc)",
           "description": "function MeleeStartingUnitsUndead takes player whichPlayer, location startLoc, boolean doHeroes, boolean doCamera, boolean doPreload returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeStartingUnitsNightElf": {
           "prefix": "fnMeleeStartingUnitsNightElf",
           "body": "MeleeStartingUnitsNightElf(${1:player_whichPlayer},${2:boolean_doPreload},${3:location_startLoc}",
            "completion": "MeleeStartingUnitsNightElf( whichPlayer, doPreload, startLoc)",
           "description": "function MeleeStartingUnitsNightElf takes player whichPlayer, location startLoc, boolean doHeroes, boolean doCamera, boolean doPreload returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeStartingUnitsUnknownRace": {
           "prefix": "fnMeleeStartingUnitsUnknownRace",
           "body": "MeleeStartingUnitsUnknownRace(${1:player_whichPlayer},${2:boolean_doPreload},${3:location_startLoc}",
            "completion": "MeleeStartingUnitsUnknownRace( whichPlayer, doPreload, startLoc)",
           "description": "function MeleeStartingUnitsUnknownRace takes player whichPlayer, location startLoc, boolean doHeroes, boolean doCamera, boolean doPreload returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeStartingUnits": {
           "prefix": "fnMeleeStartingUnits",
           "body": "MeleeStartingUnits(",
            "completion": "MeleeStartingUnits()",
           "description": "function MeleeStartingUnits takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeStartingUnitsForPlayer": {
           "prefix": "fnMeleeStartingUnitsForPlayer",
           "body": "MeleeStartingUnitsForPlayer(${1:boolean_doHeroes},${2:player_whichPlayer},${3:race_whichRace},${4:location_loc}",
            "completion": "MeleeStartingUnitsForPlayer( doHeroes, whichPlayer, whichRace, loc)",
           "description": "function MeleeStartingUnitsForPlayer takes race whichRace, player whichPlayer, location loc, boolean doHeroes returns nothing",
           "scope": "source.vjass"
       },
        "fnPickMeleeAI": {
           "prefix": "fnPickMeleeAI",
           "body": "PickMeleeAI(${1:player_num},${2:string_s3}",
            "completion": "PickMeleeAI( num, s3)",
           "description": "function PickMeleeAI takes player num, string s1, string s2, string s3 returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeStartingAI": {
           "prefix": "fnMeleeStartingAI",
           "body": "MeleeStartingAI(",
            "completion": "MeleeStartingAI()",
           "description": "function MeleeStartingAI takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnLockGuardPosition": {
           "prefix": "fnLockGuardPosition",
           "body": "LockGuardPosition(${1:unit_targ}",
            "completion": "LockGuardPosition( targ)",
           "description": "function LockGuardPosition takes unit targ returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleePlayerIsOpponent": {
           "prefix": "fnMeleePlayerIsOpponent",
           "body": "MeleePlayerIsOpponent(${1:integer_opponentIndex}",
            "completion": "MeleePlayerIsOpponent( opponentIndex)",
           "description": "function MeleePlayerIsOpponent takes integer playerIndex, integer opponentIndex returns boolean",
           "scope": "source.vjass"
       },
        "fnMeleeGetAllyStructureCount": {
           "prefix": "fnMeleeGetAllyStructureCount",
           "body": "MeleeGetAllyStructureCount(${1:player_whichPlayer}",
            "completion": "MeleeGetAllyStructureCount( whichPlayer)",
           "description": "function MeleeGetAllyStructureCount takes player whichPlayer returns integer",
           "scope": "source.vjass"
       },
        "fnMeleeGetAllyCount": {
           "prefix": "fnMeleeGetAllyCount",
           "body": "MeleeGetAllyCount(${1:player_whichPlayer}",
            "completion": "MeleeGetAllyCount( whichPlayer)",
           "description": "function MeleeGetAllyCount takes player whichPlayer returns integer",
           "scope": "source.vjass"
       },
        "fnMeleeGetAllyKeyStructureCount": {
           "prefix": "fnMeleeGetAllyKeyStructureCount",
           "body": "MeleeGetAllyKeyStructureCount(${1:player_whichPlayer}",
            "completion": "MeleeGetAllyKeyStructureCount( whichPlayer)",
           "description": "function MeleeGetAllyKeyStructureCount takes player whichPlayer returns integer",
           "scope": "source.vjass"
       },
        "fnMeleeDoDrawEnum": {
           "prefix": "fnMeleeDoDrawEnum",
           "body": "MeleeDoDrawEnum(",
            "completion": "MeleeDoDrawEnum()",
           "description": "function MeleeDoDrawEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeDoVictoryEnum": {
           "prefix": "fnMeleeDoVictoryEnum",
           "body": "MeleeDoVictoryEnum(",
            "completion": "MeleeDoVictoryEnum()",
           "description": "function MeleeDoVictoryEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeDoDefeat": {
           "prefix": "fnMeleeDoDefeat",
           "body": "MeleeDoDefeat(${1:player_whichPlayer}",
            "completion": "MeleeDoDefeat( whichPlayer)",
           "description": "function MeleeDoDefeat takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeDoDefeatEnum": {
           "prefix": "fnMeleeDoDefeatEnum",
           "body": "MeleeDoDefeatEnum(",
            "completion": "MeleeDoDefeatEnum()",
           "description": "function MeleeDoDefeatEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeDoLeave": {
           "prefix": "fnMeleeDoLeave",
           "body": "MeleeDoLeave(${1:player_whichPlayer}",
            "completion": "MeleeDoLeave( whichPlayer)",
           "description": "function MeleeDoLeave takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeRemoveObservers": {
           "prefix": "fnMeleeRemoveObservers",
           "body": "MeleeRemoveObservers(",
            "completion": "MeleeRemoveObservers()",
           "description": "function MeleeRemoveObservers takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeCheckForVictors": {
           "prefix": "fnMeleeCheckForVictors",
           "body": "MeleeCheckForVictors(",
            "completion": "MeleeCheckForVictors()",
           "description": "function MeleeCheckForVictors takes nothing returns force",
           "scope": "source.vjass"
       },
        "fnMeleeCheckForLosersAndVictors": {
           "prefix": "fnMeleeCheckForLosersAndVictors",
           "body": "MeleeCheckForLosersAndVictors(",
            "completion": "MeleeCheckForLosersAndVictors()",
           "description": "function MeleeCheckForLosersAndVictors takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeGetCrippledWarningMessage": {
           "prefix": "fnMeleeGetCrippledWarningMessage",
           "body": "MeleeGetCrippledWarningMessage(${1:player_whichPlayer}",
            "completion": "MeleeGetCrippledWarningMessage( whichPlayer)",
           "description": "function MeleeGetCrippledWarningMessage takes player whichPlayer returns string",
           "scope": "source.vjass"
       },
        "fnMeleeGetCrippledTimerMessage": {
           "prefix": "fnMeleeGetCrippledTimerMessage",
           "body": "MeleeGetCrippledTimerMessage(${1:player_whichPlayer}",
            "completion": "MeleeGetCrippledTimerMessage( whichPlayer)",
           "description": "function MeleeGetCrippledTimerMessage takes player whichPlayer returns string",
           "scope": "source.vjass"
       },
        "fnMeleeGetCrippledRevealedMessage": {
           "prefix": "fnMeleeGetCrippledRevealedMessage",
           "body": "MeleeGetCrippledRevealedMessage(${1:player_whichPlayer}",
            "completion": "MeleeGetCrippledRevealedMessage( whichPlayer)",
           "description": "function MeleeGetCrippledRevealedMessage takes player whichPlayer returns string",
           "scope": "source.vjass"
       },
        "fnMeleeExposePlayer": {
           "prefix": "fnMeleeExposePlayer",
           "body": "MeleeExposePlayer(${1:player_whichPlayer},${2:boolean_expose}",
            "completion": "MeleeExposePlayer( whichPlayer, expose)",
           "description": "function MeleeExposePlayer takes player whichPlayer, boolean expose returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeExposeAllPlayers": {
           "prefix": "fnMeleeExposeAllPlayers",
           "body": "MeleeExposeAllPlayers(",
            "completion": "MeleeExposeAllPlayers()",
           "description": "function MeleeExposeAllPlayers takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeCrippledPlayerTimeout": {
           "prefix": "fnMeleeCrippledPlayerTimeout",
           "body": "MeleeCrippledPlayerTimeout(",
            "completion": "MeleeCrippledPlayerTimeout()",
           "description": "function MeleeCrippledPlayerTimeout takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleePlayerIsCrippled": {
           "prefix": "fnMeleePlayerIsCrippled",
           "body": "MeleePlayerIsCrippled(${1:player_whichPlayer}",
            "completion": "MeleePlayerIsCrippled( whichPlayer)",
           "description": "function MeleePlayerIsCrippled takes player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnMeleeCheckForCrippledPlayers": {
           "prefix": "fnMeleeCheckForCrippledPlayers",
           "body": "MeleeCheckForCrippledPlayers(",
            "completion": "MeleeCheckForCrippledPlayers()",
           "description": "function MeleeCheckForCrippledPlayers takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeCheckLostUnit": {
           "prefix": "fnMeleeCheckLostUnit",
           "body": "MeleeCheckLostUnit(${1:unit_lostUnit}",
            "completion": "MeleeCheckLostUnit( lostUnit)",
           "description": "function MeleeCheckLostUnit takes unit lostUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeCheckAddedUnit": {
           "prefix": "fnMeleeCheckAddedUnit",
           "body": "MeleeCheckAddedUnit(${1:unit_addedUnit}",
            "completion": "MeleeCheckAddedUnit( addedUnit)",
           "description": "function MeleeCheckAddedUnit takes unit addedUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeTriggerActionConstructCancel": {
           "prefix": "fnMeleeTriggerActionConstructCancel",
           "body": "MeleeTriggerActionConstructCancel(",
            "completion": "MeleeTriggerActionConstructCancel()",
           "description": "function MeleeTriggerActionConstructCancel takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeTriggerActionUnitDeath": {
           "prefix": "fnMeleeTriggerActionUnitDeath",
           "body": "MeleeTriggerActionUnitDeath(",
            "completion": "MeleeTriggerActionUnitDeath()",
           "description": "function MeleeTriggerActionUnitDeath takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeTriggerActionUnitConstructionStart": {
           "prefix": "fnMeleeTriggerActionUnitConstructionStart",
           "body": "MeleeTriggerActionUnitConstructionStart(",
            "completion": "MeleeTriggerActionUnitConstructionStart()",
           "description": "function MeleeTriggerActionUnitConstructionStart takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeTriggerActionPlayerDefeated": {
           "prefix": "fnMeleeTriggerActionPlayerDefeated",
           "body": "MeleeTriggerActionPlayerDefeated(",
            "completion": "MeleeTriggerActionPlayerDefeated()",
           "description": "function MeleeTriggerActionPlayerDefeated takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeTriggerActionPlayerLeft": {
           "prefix": "fnMeleeTriggerActionPlayerLeft",
           "body": "MeleeTriggerActionPlayerLeft(",
            "completion": "MeleeTriggerActionPlayerLeft()",
           "description": "function MeleeTriggerActionPlayerLeft takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeTriggerActionAllianceChange": {
           "prefix": "fnMeleeTriggerActionAllianceChange",
           "body": "MeleeTriggerActionAllianceChange(",
            "completion": "MeleeTriggerActionAllianceChange()",
           "description": "function MeleeTriggerActionAllianceChange takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeTriggerTournamentFinishSoon": {
           "prefix": "fnMeleeTriggerTournamentFinishSoon",
           "body": "MeleeTriggerTournamentFinishSoon(",
            "completion": "MeleeTriggerTournamentFinishSoon()",
           "description": "function MeleeTriggerTournamentFinishSoon takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeWasUserPlayer": {
           "prefix": "fnMeleeWasUserPlayer",
           "body": "MeleeWasUserPlayer(${1:player_whichPlayer}",
            "completion": "MeleeWasUserPlayer( whichPlayer)",
           "description": "function MeleeWasUserPlayer takes player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnMeleeTournamentFinishNowRuleA": {
           "prefix": "fnMeleeTournamentFinishNowRuleA",
           "body": "MeleeTournamentFinishNowRuleA(${1:integer_multiplier}",
            "completion": "MeleeTournamentFinishNowRuleA( multiplier)",
           "description": "function MeleeTournamentFinishNowRuleA takes integer multiplier returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeTriggerTournamentFinishNow": {
           "prefix": "fnMeleeTriggerTournamentFinishNow",
           "body": "MeleeTriggerTournamentFinishNow(",
            "completion": "MeleeTriggerTournamentFinishNow()",
           "description": "function MeleeTriggerTournamentFinishNow takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeInitVictoryDefeat": {
           "prefix": "fnMeleeInitVictoryDefeat",
           "body": "MeleeInitVictoryDefeat(",
            "completion": "MeleeInitVictoryDefeat()",
           "description": "function MeleeInitVictoryDefeat takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCheckInitPlayerSlotAvailability": {
           "prefix": "fnCheckInitPlayerSlotAvailability",
           "body": "CheckInitPlayerSlotAvailability(",
            "completion": "CheckInitPlayerSlotAvailability()",
           "description": "function CheckInitPlayerSlotAvailability takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerSlotAvailable": {
           "prefix": "fnSetPlayerSlotAvailable",
           "body": "SetPlayerSlotAvailable(${1:player_whichPlayer},${2:mapcontrol_control}",
            "completion": "SetPlayerSlotAvailable( whichPlayer, control)",
           "description": "function SetPlayerSlotAvailable takes player whichPlayer, mapcontrol control returns nothing",
           "scope": "source.vjass"
       },
        "fnTeamInitPlayerSlots": {
           "prefix": "fnTeamInitPlayerSlots",
           "body": "TeamInitPlayerSlots(${1:integer_teamCount}",
            "completion": "TeamInitPlayerSlots( teamCount)",
           "description": "function TeamInitPlayerSlots takes integer teamCount returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeInitPlayerSlots": {
           "prefix": "fnMeleeInitPlayerSlots",
           "body": "MeleeInitPlayerSlots(",
            "completion": "MeleeInitPlayerSlots()",
           "description": "function MeleeInitPlayerSlots takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnFFAInitPlayerSlots": {
           "prefix": "fnFFAInitPlayerSlots",
           "body": "FFAInitPlayerSlots(",
            "completion": "FFAInitPlayerSlots()",
           "description": "function FFAInitPlayerSlots takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnOneOnOneInitPlayerSlots": {
           "prefix": "fnOneOnOneInitPlayerSlots",
           "body": "OneOnOneInitPlayerSlots(",
            "completion": "OneOnOneInitPlayerSlots()",
           "description": "function OneOnOneInitPlayerSlots takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnInitGenericPlayerSlots": {
           "prefix": "fnInitGenericPlayerSlots",
           "body": "InitGenericPlayerSlots(",
            "completion": "InitGenericPlayerSlots()",
           "description": "function InitGenericPlayerSlots takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDNCSoundsDawn": {
           "prefix": "fnSetDNCSoundsDawn",
           "body": "SetDNCSoundsDawn(",
            "completion": "SetDNCSoundsDawn()",
           "description": "function SetDNCSoundsDawn takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDNCSoundsDusk": {
           "prefix": "fnSetDNCSoundsDusk",
           "body": "SetDNCSoundsDusk(",
            "completion": "SetDNCSoundsDusk()",
           "description": "function SetDNCSoundsDusk takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDNCSoundsDay": {
           "prefix": "fnSetDNCSoundsDay",
           "body": "SetDNCSoundsDay(",
            "completion": "SetDNCSoundsDay()",
           "description": "function SetDNCSoundsDay takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDNCSoundsNight": {
           "prefix": "fnSetDNCSoundsNight",
           "body": "SetDNCSoundsNight(",
            "completion": "SetDNCSoundsNight()",
           "description": "function SetDNCSoundsNight takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnInitDNCSounds": {
           "prefix": "fnInitDNCSounds",
           "body": "InitDNCSounds(",
            "completion": "InitDNCSounds()",
           "description": "function InitDNCSounds takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnInitBlizzardGlobals": {
           "prefix": "fnInitBlizzardGlobals",
           "body": "InitBlizzardGlobals(",
            "completion": "InitBlizzardGlobals()",
           "description": "function InitBlizzardGlobals takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnInitQueuedTriggers": {
           "prefix": "fnInitQueuedTriggers",
           "body": "InitQueuedTriggers(",
            "completion": "InitQueuedTriggers()",
           "description": "function InitQueuedTriggers takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnInitMapRects": {
           "prefix": "fnInitMapRects",
           "body": "InitMapRects(",
            "completion": "InitMapRects()",
           "description": "function InitMapRects takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnInitSummonableCaps": {
           "prefix": "fnInitSummonableCaps",
           "body": "InitSummonableCaps(",
            "completion": "InitSummonableCaps()",
           "description": "function InitSummonableCaps takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnUpdateStockAvailability": {
           "prefix": "fnUpdateStockAvailability",
           "body": "UpdateStockAvailability(${1:item_whichItem}",
            "completion": "UpdateStockAvailability( whichItem)",
           "description": "function UpdateStockAvailability takes item whichItem returns nothing",
           "scope": "source.vjass"
       },
        "fnUpdateEachStockBuildingEnum": {
           "prefix": "fnUpdateEachStockBuildingEnum",
           "body": "UpdateEachStockBuildingEnum(",
            "completion": "UpdateEachStockBuildingEnum()",
           "description": "function UpdateEachStockBuildingEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnUpdateEachStockBuilding": {
           "prefix": "fnUpdateEachStockBuilding",
           "body": "UpdateEachStockBuilding(${1:integer_iLevel},${2:itemtype_iType}",
            "completion": "UpdateEachStockBuilding( iLevel, iType)",
           "description": "function UpdateEachStockBuilding takes itemtype iType, integer iLevel returns nothing",
           "scope": "source.vjass"
       },
        "fnPerformStockUpdates": {
           "prefix": "fnPerformStockUpdates",
           "body": "PerformStockUpdates(",
            "completion": "PerformStockUpdates()",
           "description": "function PerformStockUpdates takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnStartStockUpdates": {
           "prefix": "fnStartStockUpdates",
           "body": "StartStockUpdates(",
            "completion": "StartStockUpdates()",
           "description": "function StartStockUpdates takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnRemovePurchasedItem": {
           "prefix": "fnRemovePurchasedItem",
           "body": "RemovePurchasedItem(",
            "completion": "RemovePurchasedItem()",
           "description": "function RemovePurchasedItem takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnInitNeutralBuildings": {
           "prefix": "fnInitNeutralBuildings",
           "body": "InitNeutralBuildings(",
            "completion": "InitNeutralBuildings()",
           "description": "function InitNeutralBuildings takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMarkGameStarted": {
           "prefix": "fnMarkGameStarted",
           "body": "MarkGameStarted(",
            "completion": "MarkGameStarted()",
           "description": "function MarkGameStarted takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnDetectGameStarted": {
           "prefix": "fnDetectGameStarted",
           "body": "DetectGameStarted(",
            "completion": "DetectGameStarted()",
           "description": "function DetectGameStarted takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnInitBlizzard": {
           "prefix": "fnInitBlizzard",
           "body": "InitBlizzard(",
            "completion": "InitBlizzard()",
           "description": "function InitBlizzard takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnRandomDistReset": {
           "prefix": "fnRandomDistReset",
           "body": "RandomDistReset(",
            "completion": "RandomDistReset()",
           "description": "function RandomDistReset takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnRandomDistAddItem": {
           "prefix": "fnRandomDistAddItem",
           "body": "RandomDistAddItem(${1:integer_inChance}",
            "completion": "RandomDistAddItem( inChance)",
           "description": "function RandomDistAddItem takes integer inID, integer inChance returns nothing",
           "scope": "source.vjass"
       },
        "fnRandomDistChoose": {
           "prefix": "fnRandomDistChoose",
           "body": "RandomDistChoose(",
            "completion": "RandomDistChoose()",
           "description": "function RandomDistChoose takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnUnitDropItem": {
           "prefix": "fnUnitDropItem",
           "body": "UnitDropItem(${1:integer_inItemID},${2:unit_inUnit}",
            "completion": "UnitDropItem( inItemID, inUnit)",
           "description": "function UnitDropItem takes unit inUnit, integer inItemID returns item",
           "scope": "source.vjass"
       },
        "fnWidgetDropItem": {
           "prefix": "fnWidgetDropItem",
           "body": "WidgetDropItem(${1:integer_inItemID},${2:widget_inWidget}",
            "completion": "WidgetDropItem( inItemID, inWidget)",
           "description": "function WidgetDropItem takes widget inWidget, integer inItemID returns item",
           "scope": "source.vjass"
       }
}
