{
        "fnBJDebugMsg": {
           "prefix": "fnBJDebugMsg",
           "body": "BJDebugMsg(${1:string msg})",
           "description": "function BJDebugMsg takes string msg returns nothing",
           "scope": "source.vjass"
       },
        "fnRMinBJ": {
           "prefix": "fnRMinBJ",
           "body": "RMinBJ(${1:real b})",
           "description": "function RMinBJ takes real a, real b returns real",
           "scope": "source.vjass"
       },
        "fnRMaxBJ": {
           "prefix": "fnRMaxBJ",
           "body": "RMaxBJ(${1:real b})",
           "description": "function RMaxBJ takes real a, real b returns real",
           "scope": "source.vjass"
       },
        "fnRAbsBJ": {
           "prefix": "fnRAbsBJ",
           "body": "RAbsBJ(${1:real a})",
           "description": "function RAbsBJ takes real a returns real",
           "scope": "source.vjass"
       },
        "fnRSignBJ": {
           "prefix": "fnRSignBJ",
           "body": "RSignBJ(${1:real a})",
           "description": "function RSignBJ takes real a returns real",
           "scope": "source.vjass"
       },
        "fnIMinBJ": {
           "prefix": "fnIMinBJ",
           "body": "IMinBJ(${1:integer b})",
           "description": "function IMinBJ takes integer a, integer b returns integer",
           "scope": "source.vjass"
       },
        "fnIMaxBJ": {
           "prefix": "fnIMaxBJ",
           "body": "IMaxBJ(${1:integer b})",
           "description": "function IMaxBJ takes integer a, integer b returns integer",
           "scope": "source.vjass"
       },
        "fnIAbsBJ": {
           "prefix": "fnIAbsBJ",
           "body": "IAbsBJ(${1:integer a})",
           "description": "function IAbsBJ takes integer a returns integer",
           "scope": "source.vjass"
       },
        "fnISignBJ": {
           "prefix": "fnISignBJ",
           "body": "ISignBJ(${1:integer a})",
           "description": "function ISignBJ takes integer a returns integer",
           "scope": "source.vjass"
       },
        "fnSinBJ": {
           "prefix": "fnSinBJ",
           "body": "SinBJ(${1:real degrees})",
           "description": "function SinBJ takes real degrees returns real",
           "scope": "source.vjass"
       },
        "fnCosBJ": {
           "prefix": "fnCosBJ",
           "body": "CosBJ(${1:real degrees})",
           "description": "function CosBJ takes real degrees returns real",
           "scope": "source.vjass"
       },
        "fnTanBJ": {
           "prefix": "fnTanBJ",
           "body": "TanBJ(${1:real degrees})",
           "description": "function TanBJ takes real degrees returns real",
           "scope": "source.vjass"
       },
        "fnAsinBJ": {
           "prefix": "fnAsinBJ",
           "body": "AsinBJ(${1:real degrees})",
           "description": "function AsinBJ takes real degrees returns real",
           "scope": "source.vjass"
       },
        "fnAcosBJ": {
           "prefix": "fnAcosBJ",
           "body": "AcosBJ(${1:real degrees})",
           "description": "function AcosBJ takes real degrees returns real",
           "scope": "source.vjass"
       },
        "fnAtanBJ": {
           "prefix": "fnAtanBJ",
           "body": "AtanBJ(${1:real degrees})",
           "description": "function AtanBJ takes real degrees returns real",
           "scope": "source.vjass"
       },
        "fnAtan2BJ": {
           "prefix": "fnAtan2BJ",
           "body": "Atan2BJ(${1:real x})",
           "description": "function Atan2BJ takes real y, real x returns real",
           "scope": "source.vjass"
       },
        "fnAngleBetweenPoints": {
           "prefix": "fnAngleBetweenPoints",
           "body": "AngleBetweenPoints(${1:location locB})",
           "description": "function AngleBetweenPoints takes location locA, location locB returns real",
           "scope": "source.vjass"
       },
        "fnDistanceBetweenPoints": {
           "prefix": "fnDistanceBetweenPoints",
           "body": "DistanceBetweenPoints(${1:location locB})",
           "description": "function DistanceBetweenPoints takes location locA, location locB returns real",
           "scope": "source.vjass"
       },
        "fnPolarProjectionBJ": {
           "prefix": "fnPolarProjectionBJ",
           "body": "PolarProjectionBJ(${1:real angle},${2:location source})",
           "description": "function PolarProjectionBJ takes location source, real dist, real angle returns location",
           "scope": "source.vjass"
       },
        "fnGetRandomDirectionDeg": {
           "prefix": "fnGetRandomDirectionDeg",
           "body": "GetRandomDirectionDeg(${1:nothing})",
           "description": "function GetRandomDirectionDeg takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnGetRandomPercentageBJ": {
           "prefix": "fnGetRandomPercentageBJ",
           "body": "GetRandomPercentageBJ(${1:nothing})",
           "description": "function GetRandomPercentageBJ takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnGetRandomLocInRect": {
           "prefix": "fnGetRandomLocInRect",
           "body": "GetRandomLocInRect(${1:rect whichRect})",
           "description": "function GetRandomLocInRect takes rect whichRect returns location",
           "scope": "source.vjass"
       },
        "fnModuloInteger": {
           "prefix": "fnModuloInteger",
           "body": "ModuloInteger(${1:integer divisor})",
           "description": "function ModuloInteger takes integer dividend, integer divisor returns integer",
           "scope": "source.vjass"
       },
        "fnModuloReal": {
           "prefix": "fnModuloReal",
           "body": "ModuloReal(${1:real divisor})",
           "description": "function ModuloReal takes real dividend, real divisor returns real",
           "scope": "source.vjass"
       },
        "fnOffsetLocation": {
           "prefix": "fnOffsetLocation",
           "body": "OffsetLocation(${1:real dy},${2:location loc})",
           "description": "function OffsetLocation takes location loc, real dx, real dy returns location",
           "scope": "source.vjass"
       },
        "fnOffsetRectBJ": {
           "prefix": "fnOffsetRectBJ",
           "body": "OffsetRectBJ(${1:real dy},${2:rect r})",
           "description": "function OffsetRectBJ takes rect r, real dx, real dy returns rect",
           "scope": "source.vjass"
       },
        "fnRectFromCenterSizeBJ": {
           "prefix": "fnRectFromCenterSizeBJ",
           "body": "RectFromCenterSizeBJ(${1:real height},${2:location center})",
           "description": "function RectFromCenterSizeBJ takes location center, real width, real height returns rect",
           "scope": "source.vjass"
       },
        "fnRectContainsCoords": {
           "prefix": "fnRectContainsCoords",
           "body": "RectContainsCoords(${1:real y},${2:rect r})",
           "description": "function RectContainsCoords takes rect r, real x, real y returns boolean",
           "scope": "source.vjass"
       },
        "fnRectContainsLoc": {
           "prefix": "fnRectContainsLoc",
           "body": "RectContainsLoc(${1:location loc},${2:rect r})",
           "description": "function RectContainsLoc takes rect r, location loc returns boolean",
           "scope": "source.vjass"
       },
        "fnRectContainsUnit": {
           "prefix": "fnRectContainsUnit",
           "body": "RectContainsUnit(${1:unit whichUnit},${2:rect r})",
           "description": "function RectContainsUnit takes rect r, unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnRectContainsItem": {
           "prefix": "fnRectContainsItem",
           "body": "RectContainsItem(${1:item whichItem},${2:rect r})",
           "description": "function RectContainsItem takes item whichItem, rect r returns boolean",
           "scope": "source.vjass"
       },
        "fnConditionalTriggerExecute": {
           "prefix": "fnConditionalTriggerExecute",
           "body": "ConditionalTriggerExecute(${1:trigger trig})",
           "description": "function ConditionalTriggerExecute takes trigger trig returns nothing",
           "scope": "source.vjass"
       },
        "fnTriggerExecuteBJ": {
           "prefix": "fnTriggerExecuteBJ",
           "body": "TriggerExecuteBJ(${1:boolean checkConditions},${2:trigger trig})",
           "description": "function TriggerExecuteBJ takes trigger trig, boolean checkConditions returns boolean",
           "scope": "source.vjass"
       },
        "fnPostTriggerExecuteBJ": {
           "prefix": "fnPostTriggerExecuteBJ",
           "body": "PostTriggerExecuteBJ(${1:boolean checkConditions},${2:trigger trig})",
           "description": "function PostTriggerExecuteBJ takes trigger trig, boolean checkConditions returns boolean",
           "scope": "source.vjass"
       },
        "fnQueuedTriggerCheck": {
           "prefix": "fnQueuedTriggerCheck",
           "body": "QueuedTriggerCheck(${1:nothing})",
           "description": "function QueuedTriggerCheck takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnQueuedTriggerGetIndex": {
           "prefix": "fnQueuedTriggerGetIndex",
           "body": "QueuedTriggerGetIndex(${1:trigger trig})",
           "description": "function QueuedTriggerGetIndex takes trigger trig returns integer",
           "scope": "source.vjass"
       },
        "fnQueuedTriggerRemoveByIndex": {
           "prefix": "fnQueuedTriggerRemoveByIndex",
           "body": "QueuedTriggerRemoveByIndex(${1:integer trigIndex})",
           "description": "function QueuedTriggerRemoveByIndex takes integer trigIndex returns boolean",
           "scope": "source.vjass"
       },
        "fnQueuedTriggerAttemptExec": {
           "prefix": "fnQueuedTriggerAttemptExec",
           "body": "QueuedTriggerAttemptExec(${1:nothing})",
           "description": "function QueuedTriggerAttemptExec takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnQueuedTriggerAddBJ": {
           "prefix": "fnQueuedTriggerAddBJ",
           "body": "QueuedTriggerAddBJ(${1:boolean checkConditions},${2:trigger trig})",
           "description": "function QueuedTriggerAddBJ takes trigger trig, boolean checkConditions returns boolean",
           "scope": "source.vjass"
       },
        "fnQueuedTriggerRemoveBJ": {
           "prefix": "fnQueuedTriggerRemoveBJ",
           "body": "QueuedTriggerRemoveBJ(${1:trigger trig})",
           "description": "function QueuedTriggerRemoveBJ takes trigger trig returns nothing",
           "scope": "source.vjass"
       },
        "fnQueuedTriggerDoneBJ": {
           "prefix": "fnQueuedTriggerDoneBJ",
           "body": "QueuedTriggerDoneBJ(${1:nothing})",
           "description": "function QueuedTriggerDoneBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnQueuedTriggerClearBJ": {
           "prefix": "fnQueuedTriggerClearBJ",
           "body": "QueuedTriggerClearBJ(${1:nothing})",
           "description": "function QueuedTriggerClearBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnQueuedTriggerClearInactiveBJ": {
           "prefix": "fnQueuedTriggerClearInactiveBJ",
           "body": "QueuedTriggerClearInactiveBJ(${1:nothing})",
           "description": "function QueuedTriggerClearInactiveBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnQueuedTriggerCountBJ": {
           "prefix": "fnQueuedTriggerCountBJ",
           "body": "QueuedTriggerCountBJ(${1:nothing})",
           "description": "function QueuedTriggerCountBJ takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnIsTriggerQueueEmptyBJ": {
           "prefix": "fnIsTriggerQueueEmptyBJ",
           "body": "IsTriggerQueueEmptyBJ(${1:nothing})",
           "description": "function IsTriggerQueueEmptyBJ takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnIsTriggerQueuedBJ": {
           "prefix": "fnIsTriggerQueuedBJ",
           "body": "IsTriggerQueuedBJ(${1:trigger trig})",
           "description": "function IsTriggerQueuedBJ takes trigger trig returns boolean",
           "scope": "source.vjass"
       },
        "fnGetForLoopIndexA": {
           "prefix": "fnGetForLoopIndexA",
           "body": "GetForLoopIndexA(${1:nothing})",
           "description": "function GetForLoopIndexA takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnSetForLoopIndexA": {
           "prefix": "fnSetForLoopIndexA",
           "body": "SetForLoopIndexA(${1:integer newIndex})",
           "description": "function SetForLoopIndexA takes integer newIndex returns nothing",
           "scope": "source.vjass"
       },
        "fnGetForLoopIndexB": {
           "prefix": "fnGetForLoopIndexB",
           "body": "GetForLoopIndexB(${1:nothing})",
           "description": "function GetForLoopIndexB takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnSetForLoopIndexB": {
           "prefix": "fnSetForLoopIndexB",
           "body": "SetForLoopIndexB(${1:integer newIndex})",
           "description": "function SetForLoopIndexB takes integer newIndex returns nothing",
           "scope": "source.vjass"
       },
        "fnPolledWait": {
           "prefix": "fnPolledWait",
           "body": "PolledWait(${1:real duration})",
           "description": "function PolledWait takes real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnIntegerTertiaryOp": {
           "prefix": "fnIntegerTertiaryOp",
           "body": "IntegerTertiaryOp(${1:integer valueB},${2:boolean flag})",
           "description": "function IntegerTertiaryOp takes boolean flag, integer valueA, integer valueB returns integer",
           "scope": "source.vjass"
       },
        "fnDoNothing": {
           "prefix": "fnDoNothing",
           "body": "DoNothing(${1:nothing})",
           "description": "function DoNothing takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCommentString": {
           "prefix": "fnCommentString",
           "body": "CommentString(${1:string commentString})",
           "description": "function CommentString takes string commentString returns nothing",
           "scope": "source.vjass"
       },
        "fnStringIdentity": {
           "prefix": "fnStringIdentity",
           "body": "StringIdentity(${1:string theString})",
           "description": "function StringIdentity takes string theString returns string",
           "scope": "source.vjass"
       },
        "fnGetBooleanAnd": {
           "prefix": "fnGetBooleanAnd",
           "body": "GetBooleanAnd(${1:boolean valueB})",
           "description": "function GetBooleanAnd takes boolean valueA, boolean valueB returns boolean",
           "scope": "source.vjass"
       },
        "fnGetBooleanOr": {
           "prefix": "fnGetBooleanOr",
           "body": "GetBooleanOr(${1:boolean valueB})",
           "description": "function GetBooleanOr takes boolean valueA, boolean valueB returns boolean",
           "scope": "source.vjass"
       },
        "fnPercentToInt": {
           "prefix": "fnPercentToInt",
           "body": "PercentToInt(${1:real percentage},${2:integer max})",
           "description": "function PercentToInt takes real percentage, integer max returns integer",
           "scope": "source.vjass"
       },
        "fnPercentTo255": {
           "prefix": "fnPercentTo255",
           "body": "PercentTo255(${1:real percentage})",
           "description": "function PercentTo255 takes real percentage returns integer",
           "scope": "source.vjass"
       },
        "fnGetTimeOfDay": {
           "prefix": "fnGetTimeOfDay",
           "body": "GetTimeOfDay(${1:nothing})",
           "description": "function GetTimeOfDay takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnSetTimeOfDay": {
           "prefix": "fnSetTimeOfDay",
           "body": "SetTimeOfDay(${1:real whatTime})",
           "description": "function SetTimeOfDay takes real whatTime returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTimeOfDayScalePercentBJ": {
           "prefix": "fnSetTimeOfDayScalePercentBJ",
           "body": "SetTimeOfDayScalePercentBJ(${1:real scalePercent})",
           "description": "function SetTimeOfDayScalePercentBJ takes real scalePercent returns nothing",
           "scope": "source.vjass"
       },
        "fnGetTimeOfDayScalePercentBJ": {
           "prefix": "fnGetTimeOfDayScalePercentBJ",
           "body": "GetTimeOfDayScalePercentBJ(${1:nothing})",
           "description": "function GetTimeOfDayScalePercentBJ takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnPlaySound": {
           "prefix": "fnPlaySound",
           "body": "PlaySound(${1:string soundName})",
           "description": "function PlaySound takes string soundName returns nothing",
           "scope": "source.vjass"
       },
        "fnCompareLocationsBJ": {
           "prefix": "fnCompareLocationsBJ",
           "body": "CompareLocationsBJ(${1:location B})",
           "description": "function CompareLocationsBJ takes location A, location B returns boolean",
           "scope": "source.vjass"
       },
        "fnCompareRectsBJ": {
           "prefix": "fnCompareRectsBJ",
           "body": "CompareRectsBJ(${1:rect B})",
           "description": "function CompareRectsBJ takes rect A, rect B returns boolean",
           "scope": "source.vjass"
       },
        "fnGetRectFromCircleBJ": {
           "prefix": "fnGetRectFromCircleBJ",
           "body": "GetRectFromCircleBJ(${1:real radius},${2:location center})",
           "description": "function GetRectFromCircleBJ takes location center, real radius returns rect",
           "scope": "source.vjass"
       },
        "fnGetCurrentCameraSetup": {
           "prefix": "fnGetCurrentCameraSetup",
           "body": "GetCurrentCameraSetup(${1:nothing})",
           "description": "function GetCurrentCameraSetup takes nothing returns camerasetup",
           "scope": "source.vjass"
       },
        "fnCameraSetupApplyForPlayer": {
           "prefix": "fnCameraSetupApplyForPlayer",
           "body": "CameraSetupApplyForPlayer(${1:real duration},${2:camerasetup whichSetup},${3:boolean doPan},${4:player whichPlayer})",
           "description": "function CameraSetupApplyForPlayer takes boolean doPan, camerasetup whichSetup, player whichPlayer, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraSetupGetFieldSwap": {
           "prefix": "fnCameraSetupGetFieldSwap",
           "body": "CameraSetupGetFieldSwap(${1:camerafield whichField},${2:camerasetup whichSetup})",
           "description": "function CameraSetupGetFieldSwap takes camerafield whichField, camerasetup whichSetup returns real",
           "scope": "source.vjass"
       },
        "fnSetCameraFieldForPlayer": {
           "prefix": "fnSetCameraFieldForPlayer",
           "body": "SetCameraFieldForPlayer(${1:camerafield whichField},${2:player whichPlayer},${3:real duration})",
           "description": "function SetCameraFieldForPlayer takes player whichPlayer, camerafield whichField, real value, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraTargetControllerNoZForPlayer": {
           "prefix": "fnSetCameraTargetControllerNoZForPlayer",
           "body": "SetCameraTargetControllerNoZForPlayer(${1:real yoffset},${2:player whichPlayer},${3:boolean inheritOrientation},${4:unit whichUnit})",
           "description": "function SetCameraTargetControllerNoZForPlayer takes player whichPlayer, unit whichUnit, real xoffset, real yoffset, boolean inheritOrientation returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraPositionForPlayer": {
           "prefix": "fnSetCameraPositionForPlayer",
           "body": "SetCameraPositionForPlayer(${1:real y},${2:player whichPlayer})",
           "description": "function SetCameraPositionForPlayer takes player whichPlayer, real x, real y returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraPositionLocForPlayer": {
           "prefix": "fnSetCameraPositionLocForPlayer",
           "body": "SetCameraPositionLocForPlayer(${1:player whichPlayer},${2:location loc})",
           "description": "function SetCameraPositionLocForPlayer takes player whichPlayer, location loc returns nothing",
           "scope": "source.vjass"
       },
        "fnRotateCameraAroundLocBJ": {
           "prefix": "fnRotateCameraAroundLocBJ",
           "body": "RotateCameraAroundLocBJ(${1:real duration},${2:player whichPlayer},${3:location loc})",
           "description": "function RotateCameraAroundLocBJ takes real degrees, location loc, player whichPlayer, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnPanCameraToForPlayer": {
           "prefix": "fnPanCameraToForPlayer",
           "body": "PanCameraToForPlayer(${1:real y},${2:player whichPlayer})",
           "description": "function PanCameraToForPlayer takes player whichPlayer, real x, real y returns nothing",
           "scope": "source.vjass"
       },
        "fnPanCameraToLocForPlayer": {
           "prefix": "fnPanCameraToLocForPlayer",
           "body": "PanCameraToLocForPlayer(${1:player whichPlayer},${2:location loc})",
           "description": "function PanCameraToLocForPlayer takes player whichPlayer, location loc returns nothing",
           "scope": "source.vjass"
       },
        "fnPanCameraToTimedForPlayer": {
           "prefix": "fnPanCameraToTimedForPlayer",
           "body": "PanCameraToTimedForPlayer(${1:real duration},${2:player whichPlayer})",
           "description": "function PanCameraToTimedForPlayer takes player whichPlayer, real x, real y, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnPanCameraToTimedLocForPlayer": {
           "prefix": "fnPanCameraToTimedLocForPlayer",
           "body": "PanCameraToTimedLocForPlayer(${1:real duration},${2:player whichPlayer},${3:location loc})",
           "description": "function PanCameraToTimedLocForPlayer takes player whichPlayer, location loc, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnPanCameraToTimedLocWithZForPlayer": {
           "prefix": "fnPanCameraToTimedLocWithZForPlayer",
           "body": "PanCameraToTimedLocWithZForPlayer(${1:real duration},${2:player whichPlayer},${3:location loc})",
           "description": "function PanCameraToTimedLocWithZForPlayer takes player whichPlayer, location loc, real zOffset, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnSmartCameraPanBJ": {
           "prefix": "fnSmartCameraPanBJ",
           "body": "SmartCameraPanBJ(${1:real duration},${2:player whichPlayer},${3:location loc})",
           "description": "function SmartCameraPanBJ takes player whichPlayer, location loc, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCinematicCameraForPlayer": {
           "prefix": "fnSetCinematicCameraForPlayer",
           "body": "SetCinematicCameraForPlayer(${1:player whichPlayer},${2:string cameraModelFile})",
           "description": "function SetCinematicCameraForPlayer takes player whichPlayer, string cameraModelFile returns nothing",
           "scope": "source.vjass"
       },
        "fnResetToGameCameraForPlayer": {
           "prefix": "fnResetToGameCameraForPlayer",
           "body": "ResetToGameCameraForPlayer(${1:real duration},${2:player whichPlayer})",
           "description": "function ResetToGameCameraForPlayer takes player whichPlayer, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraSetSourceNoiseForPlayer": {
           "prefix": "fnCameraSetSourceNoiseForPlayer",
           "body": "CameraSetSourceNoiseForPlayer(${1:real velocity},${2:player whichPlayer})",
           "description": "function CameraSetSourceNoiseForPlayer takes player whichPlayer, real magnitude, real velocity returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraSetTargetNoiseForPlayer": {
           "prefix": "fnCameraSetTargetNoiseForPlayer",
           "body": "CameraSetTargetNoiseForPlayer(${1:real velocity},${2:player whichPlayer})",
           "description": "function CameraSetTargetNoiseForPlayer takes player whichPlayer, real magnitude, real velocity returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraSetEQNoiseForPlayer": {
           "prefix": "fnCameraSetEQNoiseForPlayer",
           "body": "CameraSetEQNoiseForPlayer(${1:real magnitude},${2:player whichPlayer})",
           "description": "function CameraSetEQNoiseForPlayer takes player whichPlayer, real magnitude returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraClearNoiseForPlayer": {
           "prefix": "fnCameraClearNoiseForPlayer",
           "body": "CameraClearNoiseForPlayer(${1:player whichPlayer})",
           "description": "function CameraClearNoiseForPlayer takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnGetCurrentCameraBoundsMapRectBJ": {
           "prefix": "fnGetCurrentCameraBoundsMapRectBJ",
           "body": "GetCurrentCameraBoundsMapRectBJ(${1:nothing})",
           "description": "function GetCurrentCameraBoundsMapRectBJ takes nothing returns rect",
           "scope": "source.vjass"
       },
        "fnGetCameraBoundsMapRect": {
           "prefix": "fnGetCameraBoundsMapRect",
           "body": "GetCameraBoundsMapRect(${1:nothing})",
           "description": "function GetCameraBoundsMapRect takes nothing returns rect",
           "scope": "source.vjass"
       },
        "fnGetPlayableMapRect": {
           "prefix": "fnGetPlayableMapRect",
           "body": "GetPlayableMapRect(${1:nothing})",
           "description": "function GetPlayableMapRect takes nothing returns rect",
           "scope": "source.vjass"
       },
        "fnGetEntireMapRect": {
           "prefix": "fnGetEntireMapRect",
           "body": "GetEntireMapRect(${1:nothing})",
           "description": "function GetEntireMapRect takes nothing returns rect",
           "scope": "source.vjass"
       },
        "fnSetCameraBoundsToRect": {
           "prefix": "fnSetCameraBoundsToRect",
           "body": "SetCameraBoundsToRect(${1:rect r})",
           "description": "function SetCameraBoundsToRect takes rect r returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraBoundsToRectForPlayerBJ": {
           "prefix": "fnSetCameraBoundsToRectForPlayerBJ",
           "body": "SetCameraBoundsToRectForPlayerBJ(${1:player whichPlayer},${2:rect r})",
           "description": "function SetCameraBoundsToRectForPlayerBJ takes player whichPlayer, rect r returns nothing",
           "scope": "source.vjass"
       },
        "fnAdjustCameraBoundsBJ": {
           "prefix": "fnAdjustCameraBoundsBJ",
           "body": "AdjustCameraBoundsBJ(${1:real dySouth},${2:integer adjustMethod})",
           "description": "function AdjustCameraBoundsBJ takes integer adjustMethod, real dxWest, real dxEast, real dyNorth, real dySouth returns nothing",
           "scope": "source.vjass"
       },
        "fnAdjustCameraBoundsForPlayerBJ": {
           "prefix": "fnAdjustCameraBoundsForPlayerBJ",
           "body": "AdjustCameraBoundsForPlayerBJ(${1:real dySouth},${2:integer adjustMethod},${3:player whichPlayer})",
           "description": "function AdjustCameraBoundsForPlayerBJ takes integer adjustMethod, player whichPlayer, real dxWest, real dxEast, real dyNorth, real dySouth returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraQuickPositionForPlayer": {
           "prefix": "fnSetCameraQuickPositionForPlayer",
           "body": "SetCameraQuickPositionForPlayer(${1:real y},${2:player whichPlayer})",
           "description": "function SetCameraQuickPositionForPlayer takes player whichPlayer, real x, real y returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraQuickPositionLocForPlayer": {
           "prefix": "fnSetCameraQuickPositionLocForPlayer",
           "body": "SetCameraQuickPositionLocForPlayer(${1:player whichPlayer},${2:location loc})",
           "description": "function SetCameraQuickPositionLocForPlayer takes player whichPlayer, location loc returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraQuickPositionLoc": {
           "prefix": "fnSetCameraQuickPositionLoc",
           "body": "SetCameraQuickPositionLoc(${1:location loc})",
           "description": "function SetCameraQuickPositionLoc takes location loc returns nothing",
           "scope": "source.vjass"
       },
        "fnStopCameraForPlayerBJ": {
           "prefix": "fnStopCameraForPlayerBJ",
           "body": "StopCameraForPlayerBJ(${1:player whichPlayer})",
           "description": "function StopCameraForPlayerBJ takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraOrientControllerForPlayerBJ": {
           "prefix": "fnSetCameraOrientControllerForPlayerBJ",
           "body": "SetCameraOrientControllerForPlayerBJ(${1:real yoffset},${2:player whichPlayer},${3:unit whichUnit})",
           "description": "function SetCameraOrientControllerForPlayerBJ takes player whichPlayer, unit whichUnit, real xoffset, real yoffset returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraSetSmoothingFactorBJ": {
           "prefix": "fnCameraSetSmoothingFactorBJ",
           "body": "CameraSetSmoothingFactorBJ(${1:real factor})",
           "description": "function CameraSetSmoothingFactorBJ takes real factor returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraResetSmoothingFactorBJ": {
           "prefix": "fnCameraResetSmoothingFactorBJ",
           "body": "CameraResetSmoothingFactorBJ(${1:nothing})",
           "description": "function CameraResetSmoothingFactorBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnDisplayTextToForce": {
           "prefix": "fnDisplayTextToForce",
           "body": "DisplayTextToForce(${1:force toForce},${2:string message})",
           "description": "function DisplayTextToForce takes force toForce, string message returns nothing",
           "scope": "source.vjass"
       },
        "fnDisplayTimedTextToForce": {
           "prefix": "fnDisplayTimedTextToForce",
           "body": "DisplayTimedTextToForce(${1:real duration},${2:force toForce},${3:string message})",
           "description": "function DisplayTimedTextToForce takes force toForce, real duration, string message returns nothing",
           "scope": "source.vjass"
       },
        "fnClearTextMessagesBJ": {
           "prefix": "fnClearTextMessagesBJ",
           "body": "ClearTextMessagesBJ(${1:force toForce})",
           "description": "function ClearTextMessagesBJ takes force toForce returns nothing",
           "scope": "source.vjass"
       },
        "fnSubStringBJ": {
           "prefix": "fnSubStringBJ",
           "body": "SubStringBJ(${1:integer end},${2:string source})",
           "description": "function SubStringBJ takes string source, integer start, integer end returns string",
           "scope": "source.vjass"
       },
        "fnGetHandleIdBJ": {
           "prefix": "fnGetHandleIdBJ",
           "body": "GetHandleIdBJ(${1:handle h})",
           "description": "function GetHandleIdBJ takes handle h returns integer",
           "scope": "source.vjass"
       },
        "fnStringHashBJ": {
           "prefix": "fnStringHashBJ",
           "body": "StringHashBJ(${1:string s})",
           "description": "function StringHashBJ takes string s returns integer",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterTimerEventPeriodic": {
           "prefix": "fnTriggerRegisterTimerEventPeriodic",
           "body": "TriggerRegisterTimerEventPeriodic(${1:real timeout},${2:trigger trig})",
           "description": "function TriggerRegisterTimerEventPeriodic takes trigger trig, real timeout returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterTimerEventSingle": {
           "prefix": "fnTriggerRegisterTimerEventSingle",
           "body": "TriggerRegisterTimerEventSingle(${1:real timeout},${2:trigger trig})",
           "description": "function TriggerRegisterTimerEventSingle takes trigger trig, real timeout returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterTimerExpireEventBJ": {
           "prefix": "fnTriggerRegisterTimerExpireEventBJ",
           "body": "TriggerRegisterTimerExpireEventBJ(${1:trigger trig},${2:timer t})",
           "description": "function TriggerRegisterTimerExpireEventBJ takes trigger trig, timer t returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerUnitEventSimple": {
           "prefix": "fnTriggerRegisterPlayerUnitEventSimple",
           "body": "TriggerRegisterPlayerUnitEventSimple(${1:playerunitevent whichEvent},${2:player whichPlayer},${3:trigger trig})",
           "description": "function TriggerRegisterPlayerUnitEventSimple takes trigger trig, player whichPlayer, playerunitevent whichEvent returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterAnyUnitEventBJ": {
           "prefix": "fnTriggerRegisterAnyUnitEventBJ",
           "body": "TriggerRegisterAnyUnitEventBJ(${1:playerunitevent whichEvent},${2:trigger trig})",
           "description": "function TriggerRegisterAnyUnitEventBJ takes trigger trig, playerunitevent whichEvent returns nothing",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerSelectionEventBJ": {
           "prefix": "fnTriggerRegisterPlayerSelectionEventBJ",
           "body": "TriggerRegisterPlayerSelectionEventBJ(${1:boolean selected},${2:player whichPlayer},${3:trigger trig})",
           "description": "function TriggerRegisterPlayerSelectionEventBJ takes trigger trig, player whichPlayer, boolean selected returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerKeyEventBJ": {
           "prefix": "fnTriggerRegisterPlayerKeyEventBJ",
           "body": "TriggerRegisterPlayerKeyEventBJ(${1:player whichPlayer},${2:trigger trig},${3:integer keKey})",
           "description": "function TriggerRegisterPlayerKeyEventBJ takes trigger trig, player whichPlayer, integer keType, integer keKey returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerEventVictory": {
           "prefix": "fnTriggerRegisterPlayerEventVictory",
           "body": "TriggerRegisterPlayerEventVictory(${1:player whichPlayer},${2:trigger trig})",
           "description": "function TriggerRegisterPlayerEventVictory takes trigger trig, player whichPlayer returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerEventDefeat": {
           "prefix": "fnTriggerRegisterPlayerEventDefeat",
           "body": "TriggerRegisterPlayerEventDefeat(${1:player whichPlayer},${2:trigger trig})",
           "description": "function TriggerRegisterPlayerEventDefeat takes trigger trig, player whichPlayer returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerEventLeave": {
           "prefix": "fnTriggerRegisterPlayerEventLeave",
           "body": "TriggerRegisterPlayerEventLeave(${1:player whichPlayer},${2:trigger trig})",
           "description": "function TriggerRegisterPlayerEventLeave takes trigger trig, player whichPlayer returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerEventAllianceChanged": {
           "prefix": "fnTriggerRegisterPlayerEventAllianceChanged",
           "body": "TriggerRegisterPlayerEventAllianceChanged(${1:player whichPlayer},${2:trigger trig})",
           "description": "function TriggerRegisterPlayerEventAllianceChanged takes trigger trig, player whichPlayer returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerEventEndCinematic": {
           "prefix": "fnTriggerRegisterPlayerEventEndCinematic",
           "body": "TriggerRegisterPlayerEventEndCinematic(${1:player whichPlayer},${2:trigger trig})",
           "description": "function TriggerRegisterPlayerEventEndCinematic takes trigger trig, player whichPlayer returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterGameStateEventTimeOfDay": {
           "prefix": "fnTriggerRegisterGameStateEventTimeOfDay",
           "body": "TriggerRegisterGameStateEventTimeOfDay(${1:real limitval},${2:trigger trig},${3:limitop opcode})",
           "description": "function TriggerRegisterGameStateEventTimeOfDay takes trigger trig, limitop opcode, real limitval returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterEnterRegionSimple": {
           "prefix": "fnTriggerRegisterEnterRegionSimple",
           "body": "TriggerRegisterEnterRegionSimple(${1:region whichRegion},${2:trigger trig})",
           "description": "function TriggerRegisterEnterRegionSimple takes trigger trig, region whichRegion returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterLeaveRegionSimple": {
           "prefix": "fnTriggerRegisterLeaveRegionSimple",
           "body": "TriggerRegisterLeaveRegionSimple(${1:region whichRegion},${2:trigger trig})",
           "description": "function TriggerRegisterLeaveRegionSimple takes trigger trig, region whichRegion returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterEnterRectSimple": {
           "prefix": "fnTriggerRegisterEnterRectSimple",
           "body": "TriggerRegisterEnterRectSimple(${1:trigger trig},${2:rect r})",
           "description": "function TriggerRegisterEnterRectSimple takes trigger trig, rect r returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterLeaveRectSimple": {
           "prefix": "fnTriggerRegisterLeaveRectSimple",
           "body": "TriggerRegisterLeaveRectSimple(${1:trigger trig},${2:rect r})",
           "description": "function TriggerRegisterLeaveRectSimple takes trigger trig, rect r returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterDistanceBetweenUnits": {
           "prefix": "fnTriggerRegisterDistanceBetweenUnits",
           "body": "TriggerRegisterDistanceBetweenUnits(${1:real range},${2:trigger trig},${3:boolexpr condition},${4:unit whichUnit})",
           "description": "function TriggerRegisterDistanceBetweenUnits takes trigger trig, unit whichUnit, boolexpr condition, real range returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterUnitInRangeSimple": {
           "prefix": "fnTriggerRegisterUnitInRangeSimple",
           "body": "TriggerRegisterUnitInRangeSimple(${1:real range},${2:trigger trig},${3:unit whichUnit})",
           "description": "function TriggerRegisterUnitInRangeSimple takes trigger trig, real range, unit whichUnit returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterUnitLifeEvent": {
           "prefix": "fnTriggerRegisterUnitLifeEvent",
           "body": "TriggerRegisterUnitLifeEvent(${1:real limitval},${2:trigger trig},${3:limitop opcode},${4:unit whichUnit})",
           "description": "function TriggerRegisterUnitLifeEvent takes trigger trig, unit whichUnit, limitop opcode, real limitval returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterUnitManaEvent": {
           "prefix": "fnTriggerRegisterUnitManaEvent",
           "body": "TriggerRegisterUnitManaEvent(${1:real limitval},${2:trigger trig},${3:limitop opcode},${4:unit whichUnit})",
           "description": "function TriggerRegisterUnitManaEvent takes trigger trig, unit whichUnit, limitop opcode, real limitval returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterDialogEventBJ": {
           "prefix": "fnTriggerRegisterDialogEventBJ",
           "body": "TriggerRegisterDialogEventBJ(${1:trigger trig},${2:dialog whichDialog})",
           "description": "function TriggerRegisterDialogEventBJ takes trigger trig, dialog whichDialog returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterShowSkillEventBJ": {
           "prefix": "fnTriggerRegisterShowSkillEventBJ",
           "body": "TriggerRegisterShowSkillEventBJ(${1:trigger trig})",
           "description": "function TriggerRegisterShowSkillEventBJ takes trigger trig returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterBuildSubmenuEventBJ": {
           "prefix": "fnTriggerRegisterBuildSubmenuEventBJ",
           "body": "TriggerRegisterBuildSubmenuEventBJ(${1:trigger trig})",
           "description": "function TriggerRegisterBuildSubmenuEventBJ takes trigger trig returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterGameLoadedEventBJ": {
           "prefix": "fnTriggerRegisterGameLoadedEventBJ",
           "body": "TriggerRegisterGameLoadedEventBJ(${1:trigger trig})",
           "description": "function TriggerRegisterGameLoadedEventBJ takes trigger trig returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterGameSavedEventBJ": {
           "prefix": "fnTriggerRegisterGameSavedEventBJ",
           "body": "TriggerRegisterGameSavedEventBJ(${1:trigger trig})",
           "description": "function TriggerRegisterGameSavedEventBJ takes trigger trig returns event",
           "scope": "source.vjass"
       },
        "fnRegisterDestDeathInRegionEnum": {
           "prefix": "fnRegisterDestDeathInRegionEnum",
           "body": "RegisterDestDeathInRegionEnum(${1:nothing})",
           "description": "function RegisterDestDeathInRegionEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterDestDeathInRegionEvent": {
           "prefix": "fnTriggerRegisterDestDeathInRegionEvent",
           "body": "TriggerRegisterDestDeathInRegionEvent(${1:trigger trig},${2:rect r})",
           "description": "function TriggerRegisterDestDeathInRegionEvent takes trigger trig, rect r returns nothing",
           "scope": "source.vjass"
       },
        "fnAddWeatherEffectSaveLast": {
           "prefix": "fnAddWeatherEffectSaveLast",
           "body": "AddWeatherEffectSaveLast(${1:integer effectID},${2:rect where})",
           "description": "function AddWeatherEffectSaveLast takes rect where, integer effectID returns weathereffect",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedWeatherEffect": {
           "prefix": "fnGetLastCreatedWeatherEffect",
           "body": "GetLastCreatedWeatherEffect(${1:nothing})",
           "description": "function GetLastCreatedWeatherEffect takes nothing returns weathereffect",
           "scope": "source.vjass"
       },
        "fnRemoveWeatherEffectBJ": {
           "prefix": "fnRemoveWeatherEffectBJ",
           "body": "RemoveWeatherEffectBJ(${1:weathereffect whichWeatherEffect})",
           "description": "function RemoveWeatherEffectBJ takes weathereffect whichWeatherEffect returns nothing",
           "scope": "source.vjass"
       },
        "fnTerrainDeformationCraterBJ": {
           "prefix": "fnTerrainDeformationCraterBJ",
           "body": "TerrainDeformationCraterBJ(${1:real depth},${2:boolean permanent},${3:location where})",
           "description": "function TerrainDeformationCraterBJ takes real duration, boolean permanent, location where, real radius, real depth returns terraindeformation",
           "scope": "source.vjass"
       },
        "fnTerrainDeformationRippleBJ": {
           "prefix": "fnTerrainDeformationRippleBJ",
           "body": "TerrainDeformationRippleBJ(${1:real waveWidth},${2:boolean limitNeg},${3:location where})",
           "description": "function TerrainDeformationRippleBJ takes real duration, boolean limitNeg, location where, real startRadius, real endRadius, real depth, real wavePeriod, real waveWidth returns terraindeformation",
           "scope": "source.vjass"
       },
        "fnTerrainDeformationWaveBJ": {
           "prefix": "fnTerrainDeformationWaveBJ",
           "body": "TerrainDeformationWaveBJ(${1:real trailDelay},${2:location target})",
           "description": "function TerrainDeformationWaveBJ takes real duration, location source, location target, real radius, real depth, real trailDelay returns terraindeformation",
           "scope": "source.vjass"
       },
        "fnTerrainDeformationRandomBJ": {
           "prefix": "fnTerrainDeformationRandomBJ",
           "body": "TerrainDeformationRandomBJ(${1:real updateInterval},${2:location where})",
           "description": "function TerrainDeformationRandomBJ takes real duration, location where, real radius, real minDelta, real maxDelta, real updateInterval returns terraindeformation",
           "scope": "source.vjass"
       },
        "fnTerrainDeformationStopBJ": {
           "prefix": "fnTerrainDeformationStopBJ",
           "body": "TerrainDeformationStopBJ(${1:real duration},${2:terraindeformation deformation})",
           "description": "function TerrainDeformationStopBJ takes terraindeformation deformation, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedTerrainDeformation": {
           "prefix": "fnGetLastCreatedTerrainDeformation",
           "body": "GetLastCreatedTerrainDeformation(${1:nothing})",
           "description": "function GetLastCreatedTerrainDeformation takes nothing returns terraindeformation",
           "scope": "source.vjass"
       },
        "fnAddLightningLoc": {
           "prefix": "fnAddLightningLoc",
           "body": "AddLightningLoc(${1:string codeName},${2:location where2})",
           "description": "function AddLightningLoc takes string codeName, location where1, location where2 returns lightning",
           "scope": "source.vjass"
       },
        "fnDestroyLightningBJ": {
           "prefix": "fnDestroyLightningBJ",
           "body": "DestroyLightningBJ(${1:lightning whichBolt})",
           "description": "function DestroyLightningBJ takes lightning whichBolt returns boolean",
           "scope": "source.vjass"
       },
        "fnMoveLightningLoc": {
           "prefix": "fnMoveLightningLoc",
           "body": "MoveLightningLoc(${1:location where2},${2:lightning whichBolt})",
           "description": "function MoveLightningLoc takes lightning whichBolt, location where1, location where2 returns boolean",
           "scope": "source.vjass"
       },
        "fnGetLightningColorABJ": {
           "prefix": "fnGetLightningColorABJ",
           "body": "GetLightningColorABJ(${1:lightning whichBolt})",
           "description": "function GetLightningColorABJ takes lightning whichBolt returns real",
           "scope": "source.vjass"
       },
        "fnGetLightningColorRBJ": {
           "prefix": "fnGetLightningColorRBJ",
           "body": "GetLightningColorRBJ(${1:lightning whichBolt})",
           "description": "function GetLightningColorRBJ takes lightning whichBolt returns real",
           "scope": "source.vjass"
       },
        "fnGetLightningColorGBJ": {
           "prefix": "fnGetLightningColorGBJ",
           "body": "GetLightningColorGBJ(${1:lightning whichBolt})",
           "description": "function GetLightningColorGBJ takes lightning whichBolt returns real",
           "scope": "source.vjass"
       },
        "fnGetLightningColorBBJ": {
           "prefix": "fnGetLightningColorBBJ",
           "body": "GetLightningColorBBJ(${1:lightning whichBolt})",
           "description": "function GetLightningColorBBJ takes lightning whichBolt returns real",
           "scope": "source.vjass"
       },
        "fnSetLightningColorBJ": {
           "prefix": "fnSetLightningColorBJ",
           "body": "SetLightningColorBJ(${1:real a},${2:lightning whichBolt})",
           "description": "function SetLightningColorBJ takes lightning whichBolt, real r, real g, real b, real a returns boolean",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedLightningBJ": {
           "prefix": "fnGetLastCreatedLightningBJ",
           "body": "GetLastCreatedLightningBJ(${1:nothing})",
           "description": "function GetLastCreatedLightningBJ takes nothing returns lightning",
           "scope": "source.vjass"
       },
        "fnGetAbilityEffectBJ": {
           "prefix": "fnGetAbilityEffectBJ",
           "body": "GetAbilityEffectBJ(${1:integer index},${2:effecttype t})",
           "description": "function GetAbilityEffectBJ takes integer abilcode, effecttype t, integer index returns string",
           "scope": "source.vjass"
       },
        "fnGetAbilitySoundBJ": {
           "prefix": "fnGetAbilitySoundBJ",
           "body": "GetAbilitySoundBJ(${1:integer abilcode},${2:soundtype t})",
           "description": "function GetAbilitySoundBJ takes integer abilcode, soundtype t returns string",
           "scope": "source.vjass"
       },
        "fnGetTerrainCliffLevelBJ": {
           "prefix": "fnGetTerrainCliffLevelBJ",
           "body": "GetTerrainCliffLevelBJ(${1:location where})",
           "description": "function GetTerrainCliffLevelBJ takes location where returns integer",
           "scope": "source.vjass"
       },
        "fnGetTerrainTypeBJ": {
           "prefix": "fnGetTerrainTypeBJ",
           "body": "GetTerrainTypeBJ(${1:location where})",
           "description": "function GetTerrainTypeBJ takes location where returns integer",
           "scope": "source.vjass"
       },
        "fnGetTerrainVarianceBJ": {
           "prefix": "fnGetTerrainVarianceBJ",
           "body": "GetTerrainVarianceBJ(${1:location where})",
           "description": "function GetTerrainVarianceBJ takes location where returns integer",
           "scope": "source.vjass"
       },
        "fnSetTerrainTypeBJ": {
           "prefix": "fnSetTerrainTypeBJ",
           "body": "SetTerrainTypeBJ(${1:integer shape},${2:location where})",
           "description": "function SetTerrainTypeBJ takes location where, integer terrainType, integer variation, integer area, integer shape returns nothing",
           "scope": "source.vjass"
       },
        "fnIsTerrainPathableBJ": {
           "prefix": "fnIsTerrainPathableBJ",
           "body": "IsTerrainPathableBJ(${1:pathingtype t},${2:location where})",
           "description": "function IsTerrainPathableBJ takes location where, pathingtype t returns boolean",
           "scope": "source.vjass"
       },
        "fnSetTerrainPathableBJ": {
           "prefix": "fnSetTerrainPathableBJ",
           "body": "SetTerrainPathableBJ(${1:pathingtype t},${2:boolean flag},${3:location where})",
           "description": "function SetTerrainPathableBJ takes location where, pathingtype t, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetWaterBaseColorBJ": {
           "prefix": "fnSetWaterBaseColorBJ",
           "body": "SetWaterBaseColorBJ(${1:real transparency})",
           "description": "function SetWaterBaseColorBJ takes real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnCreateFogModifierRectSimple": {
           "prefix": "fnCreateFogModifierRectSimple",
           "body": "CreateFogModifierRectSimple(${1:player whichPlayer},${2:boolean afterUnits},${3:rect r},${4:fogstate whichFogState})",
           "description": "function CreateFogModifierRectSimple takes player whichPlayer, fogstate whichFogState, rect r, boolean afterUnits returns fogmodifier",
           "scope": "source.vjass"
       },
        "fnCreateFogModifierRadiusLocSimple": {
           "prefix": "fnCreateFogModifierRadiusLocSimple",
           "body": "CreateFogModifierRadiusLocSimple(${1:real radius},${2:player whichPlayer},${3:boolean afterUnits},${4:location center},${5:fogstate whichFogState})",
           "description": "function CreateFogModifierRadiusLocSimple takes player whichPlayer, fogstate whichFogState, location center, real radius, boolean afterUnits returns fogmodifier",
           "scope": "source.vjass"
       },
        "fnCreateFogModifierRectBJ": {
           "prefix": "fnCreateFogModifierRectBJ",
           "body": "CreateFogModifierRectBJ(${1:player whichPlayer},${2:boolean enabled},${3:rect r},${4:fogstate whichFogState})",
           "description": "function CreateFogModifierRectBJ takes boolean enabled, player whichPlayer, fogstate whichFogState, rect r returns fogmodifier",
           "scope": "source.vjass"
       },
        "fnCreateFogModifierRadiusLocBJ": {
           "prefix": "fnCreateFogModifierRadiusLocBJ",
           "body": "CreateFogModifierRadiusLocBJ(${1:real radius},${2:player whichPlayer},${3:boolean enabled},${4:location center},${5:fogstate whichFogState})",
           "description": "function CreateFogModifierRadiusLocBJ takes boolean enabled, player whichPlayer, fogstate whichFogState, location center, real radius returns fogmodifier",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedFogModifier": {
           "prefix": "fnGetLastCreatedFogModifier",
           "body": "GetLastCreatedFogModifier(${1:nothing})",
           "description": "function GetLastCreatedFogModifier takes nothing returns fogmodifier",
           "scope": "source.vjass"
       },
        "fnFogEnableOn": {
           "prefix": "fnFogEnableOn",
           "body": "FogEnableOn(${1:nothing})",
           "description": "function FogEnableOn takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnFogEnableOff": {
           "prefix": "fnFogEnableOff",
           "body": "FogEnableOff(${1:nothing})",
           "description": "function FogEnableOff takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnFogMaskEnableOn": {
           "prefix": "fnFogMaskEnableOn",
           "body": "FogMaskEnableOn(${1:nothing})",
           "description": "function FogMaskEnableOn takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnFogMaskEnableOff": {
           "prefix": "fnFogMaskEnableOff",
           "body": "FogMaskEnableOff(${1:nothing})",
           "description": "function FogMaskEnableOff takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnUseTimeOfDayBJ": {
           "prefix": "fnUseTimeOfDayBJ",
           "body": "UseTimeOfDayBJ(${1:boolean flag})",
           "description": "function UseTimeOfDayBJ takes boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTerrainFogExBJ": {
           "prefix": "fnSetTerrainFogExBJ",
           "body": "SetTerrainFogExBJ(${1:real blue},${2:integer style})",
           "description": "function SetTerrainFogExBJ takes integer style, real zstart, real zend, real density, real red, real green, real blue returns nothing",
           "scope": "source.vjass"
       },
        "fnResetTerrainFogBJ": {
           "prefix": "fnResetTerrainFogBJ",
           "body": "ResetTerrainFogBJ(${1:nothing})",
           "description": "function ResetTerrainFogBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDoodadAnimationBJ": {
           "prefix": "fnSetDoodadAnimationBJ",
           "body": "SetDoodadAnimationBJ(${1:real radius},${2:integer doodadID},${3:string animName},${4:location center})",
           "description": "function SetDoodadAnimationBJ takes string animName, integer doodadID, real radius, location center returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDoodadAnimationRectBJ": {
           "prefix": "fnSetDoodadAnimationRectBJ",
           "body": "SetDoodadAnimationRectBJ(${1:integer doodadID},${2:string animName},${3:rect r})",
           "description": "function SetDoodadAnimationRectBJ takes string animName, integer doodadID, rect r returns nothing",
           "scope": "source.vjass"
       },
        "fnAddUnitAnimationPropertiesBJ": {
           "prefix": "fnAddUnitAnimationPropertiesBJ",
           "body": "AddUnitAnimationPropertiesBJ(${1:boolean add},${2:string animProperties},${3:unit whichUnit})",
           "description": "function AddUnitAnimationPropertiesBJ takes boolean add, string animProperties, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnCreateImageBJ": {
           "prefix": "fnCreateImageBJ",
           "body": "CreateImageBJ(${1:real zOffset},${2:integer imageType},${3:string file},${4:location where})",
           "description": "function CreateImageBJ takes string file, real size, location where, real zOffset, integer imageType returns image",
           "scope": "source.vjass"
       },
        "fnShowImageBJ": {
           "prefix": "fnShowImageBJ",
           "body": "ShowImageBJ(${1:image whichImage},${2:boolean flag})",
           "description": "function ShowImageBJ takes boolean flag, image whichImage returns nothing",
           "scope": "source.vjass"
       },
        "fnSetImagePositionBJ": {
           "prefix": "fnSetImagePositionBJ",
           "body": "SetImagePositionBJ(${1:real zOffset},${2:image whichImage},${3:location where})",
           "description": "function SetImagePositionBJ takes image whichImage, location where, real zOffset returns nothing",
           "scope": "source.vjass"
       },
        "fnSetImageColorBJ": {
           "prefix": "fnSetImageColorBJ",
           "body": "SetImageColorBJ(${1:real alpha},${2:image whichImage})",
           "description": "function SetImageColorBJ takes image whichImage, real red, real green, real blue, real alpha returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedImage": {
           "prefix": "fnGetLastCreatedImage",
           "body": "GetLastCreatedImage(${1:nothing})",
           "description": "function GetLastCreatedImage takes nothing returns image",
           "scope": "source.vjass"
       },
        "fnCreateUbersplatBJ": {
           "prefix": "fnCreateUbersplatBJ",
           "body": "CreateUbersplatBJ(${1:real alpha},${2:boolean noBirthTime},${3:location where},${4:string name})",
           "description": "function CreateUbersplatBJ takes location where, string name, real red, real green, real blue, real alpha, boolean forcePaused, boolean noBirthTime returns ubersplat",
           "scope": "source.vjass"
       },
        "fnShowUbersplatBJ": {
           "prefix": "fnShowUbersplatBJ",
           "body": "ShowUbersplatBJ(${1:boolean flag},${2:ubersplat whichSplat})",
           "description": "function ShowUbersplatBJ takes boolean flag, ubersplat whichSplat returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedUbersplat": {
           "prefix": "fnGetLastCreatedUbersplat",
           "body": "GetLastCreatedUbersplat(${1:nothing})",
           "description": "function GetLastCreatedUbersplat takes nothing returns ubersplat",
           "scope": "source.vjass"
       },
        "fnPlaySoundBJ": {
           "prefix": "fnPlaySoundBJ",
           "body": "PlaySoundBJ(${1:sound soundHandle})",
           "description": "function PlaySoundBJ takes sound soundHandle returns nothing",
           "scope": "source.vjass"
       },
        "fnStopSoundBJ": {
           "prefix": "fnStopSoundBJ",
           "body": "StopSoundBJ(${1:sound soundHandle},${2:boolean fadeOut})",
           "description": "function StopSoundBJ takes sound soundHandle, boolean fadeOut returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundVolumeBJ": {
           "prefix": "fnSetSoundVolumeBJ",
           "body": "SetSoundVolumeBJ(${1:sound soundHandle},${2:real volumePercent})",
           "description": "function SetSoundVolumeBJ takes sound soundHandle, real volumePercent returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundOffsetBJ": {
           "prefix": "fnSetSoundOffsetBJ",
           "body": "SetSoundOffsetBJ(${1:real newOffset},${2:sound soundHandle})",
           "description": "function SetSoundOffsetBJ takes real newOffset, sound soundHandle returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundDistanceCutoffBJ": {
           "prefix": "fnSetSoundDistanceCutoffBJ",
           "body": "SetSoundDistanceCutoffBJ(${1:sound soundHandle},${2:real cutoff})",
           "description": "function SetSoundDistanceCutoffBJ takes sound soundHandle, real cutoff returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundPitchBJ": {
           "prefix": "fnSetSoundPitchBJ",
           "body": "SetSoundPitchBJ(${1:sound soundHandle},${2:real pitch})",
           "description": "function SetSoundPitchBJ takes sound soundHandle, real pitch returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundPositionLocBJ": {
           "prefix": "fnSetSoundPositionLocBJ",
           "body": "SetSoundPositionLocBJ(${1:sound soundHandle},${2:real z},${3:location loc})",
           "description": "function SetSoundPositionLocBJ takes sound soundHandle, location loc, real z returns nothing",
           "scope": "source.vjass"
       },
        "fnAttachSoundToUnitBJ": {
           "prefix": "fnAttachSoundToUnitBJ",
           "body": "AttachSoundToUnitBJ(${1:sound soundHandle},${2:unit whichUnit})",
           "description": "function AttachSoundToUnitBJ takes sound soundHandle, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundConeAnglesBJ": {
           "prefix": "fnSetSoundConeAnglesBJ",
           "body": "SetSoundConeAnglesBJ(${1:sound soundHandle},${2:real outsideVolumePercent})",
           "description": "function SetSoundConeAnglesBJ takes sound soundHandle, real inside, real outside, real outsideVolumePercent returns nothing",
           "scope": "source.vjass"
       },
        "fnKillSoundWhenDoneBJ": {
           "prefix": "fnKillSoundWhenDoneBJ",
           "body": "KillSoundWhenDoneBJ(${1:sound soundHandle})",
           "description": "function KillSoundWhenDoneBJ takes sound soundHandle returns nothing",
           "scope": "source.vjass"
       },
        "fnPlaySoundAtPointBJ": {
           "prefix": "fnPlaySoundAtPointBJ",
           "body": "PlaySoundAtPointBJ(${1:sound soundHandle},${2:real z},${3:location loc})",
           "description": "function PlaySoundAtPointBJ takes sound soundHandle, real volumePercent, location loc, real z returns nothing",
           "scope": "source.vjass"
       },
        "fnPlaySoundOnUnitBJ": {
           "prefix": "fnPlaySoundOnUnitBJ",
           "body": "PlaySoundOnUnitBJ(${1:sound soundHandle},${2:real volumePercent},${3:unit whichUnit})",
           "description": "function PlaySoundOnUnitBJ takes sound soundHandle, real volumePercent, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnPlaySoundFromOffsetBJ": {
           "prefix": "fnPlaySoundFromOffsetBJ",
           "body": "PlaySoundFromOffsetBJ(${1:sound soundHandle},${2:real startingOffset})",
           "description": "function PlaySoundFromOffsetBJ takes sound soundHandle, real volumePercent, real startingOffset returns nothing",
           "scope": "source.vjass"
       },
        "fnPlayMusicBJ": {
           "prefix": "fnPlayMusicBJ",
           "body": "PlayMusicBJ(${1:string musicFileName})",
           "description": "function PlayMusicBJ takes string musicFileName returns nothing",
           "scope": "source.vjass"
       },
        "fnPlayMusicExBJ": {
           "prefix": "fnPlayMusicExBJ",
           "body": "PlayMusicExBJ(${1:real fadeInTime},${2:string musicFileName})",
           "description": "function PlayMusicExBJ takes string musicFileName, real startingOffset, real fadeInTime returns nothing",
           "scope": "source.vjass"
       },
        "fnSetMusicOffsetBJ": {
           "prefix": "fnSetMusicOffsetBJ",
           "body": "SetMusicOffsetBJ(${1:real newOffset})",
           "description": "function SetMusicOffsetBJ takes real newOffset returns nothing",
           "scope": "source.vjass"
       },
        "fnPlayThematicMusicBJ": {
           "prefix": "fnPlayThematicMusicBJ",
           "body": "PlayThematicMusicBJ(${1:string musicName})",
           "description": "function PlayThematicMusicBJ takes string musicName returns nothing",
           "scope": "source.vjass"
       },
        "fnPlayThematicMusicExBJ": {
           "prefix": "fnPlayThematicMusicExBJ",
           "body": "PlayThematicMusicExBJ(${1:real startingOffset},${2:string musicName})",
           "description": "function PlayThematicMusicExBJ takes string musicName, real startingOffset returns nothing",
           "scope": "source.vjass"
       },
        "fnSetThematicMusicOffsetBJ": {
           "prefix": "fnSetThematicMusicOffsetBJ",
           "body": "SetThematicMusicOffsetBJ(${1:real newOffset})",
           "description": "function SetThematicMusicOffsetBJ takes real newOffset returns nothing",
           "scope": "source.vjass"
       },
        "fnEndThematicMusicBJ": {
           "prefix": "fnEndThematicMusicBJ",
           "body": "EndThematicMusicBJ(${1:nothing})",
           "description": "function EndThematicMusicBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnStopMusicBJ": {
           "prefix": "fnStopMusicBJ",
           "body": "StopMusicBJ(${1:boolean fadeOut})",
           "description": "function StopMusicBJ takes boolean fadeOut returns nothing",
           "scope": "source.vjass"
       },
        "fnResumeMusicBJ": {
           "prefix": "fnResumeMusicBJ",
           "body": "ResumeMusicBJ(${1:nothing})",
           "description": "function ResumeMusicBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetMusicVolumeBJ": {
           "prefix": "fnSetMusicVolumeBJ",
           "body": "SetMusicVolumeBJ(${1:real volumePercent})",
           "description": "function SetMusicVolumeBJ takes real volumePercent returns nothing",
           "scope": "source.vjass"
       },
        "fnGetSoundDurationBJ": {
           "prefix": "fnGetSoundDurationBJ",
           "body": "GetSoundDurationBJ(${1:sound soundHandle})",
           "description": "function GetSoundDurationBJ takes sound soundHandle returns real",
           "scope": "source.vjass"
       },
        "fnGetSoundFileDurationBJ": {
           "prefix": "fnGetSoundFileDurationBJ",
           "body": "GetSoundFileDurationBJ(${1:string musicFileName})",
           "description": "function GetSoundFileDurationBJ takes string musicFileName returns real",
           "scope": "source.vjass"
       },
        "fnGetLastPlayedSound": {
           "prefix": "fnGetLastPlayedSound",
           "body": "GetLastPlayedSound(${1:nothing})",
           "description": "function GetLastPlayedSound takes nothing returns sound",
           "scope": "source.vjass"
       },
        "fnGetLastPlayedMusic": {
           "prefix": "fnGetLastPlayedMusic",
           "body": "GetLastPlayedMusic(${1:nothing})",
           "description": "function GetLastPlayedMusic takes nothing returns string",
           "scope": "source.vjass"
       },
        "fnVolumeGroupSetVolumeBJ": {
           "prefix": "fnVolumeGroupSetVolumeBJ",
           "body": "VolumeGroupSetVolumeBJ(${1:real percent},${2:volumegroup vgroup})",
           "description": "function VolumeGroupSetVolumeBJ takes volumegroup vgroup, real percent returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCineModeVolumeGroupsImmediateBJ": {
           "prefix": "fnSetCineModeVolumeGroupsImmediateBJ",
           "body": "SetCineModeVolumeGroupsImmediateBJ(${1:nothing})",
           "description": "function SetCineModeVolumeGroupsImmediateBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCineModeVolumeGroupsBJ": {
           "prefix": "fnSetCineModeVolumeGroupsBJ",
           "body": "SetCineModeVolumeGroupsBJ(${1:nothing})",
           "description": "function SetCineModeVolumeGroupsBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSpeechVolumeGroupsImmediateBJ": {
           "prefix": "fnSetSpeechVolumeGroupsImmediateBJ",
           "body": "SetSpeechVolumeGroupsImmediateBJ(${1:nothing})",
           "description": "function SetSpeechVolumeGroupsImmediateBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSpeechVolumeGroupsBJ": {
           "prefix": "fnSetSpeechVolumeGroupsBJ",
           "body": "SetSpeechVolumeGroupsBJ(${1:nothing})",
           "description": "function SetSpeechVolumeGroupsBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnVolumeGroupResetImmediateBJ": {
           "prefix": "fnVolumeGroupResetImmediateBJ",
           "body": "VolumeGroupResetImmediateBJ(${1:nothing})",
           "description": "function VolumeGroupResetImmediateBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnVolumeGroupResetBJ": {
           "prefix": "fnVolumeGroupResetBJ",
           "body": "VolumeGroupResetBJ(${1:nothing})",
           "description": "function VolumeGroupResetBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnGetSoundIsPlayingBJ": {
           "prefix": "fnGetSoundIsPlayingBJ",
           "body": "GetSoundIsPlayingBJ(${1:sound soundHandle})",
           "description": "function GetSoundIsPlayingBJ takes sound soundHandle returns boolean",
           "scope": "source.vjass"
       },
        "fnWaitForSoundBJ": {
           "prefix": "fnWaitForSoundBJ",
           "body": "WaitForSoundBJ(${1:sound soundHandle},${2:real offset})",
           "description": "function WaitForSoundBJ takes sound soundHandle, real offset returns nothing",
           "scope": "source.vjass"
       },
        "fnSetMapMusicIndexedBJ": {
           "prefix": "fnSetMapMusicIndexedBJ",
           "body": "SetMapMusicIndexedBJ(${1:integer index},${2:string musicName})",
           "description": "function SetMapMusicIndexedBJ takes string musicName, integer index returns nothing",
           "scope": "source.vjass"
       },
        "fnSetMapMusicRandomBJ": {
           "prefix": "fnSetMapMusicRandomBJ",
           "body": "SetMapMusicRandomBJ(${1:string musicName})",
           "description": "function SetMapMusicRandomBJ takes string musicName returns nothing",
           "scope": "source.vjass"
       },
        "fnClearMapMusicBJ": {
           "prefix": "fnClearMapMusicBJ",
           "body": "ClearMapMusicBJ(${1:nothing})",
           "description": "function ClearMapMusicBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetStackedSoundBJ": {
           "prefix": "fnSetStackedSoundBJ",
           "body": "SetStackedSoundBJ(${1:sound soundHandle},${2:boolean add},${3:rect r})",
           "description": "function SetStackedSoundBJ takes boolean add, sound soundHandle, rect r returns nothing",
           "scope": "source.vjass"
       },
        "fnStartSoundForPlayerBJ": {
           "prefix": "fnStartSoundForPlayerBJ",
           "body": "StartSoundForPlayerBJ(${1:sound soundHandle},${2:player whichPlayer})",
           "description": "function StartSoundForPlayerBJ takes player whichPlayer, sound soundHandle returns nothing",
           "scope": "source.vjass"
       },
        "fnVolumeGroupSetVolumeForPlayerBJ": {
           "prefix": "fnVolumeGroupSetVolumeForPlayerBJ",
           "body": "VolumeGroupSetVolumeForPlayerBJ(${1:real scale},${2:player whichPlayer},${3:volumegroup vgroup})",
           "description": "function VolumeGroupSetVolumeForPlayerBJ takes player whichPlayer, volumegroup vgroup, real scale returns nothing",
           "scope": "source.vjass"
       },
        "fnEnableDawnDusk": {
           "prefix": "fnEnableDawnDusk",
           "body": "EnableDawnDusk(${1:boolean flag})",
           "description": "function EnableDawnDusk takes boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnIsDawnDuskEnabled": {
           "prefix": "fnIsDawnDuskEnabled",
           "body": "IsDawnDuskEnabled(${1:nothing})",
           "description": "function IsDawnDuskEnabled takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnSetAmbientDaySound": {
           "prefix": "fnSetAmbientDaySound",
           "body": "SetAmbientDaySound(${1:string inLabel})",
           "description": "function SetAmbientDaySound takes string inLabel returns nothing",
           "scope": "source.vjass"
       },
        "fnSetAmbientNightSound": {
           "prefix": "fnSetAmbientNightSound",
           "body": "SetAmbientNightSound(${1:string inLabel})",
           "description": "function SetAmbientNightSound takes string inLabel returns nothing",
           "scope": "source.vjass"
       },
        "fnAddSpecialEffectLocBJ": {
           "prefix": "fnAddSpecialEffectLocBJ",
           "body": "AddSpecialEffectLocBJ(${1:location where},${2:string modelName})",
           "description": "function AddSpecialEffectLocBJ takes location where, string modelName returns effect",
           "scope": "source.vjass"
       },
        "fnAddSpecialEffectTargetUnitBJ": {
           "prefix": "fnAddSpecialEffectTargetUnitBJ",
           "body": "AddSpecialEffectTargetUnitBJ(${1:widget targetWidget},${2:string modelName})",
           "description": "function AddSpecialEffectTargetUnitBJ takes string attachPointName, widget targetWidget, string modelName returns effect",
           "scope": "source.vjass"
       },
        "fnDestroyEffectBJ": {
           "prefix": "fnDestroyEffectBJ",
           "body": "DestroyEffectBJ(${1:effect whichEffect})",
           "description": "function DestroyEffectBJ takes effect whichEffect returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedEffectBJ": {
           "prefix": "fnGetLastCreatedEffectBJ",
           "body": "GetLastCreatedEffectBJ(${1:nothing})",
           "description": "function GetLastCreatedEffectBJ takes nothing returns effect",
           "scope": "source.vjass"
       },
        "fnGetItemLoc": {
           "prefix": "fnGetItemLoc",
           "body": "GetItemLoc(${1:item whichItem})",
           "description": "function GetItemLoc takes item whichItem returns location",
           "scope": "source.vjass"
       },
        "fnGetItemLifeBJ": {
           "prefix": "fnGetItemLifeBJ",
           "body": "GetItemLifeBJ(${1:widget whichWidget})",
           "description": "function GetItemLifeBJ takes widget whichWidget returns real",
           "scope": "source.vjass"
       },
        "fnSetItemLifeBJ": {
           "prefix": "fnSetItemLifeBJ",
           "body": "SetItemLifeBJ(${1:real life},${2:widget whichWidget})",
           "description": "function SetItemLifeBJ takes widget whichWidget, real life returns nothing",
           "scope": "source.vjass"
       },
        "fnAddHeroXPSwapped": {
           "prefix": "fnAddHeroXPSwapped",
           "body": "AddHeroXPSwapped(${1:integer xpToAdd},${2:boolean showEyeCandy},${3:unit whichHero})",
           "description": "function AddHeroXPSwapped takes integer xpToAdd, unit whichHero, boolean showEyeCandy returns nothing",
           "scope": "source.vjass"
       },
        "fnSetHeroLevelBJ": {
           "prefix": "fnSetHeroLevelBJ",
           "body": "SetHeroLevelBJ(${1:integer newLevel},${2:boolean showEyeCandy},${3:unit whichHero})",
           "description": "function SetHeroLevelBJ takes unit whichHero, integer newLevel, boolean showEyeCandy returns nothing",
           "scope": "source.vjass"
       },
        "fnDecUnitAbilityLevelSwapped": {
           "prefix": "fnDecUnitAbilityLevelSwapped",
           "body": "DecUnitAbilityLevelSwapped(${1:integer abilcode},${2:unit whichUnit})",
           "description": "function DecUnitAbilityLevelSwapped takes integer abilcode, unit whichUnit returns integer",
           "scope": "source.vjass"
       },
        "fnIncUnitAbilityLevelSwapped": {
           "prefix": "fnIncUnitAbilityLevelSwapped",
           "body": "IncUnitAbilityLevelSwapped(${1:integer abilcode},${2:unit whichUnit})",
           "description": "function IncUnitAbilityLevelSwapped takes integer abilcode, unit whichUnit returns integer",
           "scope": "source.vjass"
       },
        "fnSetUnitAbilityLevelSwapped": {
           "prefix": "fnSetUnitAbilityLevelSwapped",
           "body": "SetUnitAbilityLevelSwapped(${1:integer level},${2:unit whichUnit})",
           "description": "function SetUnitAbilityLevelSwapped takes integer abilcode, unit whichUnit, integer level returns integer",
           "scope": "source.vjass"
       },
        "fnGetUnitAbilityLevelSwapped": {
           "prefix": "fnGetUnitAbilityLevelSwapped",
           "body": "GetUnitAbilityLevelSwapped(${1:integer abilcode},${2:unit whichUnit})",
           "description": "function GetUnitAbilityLevelSwapped takes integer abilcode, unit whichUnit returns integer",
           "scope": "source.vjass"
       },
        "fnUnitHasBuffBJ": {
           "prefix": "fnUnitHasBuffBJ",
           "body": "UnitHasBuffBJ(${1:integer buffcode},${2:unit whichUnit})",
           "description": "function UnitHasBuffBJ takes unit whichUnit, integer buffcode returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitRemoveBuffBJ": {
           "prefix": "fnUnitRemoveBuffBJ",
           "body": "UnitRemoveBuffBJ(${1:integer buffcode},${2:unit whichUnit})",
           "description": "function UnitRemoveBuffBJ takes integer buffcode, unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitAddItemSwapped": {
           "prefix": "fnUnitAddItemSwapped",
           "body": "UnitAddItemSwapped(${1:item whichItem},${2:unit whichHero})",
           "description": "function UnitAddItemSwapped takes item whichItem, unit whichHero returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitAddItemByIdSwapped": {
           "prefix": "fnUnitAddItemByIdSwapped",
           "body": "UnitAddItemByIdSwapped(${1:integer itemId},${2:unit whichHero})",
           "description": "function UnitAddItemByIdSwapped takes integer itemId, unit whichHero returns item",
           "scope": "source.vjass"
       },
        "fnUnitRemoveItemSwapped": {
           "prefix": "fnUnitRemoveItemSwapped",
           "body": "UnitRemoveItemSwapped(${1:item whichItem},${2:unit whichHero})",
           "description": "function UnitRemoveItemSwapped takes item whichItem, unit whichHero returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitRemoveItemFromSlotSwapped": {
           "prefix": "fnUnitRemoveItemFromSlotSwapped",
           "body": "UnitRemoveItemFromSlotSwapped(${1:integer itemSlot},${2:unit whichHero})",
           "description": "function UnitRemoveItemFromSlotSwapped takes integer itemSlot, unit whichHero returns item",
           "scope": "source.vjass"
       },
        "fnCreateItemLoc": {
           "prefix": "fnCreateItemLoc",
           "body": "CreateItemLoc(${1:integer itemId},${2:location loc})",
           "description": "function CreateItemLoc takes integer itemId, location loc returns item",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedItem": {
           "prefix": "fnGetLastCreatedItem",
           "body": "GetLastCreatedItem(${1:nothing})",
           "description": "function GetLastCreatedItem takes nothing returns item",
           "scope": "source.vjass"
       },
        "fnGetLastRemovedItem": {
           "prefix": "fnGetLastRemovedItem",
           "body": "GetLastRemovedItem(${1:nothing})",
           "description": "function GetLastRemovedItem takes nothing returns item",
           "scope": "source.vjass"
       },
        "fnSetItemPositionLoc": {
           "prefix": "fnSetItemPositionLoc",
           "body": "SetItemPositionLoc(${1:item whichItem},${2:location loc})",
           "description": "function SetItemPositionLoc takes item whichItem, location loc returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLearnedSkillBJ": {
           "prefix": "fnGetLearnedSkillBJ",
           "body": "GetLearnedSkillBJ(${1:nothing})",
           "description": "function GetLearnedSkillBJ takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnSuspendHeroXPBJ": {
           "prefix": "fnSuspendHeroXPBJ",
           "body": "SuspendHeroXPBJ(${1:boolean flag},${2:unit whichHero})",
           "description": "function SuspendHeroXPBJ takes boolean flag, unit whichHero returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerHandicapXPBJ": {
           "prefix": "fnSetPlayerHandicapXPBJ",
           "body": "SetPlayerHandicapXPBJ(${1:real handicapPercent},${2:player whichPlayer})",
           "description": "function SetPlayerHandicapXPBJ takes player whichPlayer, real handicapPercent returns nothing",
           "scope": "source.vjass"
       },
        "fnGetPlayerHandicapXPBJ": {
           "prefix": "fnGetPlayerHandicapXPBJ",
           "body": "GetPlayerHandicapXPBJ(${1:player whichPlayer})",
           "description": "function GetPlayerHandicapXPBJ takes player whichPlayer returns real",
           "scope": "source.vjass"
       },
        "fnSetPlayerHandicapBJ": {
           "prefix": "fnSetPlayerHandicapBJ",
           "body": "SetPlayerHandicapBJ(${1:real handicapPercent},${2:player whichPlayer})",
           "description": "function SetPlayerHandicapBJ takes player whichPlayer, real handicapPercent returns nothing",
           "scope": "source.vjass"
       },
        "fnGetPlayerHandicapBJ": {
           "prefix": "fnGetPlayerHandicapBJ",
           "body": "GetPlayerHandicapBJ(${1:player whichPlayer})",
           "description": "function GetPlayerHandicapBJ takes player whichPlayer returns real",
           "scope": "source.vjass"
       },
        "fnGetHeroStatBJ": {
           "prefix": "fnGetHeroStatBJ",
           "body": "GetHeroStatBJ(${1:integer whichStat},${2:boolean includeBonuses},${3:unit whichHero})",
           "description": "function GetHeroStatBJ takes integer whichStat, unit whichHero, boolean includeBonuses returns integer",
           "scope": "source.vjass"
       },
        "fnSetHeroStat": {
           "prefix": "fnSetHeroStat",
           "body": "SetHeroStat(${1:integer value},${2:unit whichHero})",
           "description": "function SetHeroStat takes unit whichHero, integer whichStat, integer value returns nothing",
           "scope": "source.vjass"
       },
        "fnModifyHeroStat": {
           "prefix": "fnModifyHeroStat",
           "body": "ModifyHeroStat(${1:integer value},${2:unit whichHero})",
           "description": "function ModifyHeroStat takes integer whichStat, unit whichHero, integer modifyMethod, integer value returns nothing",
           "scope": "source.vjass"
       },
        "fnModifyHeroSkillPoints": {
           "prefix": "fnModifyHeroSkillPoints",
           "body": "ModifyHeroSkillPoints(${1:integer value},${2:unit whichHero})",
           "description": "function ModifyHeroSkillPoints takes unit whichHero, integer modifyMethod, integer value returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitDropItemPointBJ": {
           "prefix": "fnUnitDropItemPointBJ",
           "body": "UnitDropItemPointBJ(${1:real y},${2:item whichItem},${3:unit whichUnit})",
           "description": "function UnitDropItemPointBJ takes unit whichUnit, item whichItem, real x, real y returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitDropItemPointLoc": {
           "prefix": "fnUnitDropItemPointLoc",
           "body": "UnitDropItemPointLoc(${1:item whichItem},${2:location loc},${3:unit whichUnit})",
           "description": "function UnitDropItemPointLoc takes unit whichUnit, item whichItem, location loc returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitDropItemSlotBJ": {
           "prefix": "fnUnitDropItemSlotBJ",
           "body": "UnitDropItemSlotBJ(${1:item whichItem},${2:unit whichUnit},${3:integer slot})",
           "description": "function UnitDropItemSlotBJ takes unit whichUnit, item whichItem, integer slot returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitDropItemTargetBJ": {
           "prefix": "fnUnitDropItemTargetBJ",
           "body": "UnitDropItemTargetBJ(${1:item whichItem},${2:widget target},${3:unit whichUnit})",
           "description": "function UnitDropItemTargetBJ takes unit whichUnit, item whichItem, widget target returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitUseItemDestructable": {
           "prefix": "fnUnitUseItemDestructable",
           "body": "UnitUseItemDestructable(${1:item whichItem},${2:widget target},${3:unit whichUnit})",
           "description": "function UnitUseItemDestructable takes unit whichUnit, item whichItem, widget target returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitUseItemPointLoc": {
           "prefix": "fnUnitUseItemPointLoc",
           "body": "UnitUseItemPointLoc(${1:item whichItem},${2:location loc},${3:unit whichUnit})",
           "description": "function UnitUseItemPointLoc takes unit whichUnit, item whichItem, location loc returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitItemInSlotBJ": {
           "prefix": "fnUnitItemInSlotBJ",
           "body": "UnitItemInSlotBJ(${1:integer itemSlot},${2:unit whichUnit})",
           "description": "function UnitItemInSlotBJ takes unit whichUnit, integer itemSlot returns item",
           "scope": "source.vjass"
       },
        "fnGetInventoryIndexOfItemTypeBJ": {
           "prefix": "fnGetInventoryIndexOfItemTypeBJ",
           "body": "GetInventoryIndexOfItemTypeBJ(${1:integer itemId},${2:unit whichUnit})",
           "description": "function GetInventoryIndexOfItemTypeBJ takes unit whichUnit, integer itemId returns integer",
           "scope": "source.vjass"
       },
        "fnGetItemOfTypeFromUnitBJ": {
           "prefix": "fnGetItemOfTypeFromUnitBJ",
           "body": "GetItemOfTypeFromUnitBJ(${1:integer itemId},${2:unit whichUnit})",
           "description": "function GetItemOfTypeFromUnitBJ takes unit whichUnit, integer itemId returns item",
           "scope": "source.vjass"
       },
        "fnUnitHasItemOfTypeBJ": {
           "prefix": "fnUnitHasItemOfTypeBJ",
           "body": "UnitHasItemOfTypeBJ(${1:integer itemId},${2:unit whichUnit})",
           "description": "function UnitHasItemOfTypeBJ takes unit whichUnit, integer itemId returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitInventoryCount": {
           "prefix": "fnUnitInventoryCount",
           "body": "UnitInventoryCount(${1:unit whichUnit})",
           "description": "function UnitInventoryCount takes unit whichUnit returns integer",
           "scope": "source.vjass"
       },
        "fnUnitInventorySizeBJ": {
           "prefix": "fnUnitInventorySizeBJ",
           "body": "UnitInventorySizeBJ(${1:unit whichUnit})",
           "description": "function UnitInventorySizeBJ takes unit whichUnit returns integer",
           "scope": "source.vjass"
       },
        "fnSetItemInvulnerableBJ": {
           "prefix": "fnSetItemInvulnerableBJ",
           "body": "SetItemInvulnerableBJ(${1:item whichItem},${2:boolean flag})",
           "description": "function SetItemInvulnerableBJ takes item whichItem, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetItemDropOnDeathBJ": {
           "prefix": "fnSetItemDropOnDeathBJ",
           "body": "SetItemDropOnDeathBJ(${1:item whichItem},${2:boolean flag})",
           "description": "function SetItemDropOnDeathBJ takes item whichItem, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetItemDroppableBJ": {
           "prefix": "fnSetItemDroppableBJ",
           "body": "SetItemDroppableBJ(${1:item whichItem},${2:boolean flag})",
           "description": "function SetItemDroppableBJ takes item whichItem, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetItemPlayerBJ": {
           "prefix": "fnSetItemPlayerBJ",
           "body": "SetItemPlayerBJ(${1:item whichItem},${2:boolean changeColor},${3:player whichPlayer})",
           "description": "function SetItemPlayerBJ takes item whichItem, player whichPlayer, boolean changeColor returns nothing",
           "scope": "source.vjass"
       },
        "fnSetItemVisibleBJ": {
           "prefix": "fnSetItemVisibleBJ",
           "body": "SetItemVisibleBJ(${1:item whichItem},${2:boolean show})",
           "description": "function SetItemVisibleBJ takes boolean show, item whichItem returns nothing",
           "scope": "source.vjass"
       },
        "fnIsItemHiddenBJ": {
           "prefix": "fnIsItemHiddenBJ",
           "body": "IsItemHiddenBJ(${1:item whichItem})",
           "description": "function IsItemHiddenBJ takes item whichItem returns boolean",
           "scope": "source.vjass"
       },
        "fnChooseRandomItemBJ": {
           "prefix": "fnChooseRandomItemBJ",
           "body": "ChooseRandomItemBJ(${1:integer level})",
           "description": "function ChooseRandomItemBJ takes integer level returns integer",
           "scope": "source.vjass"
       },
        "fnChooseRandomItemExBJ": {
           "prefix": "fnChooseRandomItemExBJ",
           "body": "ChooseRandomItemExBJ(${1:integer level},${2:itemtype whichType})",
           "description": "function ChooseRandomItemExBJ takes integer level, itemtype whichType returns integer",
           "scope": "source.vjass"
       },
        "fnChooseRandomNPBuildingBJ": {
           "prefix": "fnChooseRandomNPBuildingBJ",
           "body": "ChooseRandomNPBuildingBJ(${1:nothing})",
           "description": "function ChooseRandomNPBuildingBJ takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnChooseRandomCreepBJ": {
           "prefix": "fnChooseRandomCreepBJ",
           "body": "ChooseRandomCreepBJ(${1:integer level})",
           "description": "function ChooseRandomCreepBJ takes integer level returns integer",
           "scope": "source.vjass"
       },
        "fnEnumItemsInRectBJ": {
           "prefix": "fnEnumItemsInRectBJ",
           "body": "EnumItemsInRectBJ(${1:code actionFunc},${2:rect r})",
           "description": "function EnumItemsInRectBJ takes rect r, code actionFunc returns nothing",
           "scope": "source.vjass"
       },
        "fnRandomItemInRectBJEnum": {
           "prefix": "fnRandomItemInRectBJEnum",
           "body": "RandomItemInRectBJEnum(${1:nothing})",
           "description": "function RandomItemInRectBJEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnRandomItemInRectBJ": {
           "prefix": "fnRandomItemInRectBJ",
           "body": "RandomItemInRectBJ(${1:boolexpr filter},${2:rect r})",
           "description": "function RandomItemInRectBJ takes rect r, boolexpr filter returns item",
           "scope": "source.vjass"
       },
        "fnRandomItemInRectSimpleBJ": {
           "prefix": "fnRandomItemInRectSimpleBJ",
           "body": "RandomItemInRectSimpleBJ(${1:rect r})",
           "description": "function RandomItemInRectSimpleBJ takes rect r returns item",
           "scope": "source.vjass"
       },
        "fnCheckItemStatus": {
           "prefix": "fnCheckItemStatus",
           "body": "CheckItemStatus(${1:item whichItem},${2:integer status})",
           "description": "function CheckItemStatus takes item whichItem, integer status returns boolean",
           "scope": "source.vjass"
       },
        "fnCheckItemcodeStatus": {
           "prefix": "fnCheckItemcodeStatus",
           "body": "CheckItemcodeStatus(${1:integer status})",
           "description": "function CheckItemcodeStatus takes integer itemId, integer status returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitId2OrderIdBJ": {
           "prefix": "fnUnitId2OrderIdBJ",
           "body": "UnitId2OrderIdBJ(${1:integer unitId})",
           "description": "function UnitId2OrderIdBJ takes integer unitId returns integer",
           "scope": "source.vjass"
       },
        "fnString2UnitIdBJ": {
           "prefix": "fnString2UnitIdBJ",
           "body": "String2UnitIdBJ(${1:string unitIdString})",
           "description": "function String2UnitIdBJ takes string unitIdString returns integer",
           "scope": "source.vjass"
       },
        "fnUnitId2StringBJ": {
           "prefix": "fnUnitId2StringBJ",
           "body": "UnitId2StringBJ(${1:integer unitId})",
           "description": "function UnitId2StringBJ takes integer unitId returns string",
           "scope": "source.vjass"
       },
        "fnString2OrderIdBJ": {
           "prefix": "fnString2OrderIdBJ",
           "body": "String2OrderIdBJ(${1:string orderIdString})",
           "description": "function String2OrderIdBJ takes string orderIdString returns integer",
           "scope": "source.vjass"
       },
        "fnOrderId2StringBJ": {
           "prefix": "fnOrderId2StringBJ",
           "body": "OrderId2StringBJ(${1:integer orderId})",
           "description": "function OrderId2StringBJ takes integer orderId returns string",
           "scope": "source.vjass"
       },
        "fnGetIssuedOrderIdBJ": {
           "prefix": "fnGetIssuedOrderIdBJ",
           "body": "GetIssuedOrderIdBJ(${1:nothing})",
           "description": "function GetIssuedOrderIdBJ takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnGetKillingUnitBJ": {
           "prefix": "fnGetKillingUnitBJ",
           "body": "GetKillingUnitBJ(${1:nothing})",
           "description": "function GetKillingUnitBJ takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnCreateUnitAtLocSaveLast": {
           "prefix": "fnCreateUnitAtLocSaveLast",
           "body": "CreateUnitAtLocSaveLast(${1:real face},${2:player id},${3:location loc},${4:integer unitid})",
           "description": "function CreateUnitAtLocSaveLast takes player id, integer unitid, location loc, real face returns unit",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedUnit": {
           "prefix": "fnGetLastCreatedUnit",
           "body": "GetLastCreatedUnit(${1:nothing})",
           "description": "function GetLastCreatedUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnCreateNUnitsAtLoc": {
           "prefix": "fnCreateNUnitsAtLoc",
           "body": "CreateNUnitsAtLoc(${1:real face},${2:integer unitId},${3:location loc},${4:player whichPlayer})",
           "description": "function CreateNUnitsAtLoc takes integer count, integer unitId, player whichPlayer, location loc, real face returns group",
           "scope": "source.vjass"
       },
        "fnCreateNUnitsAtLocFacingLocBJ": {
           "prefix": "fnCreateNUnitsAtLocFacingLocBJ",
           "body": "CreateNUnitsAtLocFacingLocBJ(${1:integer unitId},${2:location lookAt},${3:player whichPlayer})",
           "description": "function CreateNUnitsAtLocFacingLocBJ takes integer count, integer unitId, player whichPlayer, location loc, location lookAt returns group",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedGroupEnum": {
           "prefix": "fnGetLastCreatedGroupEnum",
           "body": "GetLastCreatedGroupEnum(${1:nothing})",
           "description": "function GetLastCreatedGroupEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedGroup": {
           "prefix": "fnGetLastCreatedGroup",
           "body": "GetLastCreatedGroup(${1:nothing})",
           "description": "function GetLastCreatedGroup takes nothing returns group",
           "scope": "source.vjass"
       },
        "fnCreateCorpseLocBJ": {
           "prefix": "fnCreateCorpseLocBJ",
           "body": "CreateCorpseLocBJ(${1:integer unitid},${2:location loc},${3:player whichPlayer})",
           "description": "function CreateCorpseLocBJ takes integer unitid, player whichPlayer, location loc returns unit",
           "scope": "source.vjass"
       },
        "fnUnitSuspendDecayBJ": {
           "prefix": "fnUnitSuspendDecayBJ",
           "body": "UnitSuspendDecayBJ(${1:boolean suspend},${2:unit whichUnit})",
           "description": "function UnitSuspendDecayBJ takes boolean suspend, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnDelayedSuspendDecayStopAnimEnum": {
           "prefix": "fnDelayedSuspendDecayStopAnimEnum",
           "body": "DelayedSuspendDecayStopAnimEnum(${1:nothing})",
           "description": "function DelayedSuspendDecayStopAnimEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnDelayedSuspendDecayBoneEnum": {
           "prefix": "fnDelayedSuspendDecayBoneEnum",
           "body": "DelayedSuspendDecayBoneEnum(${1:nothing})",
           "description": "function DelayedSuspendDecayBoneEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnDelayedSuspendDecayFleshEnum": {
           "prefix": "fnDelayedSuspendDecayFleshEnum",
           "body": "DelayedSuspendDecayFleshEnum(${1:nothing})",
           "description": "function DelayedSuspendDecayFleshEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnDelayedSuspendDecay": {
           "prefix": "fnDelayedSuspendDecay",
           "body": "DelayedSuspendDecay(${1:nothing})",
           "description": "function DelayedSuspendDecay takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnDelayedSuspendDecayCreate": {
           "prefix": "fnDelayedSuspendDecayCreate",
           "body": "DelayedSuspendDecayCreate(${1:nothing})",
           "description": "function DelayedSuspendDecayCreate takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCreatePermanentCorpseLocBJ": {
           "prefix": "fnCreatePermanentCorpseLocBJ",
           "body": "CreatePermanentCorpseLocBJ(${1:real facing},${2:integer unitid},${3:location loc},${4:player whichPlayer})",
           "description": "function CreatePermanentCorpseLocBJ takes integer style, integer unitid, player whichPlayer, location loc, real facing returns unit",
           "scope": "source.vjass"
       },
        "fnGetUnitStateSwap": {
           "prefix": "fnGetUnitStateSwap",
           "body": "GetUnitStateSwap(${1:unitstate whichState},${2:unit whichUnit})",
           "description": "function GetUnitStateSwap takes unitstate whichState, unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnGetUnitStatePercent": {
           "prefix": "fnGetUnitStatePercent",
           "body": "GetUnitStatePercent(${1:unitstate whichMaxState},${2:unit whichUnit})",
           "description": "function GetUnitStatePercent takes unit whichUnit, unitstate whichState, unitstate whichMaxState returns real",
           "scope": "source.vjass"
       },
        "fnGetUnitLifePercent": {
           "prefix": "fnGetUnitLifePercent",
           "body": "GetUnitLifePercent(${1:unit whichUnit})",
           "description": "function GetUnitLifePercent takes unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnGetUnitManaPercent": {
           "prefix": "fnGetUnitManaPercent",
           "body": "GetUnitManaPercent(${1:unit whichUnit})",
           "description": "function GetUnitManaPercent takes unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnSelectUnitSingle": {
           "prefix": "fnSelectUnitSingle",
           "body": "SelectUnitSingle(${1:unit whichUnit})",
           "description": "function SelectUnitSingle takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnSelectGroupBJEnum": {
           "prefix": "fnSelectGroupBJEnum",
           "body": "SelectGroupBJEnum(${1:nothing})",
           "description": "function SelectGroupBJEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSelectGroupBJ": {
           "prefix": "fnSelectGroupBJ",
           "body": "SelectGroupBJ(${1:group g})",
           "description": "function SelectGroupBJ takes group g returns nothing",
           "scope": "source.vjass"
       },
        "fnSelectUnitAdd": {
           "prefix": "fnSelectUnitAdd",
           "body": "SelectUnitAdd(${1:unit whichUnit})",
           "description": "function SelectUnitAdd takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnSelectUnitRemove": {
           "prefix": "fnSelectUnitRemove",
           "body": "SelectUnitRemove(${1:unit whichUnit})",
           "description": "function SelectUnitRemove takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnClearSelectionForPlayer": {
           "prefix": "fnClearSelectionForPlayer",
           "body": "ClearSelectionForPlayer(${1:player whichPlayer})",
           "description": "function ClearSelectionForPlayer takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSelectUnitForPlayerSingle": {
           "prefix": "fnSelectUnitForPlayerSingle",
           "body": "SelectUnitForPlayerSingle(${1:player whichPlayer},${2:unit whichUnit})",
           "description": "function SelectUnitForPlayerSingle takes unit whichUnit, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSelectGroupForPlayerBJ": {
           "prefix": "fnSelectGroupForPlayerBJ",
           "body": "SelectGroupForPlayerBJ(${1:player whichPlayer},${2:group g})",
           "description": "function SelectGroupForPlayerBJ takes group g, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSelectUnitAddForPlayer": {
           "prefix": "fnSelectUnitAddForPlayer",
           "body": "SelectUnitAddForPlayer(${1:player whichPlayer},${2:unit whichUnit})",
           "description": "function SelectUnitAddForPlayer takes unit whichUnit, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSelectUnitRemoveForPlayer": {
           "prefix": "fnSelectUnitRemoveForPlayer",
           "body": "SelectUnitRemoveForPlayer(${1:player whichPlayer},${2:unit whichUnit})",
           "description": "function SelectUnitRemoveForPlayer takes unit whichUnit, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitLifeBJ": {
           "prefix": "fnSetUnitLifeBJ",
           "body": "SetUnitLifeBJ(${1:real newValue},${2:unit whichUnit})",
           "description": "function SetUnitLifeBJ takes unit whichUnit, real newValue returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitManaBJ": {
           "prefix": "fnSetUnitManaBJ",
           "body": "SetUnitManaBJ(${1:real newValue},${2:unit whichUnit})",
           "description": "function SetUnitManaBJ takes unit whichUnit, real newValue returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitLifePercentBJ": {
           "prefix": "fnSetUnitLifePercentBJ",
           "body": "SetUnitLifePercentBJ(${1:real percent},${2:unit whichUnit})",
           "description": "function SetUnitLifePercentBJ takes unit whichUnit, real percent returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitManaPercentBJ": {
           "prefix": "fnSetUnitManaPercentBJ",
           "body": "SetUnitManaPercentBJ(${1:real percent},${2:unit whichUnit})",
           "description": "function SetUnitManaPercentBJ takes unit whichUnit, real percent returns nothing",
           "scope": "source.vjass"
       },
        "fnIsUnitDeadBJ": {
           "prefix": "fnIsUnitDeadBJ",
           "body": "IsUnitDeadBJ(${1:unit whichUnit})",
           "description": "function IsUnitDeadBJ takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitAliveBJ": {
           "prefix": "fnIsUnitAliveBJ",
           "body": "IsUnitAliveBJ(${1:unit whichUnit})",
           "description": "function IsUnitAliveBJ takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitGroupDeadBJEnum": {
           "prefix": "fnIsUnitGroupDeadBJEnum",
           "body": "IsUnitGroupDeadBJEnum(${1:nothing})",
           "description": "function IsUnitGroupDeadBJEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnIsUnitGroupDeadBJ": {
           "prefix": "fnIsUnitGroupDeadBJ",
           "body": "IsUnitGroupDeadBJ(${1:group g})",
           "description": "function IsUnitGroupDeadBJ takes group g returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitGroupEmptyBJEnum": {
           "prefix": "fnIsUnitGroupEmptyBJEnum",
           "body": "IsUnitGroupEmptyBJEnum(${1:nothing})",
           "description": "function IsUnitGroupEmptyBJEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnIsUnitGroupEmptyBJ": {
           "prefix": "fnIsUnitGroupEmptyBJ",
           "body": "IsUnitGroupEmptyBJ(${1:group g})",
           "description": "function IsUnitGroupEmptyBJ takes group g returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitGroupInRectBJEnum": {
           "prefix": "fnIsUnitGroupInRectBJEnum",
           "body": "IsUnitGroupInRectBJEnum(${1:nothing})",
           "description": "function IsUnitGroupInRectBJEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnIsUnitGroupInRectBJ": {
           "prefix": "fnIsUnitGroupInRectBJ",
           "body": "IsUnitGroupInRectBJ(${1:group g},${2:rect r})",
           "description": "function IsUnitGroupInRectBJ takes group g, rect r returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitHiddenBJ": {
           "prefix": "fnIsUnitHiddenBJ",
           "body": "IsUnitHiddenBJ(${1:unit whichUnit})",
           "description": "function IsUnitHiddenBJ takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnShowUnitHide": {
           "prefix": "fnShowUnitHide",
           "body": "ShowUnitHide(${1:unit whichUnit})",
           "description": "function ShowUnitHide takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnShowUnitShow": {
           "prefix": "fnShowUnitShow",
           "body": "ShowUnitShow(${1:unit whichUnit})",
           "description": "function ShowUnitShow takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnIssueHauntOrderAtLocBJFilter": {
           "prefix": "fnIssueHauntOrderAtLocBJFilter",
           "body": "IssueHauntOrderAtLocBJFilter(${1:nothing})",
           "description": "function IssueHauntOrderAtLocBJFilter takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueHauntOrderAtLocBJ": {
           "prefix": "fnIssueHauntOrderAtLocBJ",
           "body": "IssueHauntOrderAtLocBJ(${1:location loc},${2:unit whichPeon})",
           "description": "function IssueHauntOrderAtLocBJ takes unit whichPeon, location loc returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueBuildOrderByIdLocBJ": {
           "prefix": "fnIssueBuildOrderByIdLocBJ",
           "body": "IssueBuildOrderByIdLocBJ(${1:integer unitId},${2:location loc},${3:unit whichPeon})",
           "description": "function IssueBuildOrderByIdLocBJ takes unit whichPeon, integer unitId, location loc returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueTrainOrderByIdBJ": {
           "prefix": "fnIssueTrainOrderByIdBJ",
           "body": "IssueTrainOrderByIdBJ(${1:integer unitId},${2:unit whichUnit})",
           "description": "function IssueTrainOrderByIdBJ takes unit whichUnit, integer unitId returns boolean",
           "scope": "source.vjass"
       },
        "fnGroupTrainOrderByIdBJ": {
           "prefix": "fnGroupTrainOrderByIdBJ",
           "body": "GroupTrainOrderByIdBJ(${1:integer unitId},${2:group g})",
           "description": "function GroupTrainOrderByIdBJ takes group g, integer unitId returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueUpgradeOrderByIdBJ": {
           "prefix": "fnIssueUpgradeOrderByIdBJ",
           "body": "IssueUpgradeOrderByIdBJ(${1:integer techId},${2:unit whichUnit})",
           "description": "function IssueUpgradeOrderByIdBJ takes unit whichUnit, integer techId returns boolean",
           "scope": "source.vjass"
       },
        "fnGetAttackedUnitBJ": {
           "prefix": "fnGetAttackedUnitBJ",
           "body": "GetAttackedUnitBJ(${1:nothing})",
           "description": "function GetAttackedUnitBJ takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnSetUnitFlyHeightBJ": {
           "prefix": "fnSetUnitFlyHeightBJ",
           "body": "SetUnitFlyHeightBJ(${1:real rate},${2:unit whichUnit})",
           "description": "function SetUnitFlyHeightBJ takes unit whichUnit, real newHeight, real rate returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitTurnSpeedBJ": {
           "prefix": "fnSetUnitTurnSpeedBJ",
           "body": "SetUnitTurnSpeedBJ(${1:real turnSpeed},${2:unit whichUnit})",
           "description": "function SetUnitTurnSpeedBJ takes unit whichUnit, real turnSpeed returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitPropWindowBJ": {
           "prefix": "fnSetUnitPropWindowBJ",
           "body": "SetUnitPropWindowBJ(${1:real propWindow},${2:unit whichUnit})",
           "description": "function SetUnitPropWindowBJ takes unit whichUnit, real propWindow returns nothing",
           "scope": "source.vjass"
       },
        "fnGetUnitPropWindowBJ": {
           "prefix": "fnGetUnitPropWindowBJ",
           "body": "GetUnitPropWindowBJ(${1:unit whichUnit})",
           "description": "function GetUnitPropWindowBJ takes unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnGetUnitDefaultPropWindowBJ": {
           "prefix": "fnGetUnitDefaultPropWindowBJ",
           "body": "GetUnitDefaultPropWindowBJ(${1:unit whichUnit})",
           "description": "function GetUnitDefaultPropWindowBJ takes unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnSetUnitBlendTimeBJ": {
           "prefix": "fnSetUnitBlendTimeBJ",
           "body": "SetUnitBlendTimeBJ(${1:real blendTime},${2:unit whichUnit})",
           "description": "function SetUnitBlendTimeBJ takes unit whichUnit, real blendTime returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitAcquireRangeBJ": {
           "prefix": "fnSetUnitAcquireRangeBJ",
           "body": "SetUnitAcquireRangeBJ(${1:real acquireRange},${2:unit whichUnit})",
           "description": "function SetUnitAcquireRangeBJ takes unit whichUnit, real acquireRange returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitSetCanSleepBJ": {
           "prefix": "fnUnitSetCanSleepBJ",
           "body": "UnitSetCanSleepBJ(${1:boolean canSleep},${2:unit whichUnit})",
           "description": "function UnitSetCanSleepBJ takes unit whichUnit, boolean canSleep returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitCanSleepBJ": {
           "prefix": "fnUnitCanSleepBJ",
           "body": "UnitCanSleepBJ(${1:unit whichUnit})",
           "description": "function UnitCanSleepBJ takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitWakeUpBJ": {
           "prefix": "fnUnitWakeUpBJ",
           "body": "UnitWakeUpBJ(${1:unit whichUnit})",
           "description": "function UnitWakeUpBJ takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitIsSleepingBJ": {
           "prefix": "fnUnitIsSleepingBJ",
           "body": "UnitIsSleepingBJ(${1:unit whichUnit})",
           "description": "function UnitIsSleepingBJ takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnWakePlayerUnitsEnum": {
           "prefix": "fnWakePlayerUnitsEnum",
           "body": "WakePlayerUnitsEnum(${1:nothing})",
           "description": "function WakePlayerUnitsEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnWakePlayerUnits": {
           "prefix": "fnWakePlayerUnits",
           "body": "WakePlayerUnits(${1:player whichPlayer})",
           "description": "function WakePlayerUnits takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnEnableCreepSleepBJ": {
           "prefix": "fnEnableCreepSleepBJ",
           "body": "EnableCreepSleepBJ(${1:boolean enable})",
           "description": "function EnableCreepSleepBJ takes boolean enable returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitGenerateAlarms": {
           "prefix": "fnUnitGenerateAlarms",
           "body": "UnitGenerateAlarms(${1:boolean generate},${2:unit whichUnit})",
           "description": "function UnitGenerateAlarms takes unit whichUnit, boolean generate returns boolean",
           "scope": "source.vjass"
       },
        "fnDoesUnitGenerateAlarms": {
           "prefix": "fnDoesUnitGenerateAlarms",
           "body": "DoesUnitGenerateAlarms(${1:unit whichUnit})",
           "description": "function DoesUnitGenerateAlarms takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnPauseAllUnitsBJEnum": {
           "prefix": "fnPauseAllUnitsBJEnum",
           "body": "PauseAllUnitsBJEnum(${1:nothing})",
           "description": "function PauseAllUnitsBJEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnPauseAllUnitsBJ": {
           "prefix": "fnPauseAllUnitsBJ",
           "body": "PauseAllUnitsBJ(${1:boolean pause})",
           "description": "function PauseAllUnitsBJ takes boolean pause returns nothing",
           "scope": "source.vjass"
       },
        "fnPauseUnitBJ": {
           "prefix": "fnPauseUnitBJ",
           "body": "PauseUnitBJ(${1:boolean pause},${2:unit whichUnit})",
           "description": "function PauseUnitBJ takes boolean pause, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnIsUnitPausedBJ": {
           "prefix": "fnIsUnitPausedBJ",
           "body": "IsUnitPausedBJ(${1:unit whichUnit})",
           "description": "function IsUnitPausedBJ takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitPauseTimedLifeBJ": {
           "prefix": "fnUnitPauseTimedLifeBJ",
           "body": "UnitPauseTimedLifeBJ(${1:boolean flag},${2:unit whichUnit})",
           "description": "function UnitPauseTimedLifeBJ takes boolean flag, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitApplyTimedLifeBJ": {
           "prefix": "fnUnitApplyTimedLifeBJ",
           "body": "UnitApplyTimedLifeBJ(${1:real duration},${2:integer buffId},${3:unit whichUnit})",
           "description": "function UnitApplyTimedLifeBJ takes real duration, integer buffId, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitShareVisionBJ": {
           "prefix": "fnUnitShareVisionBJ",
           "body": "UnitShareVisionBJ(${1:player whichPlayer},${2:boolean share},${3:unit whichUnit})",
           "description": "function UnitShareVisionBJ takes boolean share, unit whichUnit, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitRemoveBuffsBJ": {
           "prefix": "fnUnitRemoveBuffsBJ",
           "body": "UnitRemoveBuffsBJ(${1:integer buffType},${2:unit whichUnit})",
           "description": "function UnitRemoveBuffsBJ takes integer buffType, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitRemoveBuffsExBJ": {
           "prefix": "fnUnitRemoveBuffsExBJ",
           "body": "UnitRemoveBuffsExBJ(${1:integer resist},${2:boolean bAura},${3:unit whichUnit})",
           "description": "function UnitRemoveBuffsExBJ takes integer polarity, integer resist, unit whichUnit, boolean bTLife, boolean bAura returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitCountBuffsExBJ": {
           "prefix": "fnUnitCountBuffsExBJ",
           "body": "UnitCountBuffsExBJ(${1:integer resist},${2:boolean bAura},${3:unit whichUnit})",
           "description": "function UnitCountBuffsExBJ takes integer polarity, integer resist, unit whichUnit, boolean bTLife, boolean bAura returns integer",
           "scope": "source.vjass"
       },
        "fnUnitRemoveAbilityBJ": {
           "prefix": "fnUnitRemoveAbilityBJ",
           "body": "UnitRemoveAbilityBJ(${1:integer abilityId},${2:unit whichUnit})",
           "description": "function UnitRemoveAbilityBJ takes integer abilityId, unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitAddAbilityBJ": {
           "prefix": "fnUnitAddAbilityBJ",
           "body": "UnitAddAbilityBJ(${1:integer abilityId},${2:unit whichUnit})",
           "description": "function UnitAddAbilityBJ takes integer abilityId, unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitRemoveTypeBJ": {
           "prefix": "fnUnitRemoveTypeBJ",
           "body": "UnitRemoveTypeBJ(${1:unittype whichType},${2:unit whichUnit})",
           "description": "function UnitRemoveTypeBJ takes unittype whichType, unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitAddTypeBJ": {
           "prefix": "fnUnitAddTypeBJ",
           "body": "UnitAddTypeBJ(${1:unittype whichType},${2:unit whichUnit})",
           "description": "function UnitAddTypeBJ takes unittype whichType, unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitMakeAbilityPermanentBJ": {
           "prefix": "fnUnitMakeAbilityPermanentBJ",
           "body": "UnitMakeAbilityPermanentBJ(${1:integer abilityId},${2:boolean permanent},${3:unit whichUnit})",
           "description": "function UnitMakeAbilityPermanentBJ takes boolean permanent, integer abilityId, unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnSetUnitExplodedBJ": {
           "prefix": "fnSetUnitExplodedBJ",
           "body": "SetUnitExplodedBJ(${1:boolean exploded},${2:unit whichUnit})",
           "description": "function SetUnitExplodedBJ takes unit whichUnit, boolean exploded returns nothing",
           "scope": "source.vjass"
       },
        "fnExplodeUnitBJ": {
           "prefix": "fnExplodeUnitBJ",
           "body": "ExplodeUnitBJ(${1:unit whichUnit})",
           "description": "function ExplodeUnitBJ takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnGetTransportUnitBJ": {
           "prefix": "fnGetTransportUnitBJ",
           "body": "GetTransportUnitBJ(${1:nothing})",
           "description": "function GetTransportUnitBJ takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetLoadedUnitBJ": {
           "prefix": "fnGetLoadedUnitBJ",
           "body": "GetLoadedUnitBJ(${1:nothing})",
           "description": "function GetLoadedUnitBJ takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnIsUnitInTransportBJ": {
           "prefix": "fnIsUnitInTransportBJ",
           "body": "IsUnitInTransportBJ(${1:unit whichTransport})",
           "description": "function IsUnitInTransportBJ takes unit whichUnit, unit whichTransport returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitLoadedBJ": {
           "prefix": "fnIsUnitLoadedBJ",
           "body": "IsUnitLoadedBJ(${1:unit whichUnit})",
           "description": "function IsUnitLoadedBJ takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitIllusionBJ": {
           "prefix": "fnIsUnitIllusionBJ",
           "body": "IsUnitIllusionBJ(${1:unit whichUnit})",
           "description": "function IsUnitIllusionBJ takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnReplaceUnitBJ": {
           "prefix": "fnReplaceUnitBJ",
           "body": "ReplaceUnitBJ(${1:integer unitStateMethod},${2:unit whichUnit})",
           "description": "function ReplaceUnitBJ takes unit whichUnit, integer newUnitId, integer unitStateMethod returns unit",
           "scope": "source.vjass"
       },
        "fnGetLastReplacedUnitBJ": {
           "prefix": "fnGetLastReplacedUnitBJ",
           "body": "GetLastReplacedUnitBJ(${1:nothing})",
           "description": "function GetLastReplacedUnitBJ takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnSetUnitPositionLocFacingBJ": {
           "prefix": "fnSetUnitPositionLocFacingBJ",
           "body": "SetUnitPositionLocFacingBJ(${1:real facing},${2:location loc},${3:unit whichUnit})",
           "description": "function SetUnitPositionLocFacingBJ takes unit whichUnit, location loc, real facing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitPositionLocFacingLocBJ": {
           "prefix": "fnSetUnitPositionLocFacingLocBJ",
           "body": "SetUnitPositionLocFacingLocBJ(${1:location lookAt},${2:unit whichUnit})",
           "description": "function SetUnitPositionLocFacingLocBJ takes unit whichUnit, location loc, location lookAt returns nothing",
           "scope": "source.vjass"
       },
        "fnAddItemToStockBJ": {
           "prefix": "fnAddItemToStockBJ",
           "body": "AddItemToStockBJ(${1:integer stockMax},${2:unit whichUnit})",
           "description": "function AddItemToStockBJ takes integer itemId, unit whichUnit, integer currentStock, integer stockMax returns nothing",
           "scope": "source.vjass"
       },
        "fnAddUnitToStockBJ": {
           "prefix": "fnAddUnitToStockBJ",
           "body": "AddUnitToStockBJ(${1:integer stockMax},${2:unit whichUnit})",
           "description": "function AddUnitToStockBJ takes integer unitId, unit whichUnit, integer currentStock, integer stockMax returns nothing",
           "scope": "source.vjass"
       },
        "fnRemoveItemFromStockBJ": {
           "prefix": "fnRemoveItemFromStockBJ",
           "body": "RemoveItemFromStockBJ(${1:integer itemId},${2:unit whichUnit})",
           "description": "function RemoveItemFromStockBJ takes integer itemId, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnRemoveUnitFromStockBJ": {
           "prefix": "fnRemoveUnitFromStockBJ",
           "body": "RemoveUnitFromStockBJ(${1:integer unitId},${2:unit whichUnit})",
           "description": "function RemoveUnitFromStockBJ takes integer unitId, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitUseFoodBJ": {
           "prefix": "fnSetUnitUseFoodBJ",
           "body": "SetUnitUseFoodBJ(${1:boolean enable},${2:unit whichUnit})",
           "description": "function SetUnitUseFoodBJ takes boolean enable, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitDamagePointLoc": {
           "prefix": "fnUnitDamagePointLoc",
           "body": "UnitDamagePointLoc(${1:real amount},${2:attacktype whichAttack},${3:location loc},${4:unit whichUnit},${5:damagetype whichDamage})",
           "description": "function UnitDamagePointLoc takes unit whichUnit, real delay, real radius, location loc, real amount, attacktype whichAttack, damagetype whichDamage returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitDamageTargetBJ": {
           "prefix": "fnUnitDamageTargetBJ",
           "body": "UnitDamageTargetBJ(${1:real amount},${2:damagetype whichDamage},${3:attacktype whichAttack},${4:unit target})",
           "description": "function UnitDamageTargetBJ takes unit whichUnit, unit target, real amount, attacktype whichAttack, damagetype whichDamage returns boolean",
           "scope": "source.vjass"
       },
        "fnCreateDestructableLoc": {
           "prefix": "fnCreateDestructableLoc",
           "body": "CreateDestructableLoc(${1:real scale},${2:integer variation},${3:location loc})",
           "description": "function CreateDestructableLoc takes integer objectid, location loc, real facing, real scale, integer variation returns destructable",
           "scope": "source.vjass"
       },
        "fnCreateDeadDestructableLocBJ": {
           "prefix": "fnCreateDeadDestructableLocBJ",
           "body": "CreateDeadDestructableLocBJ(${1:real scale},${2:integer variation},${3:location loc})",
           "description": "function CreateDeadDestructableLocBJ takes integer objectid, location loc, real facing, real scale, integer variation returns destructable",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedDestructable": {
           "prefix": "fnGetLastCreatedDestructable",
           "body": "GetLastCreatedDestructable(${1:nothing})",
           "description": "function GetLastCreatedDestructable takes nothing returns destructable",
           "scope": "source.vjass"
       },
        "fnShowDestructableBJ": {
           "prefix": "fnShowDestructableBJ",
           "body": "ShowDestructableBJ(${1:boolean flag},${2:destructable d})",
           "description": "function ShowDestructableBJ takes boolean flag, destructable d returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDestructableInvulnerableBJ": {
           "prefix": "fnSetDestructableInvulnerableBJ",
           "body": "SetDestructableInvulnerableBJ(${1:boolean flag},${2:destructable d})",
           "description": "function SetDestructableInvulnerableBJ takes destructable d, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnIsDestructableInvulnerableBJ": {
           "prefix": "fnIsDestructableInvulnerableBJ",
           "body": "IsDestructableInvulnerableBJ(${1:destructable d})",
           "description": "function IsDestructableInvulnerableBJ takes destructable d returns boolean",
           "scope": "source.vjass"
       },
        "fnGetDestructableLoc": {
           "prefix": "fnGetDestructableLoc",
           "body": "GetDestructableLoc(${1:destructable whichDestructable})",
           "description": "function GetDestructableLoc takes destructable whichDestructable returns location",
           "scope": "source.vjass"
       },
        "fnEnumDestructablesInRectAll": {
           "prefix": "fnEnumDestructablesInRectAll",
           "body": "EnumDestructablesInRectAll(${1:code actionFunc},${2:rect r})",
           "description": "function EnumDestructablesInRectAll takes rect r, code actionFunc returns nothing",
           "scope": "source.vjass"
       },
        "fnEnumDestructablesInCircleBJFilter": {
           "prefix": "fnEnumDestructablesInCircleBJFilter",
           "body": "EnumDestructablesInCircleBJFilter(${1:nothing})",
           "description": "function EnumDestructablesInCircleBJFilter takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnIsDestructableDeadBJ": {
           "prefix": "fnIsDestructableDeadBJ",
           "body": "IsDestructableDeadBJ(${1:destructable d})",
           "description": "function IsDestructableDeadBJ takes destructable d returns boolean",
           "scope": "source.vjass"
       },
        "fnIsDestructableAliveBJ": {
           "prefix": "fnIsDestructableAliveBJ",
           "body": "IsDestructableAliveBJ(${1:destructable d})",
           "description": "function IsDestructableAliveBJ takes destructable d returns boolean",
           "scope": "source.vjass"
       },
        "fnRandomDestructableInRectBJEnum": {
           "prefix": "fnRandomDestructableInRectBJEnum",
           "body": "RandomDestructableInRectBJEnum(${1:nothing})",
           "description": "function RandomDestructableInRectBJEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnRandomDestructableInRectBJ": {
           "prefix": "fnRandomDestructableInRectBJ",
           "body": "RandomDestructableInRectBJ(${1:boolexpr filter},${2:rect r})",
           "description": "function RandomDestructableInRectBJ takes rect r, boolexpr filter returns destructable",
           "scope": "source.vjass"
       },
        "fnRandomDestructableInRectSimpleBJ": {
           "prefix": "fnRandomDestructableInRectSimpleBJ",
           "body": "RandomDestructableInRectSimpleBJ(${1:rect r})",
           "description": "function RandomDestructableInRectSimpleBJ takes rect r returns destructable",
           "scope": "source.vjass"
       },
        "fnEnumDestructablesInCircleBJ": {
           "prefix": "fnEnumDestructablesInCircleBJ",
           "body": "EnumDestructablesInCircleBJ(${1:real radius},${2:code actionFunc},${3:location loc})",
           "description": "function EnumDestructablesInCircleBJ takes real radius, location loc, code actionFunc returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDestructableLifePercentBJ": {
           "prefix": "fnSetDestructableLifePercentBJ",
           "body": "SetDestructableLifePercentBJ(${1:real percent},${2:destructable d})",
           "description": "function SetDestructableLifePercentBJ takes destructable d, real percent returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDestructableMaxLifeBJ": {
           "prefix": "fnSetDestructableMaxLifeBJ",
           "body": "SetDestructableMaxLifeBJ(${1:real max},${2:destructable d})",
           "description": "function SetDestructableMaxLifeBJ takes destructable d, real max returns nothing",
           "scope": "source.vjass"
       },
        "fnModifyGateBJ": {
           "prefix": "fnModifyGateBJ",
           "body": "ModifyGateBJ(${1:integer gateOperation},${2:destructable d})",
           "description": "function ModifyGateBJ takes integer gateOperation, destructable d returns nothing",
           "scope": "source.vjass"
       },
        "fnGetElevatorHeight": {
           "prefix": "fnGetElevatorHeight",
           "body": "GetElevatorHeight(${1:destructable d})",
           "description": "function GetElevatorHeight takes destructable d returns integer",
           "scope": "source.vjass"
       },
        "fnChangeElevatorHeight": {
           "prefix": "fnChangeElevatorHeight",
           "body": "ChangeElevatorHeight(${1:integer newHeight},${2:destructable d})",
           "description": "function ChangeElevatorHeight takes destructable d, integer newHeight returns nothing",
           "scope": "source.vjass"
       },
        "fnNudgeUnitsInRectEnum": {
           "prefix": "fnNudgeUnitsInRectEnum",
           "body": "NudgeUnitsInRectEnum(${1:nothing})",
           "description": "function NudgeUnitsInRectEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnNudgeItemsInRectEnum": {
           "prefix": "fnNudgeItemsInRectEnum",
           "body": "NudgeItemsInRectEnum(${1:nothing})",
           "description": "function NudgeItemsInRectEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnNudgeObjectsInRect": {
           "prefix": "fnNudgeObjectsInRect",
           "body": "NudgeObjectsInRect(${1:rect nudgeArea})",
           "description": "function NudgeObjectsInRect takes rect nudgeArea returns nothing",
           "scope": "source.vjass"
       },
        "fnNearbyElevatorExistsEnum": {
           "prefix": "fnNearbyElevatorExistsEnum",
           "body": "NearbyElevatorExistsEnum(${1:nothing})",
           "description": "function NearbyElevatorExistsEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnNearbyElevatorExists": {
           "prefix": "fnNearbyElevatorExists",
           "body": "NearbyElevatorExists(${1:real y})",
           "description": "function NearbyElevatorExists takes real x, real y returns boolean",
           "scope": "source.vjass"
       },
        "fnFindElevatorWallBlockerEnum": {
           "prefix": "fnFindElevatorWallBlockerEnum",
           "body": "FindElevatorWallBlockerEnum(${1:nothing})",
           "description": "function FindElevatorWallBlockerEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnChangeElevatorWallBlocker": {
           "prefix": "fnChangeElevatorWallBlocker",
           "body": "ChangeElevatorWallBlocker(${1:real facing},${2:boolean open})",
           "description": "function ChangeElevatorWallBlocker takes real x, real y, real facing, boolean open returns nothing",
           "scope": "source.vjass"
       },
        "fnChangeElevatorWalls": {
           "prefix": "fnChangeElevatorWalls",
           "body": "ChangeElevatorWalls(${1:integer walls},${2:boolean open},${3:destructable d})",
           "description": "function ChangeElevatorWalls takes boolean open, integer walls, destructable d returns nothing",
           "scope": "source.vjass"
       },
        "fnWaygateActivateBJ": {
           "prefix": "fnWaygateActivateBJ",
           "body": "WaygateActivateBJ(${1:boolean activate},${2:unit waygate})",
           "description": "function WaygateActivateBJ takes boolean activate, unit waygate returns nothing",
           "scope": "source.vjass"
       },
        "fnWaygateIsActiveBJ": {
           "prefix": "fnWaygateIsActiveBJ",
           "body": "WaygateIsActiveBJ(${1:unit waygate})",
           "description": "function WaygateIsActiveBJ takes unit waygate returns boolean",
           "scope": "source.vjass"
       },
        "fnWaygateSetDestinationLocBJ": {
           "prefix": "fnWaygateSetDestinationLocBJ",
           "body": "WaygateSetDestinationLocBJ(${1:location loc},${2:unit waygate})",
           "description": "function WaygateSetDestinationLocBJ takes unit waygate, location loc returns nothing",
           "scope": "source.vjass"
       },
        "fnWaygateGetDestinationLocBJ": {
           "prefix": "fnWaygateGetDestinationLocBJ",
           "body": "WaygateGetDestinationLocBJ(${1:unit waygate})",
           "description": "function WaygateGetDestinationLocBJ takes unit waygate returns location",
           "scope": "source.vjass"
       },
        "fnUnitSetUsesAltIconBJ": {
           "prefix": "fnUnitSetUsesAltIconBJ",
           "body": "UnitSetUsesAltIconBJ(${1:boolean flag},${2:unit whichUnit})",
           "description": "function UnitSetUsesAltIconBJ takes boolean flag, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnForceUIKeyBJ": {
           "prefix": "fnForceUIKeyBJ",
           "body": "ForceUIKeyBJ(${1:player whichPlayer},${2:string key})",
           "description": "function ForceUIKeyBJ takes player whichPlayer, string key returns nothing",
           "scope": "source.vjass"
       },
        "fnForceUICancelBJ": {
           "prefix": "fnForceUICancelBJ",
           "body": "ForceUICancelBJ(${1:player whichPlayer})",
           "description": "function ForceUICancelBJ takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnForGroupBJ": {
           "prefix": "fnForGroupBJ",
           "body": "ForGroupBJ(${1:code callback},${2:group whichGroup})",
           "description": "function ForGroupBJ takes group whichGroup, code callback returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupAddUnitSimple": {
           "prefix": "fnGroupAddUnitSimple",
           "body": "GroupAddUnitSimple(${1:group whichGroup},${2:unit whichUnit})",
           "description": "function GroupAddUnitSimple takes unit whichUnit, group whichGroup returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupRemoveUnitSimple": {
           "prefix": "fnGroupRemoveUnitSimple",
           "body": "GroupRemoveUnitSimple(${1:group whichGroup},${2:unit whichUnit})",
           "description": "function GroupRemoveUnitSimple takes unit whichUnit, group whichGroup returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupAddGroupEnum": {
           "prefix": "fnGroupAddGroupEnum",
           "body": "GroupAddGroupEnum(${1:nothing})",
           "description": "function GroupAddGroupEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupAddGroup": {
           "prefix": "fnGroupAddGroup",
           "body": "GroupAddGroup(${1:group destGroup})",
           "description": "function GroupAddGroup takes group sourceGroup, group destGroup returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupRemoveGroupEnum": {
           "prefix": "fnGroupRemoveGroupEnum",
           "body": "GroupRemoveGroupEnum(${1:nothing})",
           "description": "function GroupRemoveGroupEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupRemoveGroup": {
           "prefix": "fnGroupRemoveGroup",
           "body": "GroupRemoveGroup(${1:group destGroup})",
           "description": "function GroupRemoveGroup takes group sourceGroup, group destGroup returns nothing",
           "scope": "source.vjass"
       },
        "fnForceAddPlayerSimple": {
           "prefix": "fnForceAddPlayerSimple",
           "body": "ForceAddPlayerSimple(${1:player whichPlayer},${2:force whichForce})",
           "description": "function ForceAddPlayerSimple takes player whichPlayer, force whichForce returns nothing",
           "scope": "source.vjass"
       },
        "fnForceRemovePlayerSimple": {
           "prefix": "fnForceRemovePlayerSimple",
           "body": "ForceRemovePlayerSimple(${1:player whichPlayer},${2:force whichForce})",
           "description": "function ForceRemovePlayerSimple takes player whichPlayer, force whichForce returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupPickRandomUnitEnum": {
           "prefix": "fnGroupPickRandomUnitEnum",
           "body": "GroupPickRandomUnitEnum(${1:nothing})",
           "description": "function GroupPickRandomUnitEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupPickRandomUnit": {
           "prefix": "fnGroupPickRandomUnit",
           "body": "GroupPickRandomUnit(${1:group whichGroup})",
           "description": "function GroupPickRandomUnit takes group whichGroup returns unit",
           "scope": "source.vjass"
       },
        "fnForcePickRandomPlayerEnum": {
           "prefix": "fnForcePickRandomPlayerEnum",
           "body": "ForcePickRandomPlayerEnum(${1:nothing})",
           "description": "function ForcePickRandomPlayerEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnForcePickRandomPlayer": {
           "prefix": "fnForcePickRandomPlayer",
           "body": "ForcePickRandomPlayer(${1:force whichForce})",
           "description": "function ForcePickRandomPlayer takes force whichForce returns player",
           "scope": "source.vjass"
       },
        "fnEnumUnitsSelected": {
           "prefix": "fnEnumUnitsSelected",
           "body": "EnumUnitsSelected(${1:player whichPlayer},${2:code enumAction},${3:boolexpr enumFilter})",
           "description": "function EnumUnitsSelected takes player whichPlayer, boolexpr enumFilter, code enumAction returns nothing",
           "scope": "source.vjass"
       },
        "fnGetUnitsInRectMatching": {
           "prefix": "fnGetUnitsInRectMatching",
           "body": "GetUnitsInRectMatching(${1:boolexpr filter},${2:rect r})",
           "description": "function GetUnitsInRectMatching takes rect r, boolexpr filter returns group",
           "scope": "source.vjass"
       },
        "fnGetUnitsInRectAll": {
           "prefix": "fnGetUnitsInRectAll",
           "body": "GetUnitsInRectAll(${1:rect r})",
           "description": "function GetUnitsInRectAll takes rect r returns group",
           "scope": "source.vjass"
       },
        "fnGetUnitsInRectOfPlayerFilter": {
           "prefix": "fnGetUnitsInRectOfPlayerFilter",
           "body": "GetUnitsInRectOfPlayerFilter(${1:nothing})",
           "description": "function GetUnitsInRectOfPlayerFilter takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnGetUnitsInRectOfPlayer": {
           "prefix": "fnGetUnitsInRectOfPlayer",
           "body": "GetUnitsInRectOfPlayer(${1:player whichPlayer},${2:rect r})",
           "description": "function GetUnitsInRectOfPlayer takes rect r, player whichPlayer returns group",
           "scope": "source.vjass"
       },
        "fnGetUnitsInRangeOfLocMatching": {
           "prefix": "fnGetUnitsInRangeOfLocMatching",
           "body": "GetUnitsInRangeOfLocMatching(${1:real radius},${2:location whichLocation},${3:boolexpr filter})",
           "description": "function GetUnitsInRangeOfLocMatching takes real radius, location whichLocation, boolexpr filter returns group",
           "scope": "source.vjass"
       },
        "fnGetUnitsInRangeOfLocAll": {
           "prefix": "fnGetUnitsInRangeOfLocAll",
           "body": "GetUnitsInRangeOfLocAll(${1:real radius},${2:location whichLocation})",
           "description": "function GetUnitsInRangeOfLocAll takes real radius, location whichLocation returns group",
           "scope": "source.vjass"
       },
        "fnGetUnitsOfTypeIdAllFilter": {
           "prefix": "fnGetUnitsOfTypeIdAllFilter",
           "body": "GetUnitsOfTypeIdAllFilter(${1:nothing})",
           "description": "function GetUnitsOfTypeIdAllFilter takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnGetUnitsOfTypeIdAll": {
           "prefix": "fnGetUnitsOfTypeIdAll",
           "body": "GetUnitsOfTypeIdAll(${1:integer unitid})",
           "description": "function GetUnitsOfTypeIdAll takes integer unitid returns group",
           "scope": "source.vjass"
       },
        "fnGetUnitsOfPlayerMatching": {
           "prefix": "fnGetUnitsOfPlayerMatching",
           "body": "GetUnitsOfPlayerMatching(${1:player whichPlayer},${2:boolexpr filter})",
           "description": "function GetUnitsOfPlayerMatching takes player whichPlayer, boolexpr filter returns group",
           "scope": "source.vjass"
       },
        "fnGetUnitsOfPlayerAll": {
           "prefix": "fnGetUnitsOfPlayerAll",
           "body": "GetUnitsOfPlayerAll(${1:player whichPlayer})",
           "description": "function GetUnitsOfPlayerAll takes player whichPlayer returns group",
           "scope": "source.vjass"
       },
        "fnGetUnitsOfPlayerAndTypeIdFilter": {
           "prefix": "fnGetUnitsOfPlayerAndTypeIdFilter",
           "body": "GetUnitsOfPlayerAndTypeIdFilter(${1:nothing})",
           "description": "function GetUnitsOfPlayerAndTypeIdFilter takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnGetUnitsOfPlayerAndTypeId": {
           "prefix": "fnGetUnitsOfPlayerAndTypeId",
           "body": "GetUnitsOfPlayerAndTypeId(${1:player whichPlayer},${2:integer unitid})",
           "description": "function GetUnitsOfPlayerAndTypeId takes player whichPlayer, integer unitid returns group",
           "scope": "source.vjass"
       },
        "fnGetUnitsSelectedAll": {
           "prefix": "fnGetUnitsSelectedAll",
           "body": "GetUnitsSelectedAll(${1:player whichPlayer})",
           "description": "function GetUnitsSelectedAll takes player whichPlayer returns group",
           "scope": "source.vjass"
       },
        "fnGetForceOfPlayer": {
           "prefix": "fnGetForceOfPlayer",
           "body": "GetForceOfPlayer(${1:player whichPlayer})",
           "description": "function GetForceOfPlayer takes player whichPlayer returns force",
           "scope": "source.vjass"
       },
        "fnGetPlayersAll": {
           "prefix": "fnGetPlayersAll",
           "body": "GetPlayersAll(${1:nothing})",
           "description": "function GetPlayersAll takes nothing returns force",
           "scope": "source.vjass"
       },
        "fnGetPlayersByMapControl": {
           "prefix": "fnGetPlayersByMapControl",
           "body": "GetPlayersByMapControl(${1:mapcontrol whichControl})",
           "description": "function GetPlayersByMapControl takes mapcontrol whichControl returns force",
           "scope": "source.vjass"
       },
        "fnGetPlayersAllies": {
           "prefix": "fnGetPlayersAllies",
           "body": "GetPlayersAllies(${1:player whichPlayer})",
           "description": "function GetPlayersAllies takes player whichPlayer returns force",
           "scope": "source.vjass"
       },
        "fnGetPlayersEnemies": {
           "prefix": "fnGetPlayersEnemies",
           "body": "GetPlayersEnemies(${1:player whichPlayer})",
           "description": "function GetPlayersEnemies takes player whichPlayer returns force",
           "scope": "source.vjass"
       },
        "fnGetPlayersMatching": {
           "prefix": "fnGetPlayersMatching",
           "body": "GetPlayersMatching(${1:boolexpr filter})",
           "description": "function GetPlayersMatching takes boolexpr filter returns force",
           "scope": "source.vjass"
       },
        "fnCountUnitsInGroupEnum": {
           "prefix": "fnCountUnitsInGroupEnum",
           "body": "CountUnitsInGroupEnum(${1:nothing})",
           "description": "function CountUnitsInGroupEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCountUnitsInGroup": {
           "prefix": "fnCountUnitsInGroup",
           "body": "CountUnitsInGroup(${1:group g})",
           "description": "function CountUnitsInGroup takes group g returns integer",
           "scope": "source.vjass"
       },
        "fnCountPlayersInForceEnum": {
           "prefix": "fnCountPlayersInForceEnum",
           "body": "CountPlayersInForceEnum(${1:nothing})",
           "description": "function CountPlayersInForceEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCountPlayersInForceBJ": {
           "prefix": "fnCountPlayersInForceBJ",
           "body": "CountPlayersInForceBJ(${1:force f})",
           "description": "function CountPlayersInForceBJ takes force f returns integer",
           "scope": "source.vjass"
       },
        "fnGetRandomSubGroupEnum": {
           "prefix": "fnGetRandomSubGroupEnum",
           "body": "GetRandomSubGroupEnum(${1:nothing})",
           "description": "function GetRandomSubGroupEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnGetRandomSubGroup": {
           "prefix": "fnGetRandomSubGroup",
           "body": "GetRandomSubGroup(${1:integer count},${2:group sourceGroup})",
           "description": "function GetRandomSubGroup takes integer count, group sourceGroup returns group",
           "scope": "source.vjass"
       },
        "fnLivingPlayerUnitsOfTypeIdFilter": {
           "prefix": "fnLivingPlayerUnitsOfTypeIdFilter",
           "body": "LivingPlayerUnitsOfTypeIdFilter(${1:nothing})",
           "description": "function LivingPlayerUnitsOfTypeIdFilter takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnCountLivingPlayerUnitsOfTypeId": {
           "prefix": "fnCountLivingPlayerUnitsOfTypeId",
           "body": "CountLivingPlayerUnitsOfTypeId(${1:integer unitId},${2:player whichPlayer})",
           "description": "function CountLivingPlayerUnitsOfTypeId takes integer unitId, player whichPlayer returns integer",
           "scope": "source.vjass"
       },
        "fnResetUnitAnimation": {
           "prefix": "fnResetUnitAnimation",
           "body": "ResetUnitAnimation(${1:unit whichUnit})",
           "description": "function ResetUnitAnimation takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitTimeScalePercent": {
           "prefix": "fnSetUnitTimeScalePercent",
           "body": "SetUnitTimeScalePercent(${1:real percentScale},${2:unit whichUnit})",
           "description": "function SetUnitTimeScalePercent takes unit whichUnit, real percentScale returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitScalePercent": {
           "prefix": "fnSetUnitScalePercent",
           "body": "SetUnitScalePercent(${1:real percentScaleZ},${2:unit whichUnit})",
           "description": "function SetUnitScalePercent takes unit whichUnit, real percentScaleX, real percentScaleY, real percentScaleZ returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitVertexColorBJ": {
           "prefix": "fnSetUnitVertexColorBJ",
           "body": "SetUnitVertexColorBJ(${1:real transparency},${2:unit whichUnit})",
           "description": "function SetUnitVertexColorBJ takes unit whichUnit, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitAddIndicatorBJ": {
           "prefix": "fnUnitAddIndicatorBJ",
           "body": "UnitAddIndicatorBJ(${1:real transparency},${2:unit whichUnit})",
           "description": "function UnitAddIndicatorBJ takes unit whichUnit, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnDestructableAddIndicatorBJ": {
           "prefix": "fnDestructableAddIndicatorBJ",
           "body": "DestructableAddIndicatorBJ(${1:real transparency},${2:destructable whichDestructable})",
           "description": "function DestructableAddIndicatorBJ takes destructable whichDestructable, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnItemAddIndicatorBJ": {
           "prefix": "fnItemAddIndicatorBJ",
           "body": "ItemAddIndicatorBJ(${1:real transparency},${2:item whichItem})",
           "description": "function ItemAddIndicatorBJ takes item whichItem, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitFacingToFaceLocTimed": {
           "prefix": "fnSetUnitFacingToFaceLocTimed",
           "body": "SetUnitFacingToFaceLocTimed(${1:real duration},${2:location target},${3:unit whichUnit})",
           "description": "function SetUnitFacingToFaceLocTimed takes unit whichUnit, location target, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitFacingToFaceUnitTimed": {
           "prefix": "fnSetUnitFacingToFaceUnitTimed",
           "body": "SetUnitFacingToFaceUnitTimed(${1:real duration},${2:unit target})",
           "description": "function SetUnitFacingToFaceUnitTimed takes unit whichUnit, unit target, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnQueueUnitAnimationBJ": {
           "prefix": "fnQueueUnitAnimationBJ",
           "body": "QueueUnitAnimationBJ(${1:string whichAnimation},${2:unit whichUnit})",
           "description": "function QueueUnitAnimationBJ takes unit whichUnit, string whichAnimation returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDestructableAnimationBJ": {
           "prefix": "fnSetDestructableAnimationBJ",
           "body": "SetDestructableAnimationBJ(${1:string whichAnimation},${2:destructable d})",
           "description": "function SetDestructableAnimationBJ takes destructable d, string whichAnimation returns nothing",
           "scope": "source.vjass"
       },
        "fnQueueDestructableAnimationBJ": {
           "prefix": "fnQueueDestructableAnimationBJ",
           "body": "QueueDestructableAnimationBJ(${1:string whichAnimation},${2:destructable d})",
           "description": "function QueueDestructableAnimationBJ takes destructable d, string whichAnimation returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDestAnimationSpeedPercent": {
           "prefix": "fnSetDestAnimationSpeedPercent",
           "body": "SetDestAnimationSpeedPercent(${1:real percentScale},${2:destructable d})",
           "description": "function SetDestAnimationSpeedPercent takes destructable d, real percentScale returns nothing",
           "scope": "source.vjass"
       },
        "fnDialogDisplayBJ": {
           "prefix": "fnDialogDisplayBJ",
           "body": "DialogDisplayBJ(${1:player whichPlayer},${2:boolean flag},${3:dialog whichDialog})",
           "description": "function DialogDisplayBJ takes boolean flag, dialog whichDialog, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnDialogSetMessageBJ": {
           "prefix": "fnDialogSetMessageBJ",
           "body": "DialogSetMessageBJ(${1:string message},${2:dialog whichDialog})",
           "description": "function DialogSetMessageBJ takes dialog whichDialog, string message returns nothing",
           "scope": "source.vjass"
       },
        "fnDialogAddButtonBJ": {
           "prefix": "fnDialogAddButtonBJ",
           "body": "DialogAddButtonBJ(${1:string buttonText},${2:dialog whichDialog})",
           "description": "function DialogAddButtonBJ takes dialog whichDialog, string buttonText returns button",
           "scope": "source.vjass"
       },
        "fnDialogAddButtonWithHotkeyBJ": {
           "prefix": "fnDialogAddButtonWithHotkeyBJ",
           "body": "DialogAddButtonWithHotkeyBJ(${1:integer hotkey},${2:string buttonText},${3:dialog whichDialog})",
           "description": "function DialogAddButtonWithHotkeyBJ takes dialog whichDialog, string buttonText, integer hotkey returns button",
           "scope": "source.vjass"
       },
        "fnDialogClearBJ": {
           "prefix": "fnDialogClearBJ",
           "body": "DialogClearBJ(${1:dialog whichDialog})",
           "description": "function DialogClearBJ takes dialog whichDialog returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedButtonBJ": {
           "prefix": "fnGetLastCreatedButtonBJ",
           "body": "GetLastCreatedButtonBJ(${1:nothing})",
           "description": "function GetLastCreatedButtonBJ takes nothing returns button",
           "scope": "source.vjass"
       },
        "fnGetClickedButtonBJ": {
           "prefix": "fnGetClickedButtonBJ",
           "body": "GetClickedButtonBJ(${1:nothing})",
           "description": "function GetClickedButtonBJ takes nothing returns button",
           "scope": "source.vjass"
       },
        "fnGetClickedDialogBJ": {
           "prefix": "fnGetClickedDialogBJ",
           "body": "GetClickedDialogBJ(${1:nothing})",
           "description": "function GetClickedDialogBJ takes nothing returns dialog",
           "scope": "source.vjass"
       },
        "fnSetPlayerAllianceBJ": {
           "prefix": "fnSetPlayerAllianceBJ",
           "body": "SetPlayerAllianceBJ(${1:player otherPlayer},${2:boolean value},${3:alliancetype whichAllianceSetting})",
           "description": "function SetPlayerAllianceBJ takes player sourcePlayer, alliancetype whichAllianceSetting, boolean value, player otherPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerAllianceStateAllyBJ": {
           "prefix": "fnSetPlayerAllianceStateAllyBJ",
           "body": "SetPlayerAllianceStateAllyBJ(${1:player otherPlayer},${2:boolean flag})",
           "description": "function SetPlayerAllianceStateAllyBJ takes player sourcePlayer, player otherPlayer, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerAllianceStateVisionBJ": {
           "prefix": "fnSetPlayerAllianceStateVisionBJ",
           "body": "SetPlayerAllianceStateVisionBJ(${1:player otherPlayer},${2:boolean flag})",
           "description": "function SetPlayerAllianceStateVisionBJ takes player sourcePlayer, player otherPlayer, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerAllianceStateControlBJ": {
           "prefix": "fnSetPlayerAllianceStateControlBJ",
           "body": "SetPlayerAllianceStateControlBJ(${1:player otherPlayer},${2:boolean flag})",
           "description": "function SetPlayerAllianceStateControlBJ takes player sourcePlayer, player otherPlayer, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerAllianceStateFullControlBJ": {
           "prefix": "fnSetPlayerAllianceStateFullControlBJ",
           "body": "SetPlayerAllianceStateFullControlBJ(${1:player otherPlayer},${2:boolean flag})",
           "description": "function SetPlayerAllianceStateFullControlBJ takes player sourcePlayer, player otherPlayer, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerAllianceStateBJ": {
           "prefix": "fnSetPlayerAllianceStateBJ",
           "body": "SetPlayerAllianceStateBJ(${1:player otherPlayer},${2:integer allianceState})",
           "description": "function SetPlayerAllianceStateBJ takes player sourcePlayer, player otherPlayer, integer allianceState returns nothing",
           "scope": "source.vjass"
       },
        "fnSetForceAllianceStateBJ": {
           "prefix": "fnSetForceAllianceStateBJ",
           "body": "SetForceAllianceStateBJ(${1:integer allianceState},${2:force targetForce})",
           "description": "function SetForceAllianceStateBJ takes force sourceForce, force targetForce, integer allianceState returns nothing",
           "scope": "source.vjass"
       },
        "fnPlayersAreCoAllied": {
           "prefix": "fnPlayersAreCoAllied",
           "body": "PlayersAreCoAllied(${1:player playerB})",
           "description": "function PlayersAreCoAllied takes player playerA, player playerB returns boolean",
           "scope": "source.vjass"
       },
        "fnShareEverythingWithTeamAI": {
           "prefix": "fnShareEverythingWithTeamAI",
           "body": "ShareEverythingWithTeamAI(${1:player whichPlayer})",
           "description": "function ShareEverythingWithTeamAI takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnShareEverythingWithTeam": {
           "prefix": "fnShareEverythingWithTeam",
           "body": "ShareEverythingWithTeam(${1:player whichPlayer})",
           "description": "function ShareEverythingWithTeam takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnConfigureNeutralVictim": {
           "prefix": "fnConfigureNeutralVictim",
           "body": "ConfigureNeutralVictim(${1:nothing})",
           "description": "function ConfigureNeutralVictim takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMakeUnitsPassiveForPlayerEnum": {
           "prefix": "fnMakeUnitsPassiveForPlayerEnum",
           "body": "MakeUnitsPassiveForPlayerEnum(${1:nothing})",
           "description": "function MakeUnitsPassiveForPlayerEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMakeUnitsPassiveForPlayer": {
           "prefix": "fnMakeUnitsPassiveForPlayer",
           "body": "MakeUnitsPassiveForPlayer(${1:player whichPlayer})",
           "description": "function MakeUnitsPassiveForPlayer takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnMakeUnitsPassiveForTeam": {
           "prefix": "fnMakeUnitsPassiveForTeam",
           "body": "MakeUnitsPassiveForTeam(${1:player whichPlayer})",
           "description": "function MakeUnitsPassiveForTeam takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnAllowVictoryDefeat": {
           "prefix": "fnAllowVictoryDefeat",
           "body": "AllowVictoryDefeat(${1:playergameresult gameResult})",
           "description": "function AllowVictoryDefeat takes playergameresult gameResult returns boolean",
           "scope": "source.vjass"
       },
        "fnEndGameBJ": {
           "prefix": "fnEndGameBJ",
           "body": "EndGameBJ(${1:nothing})",
           "description": "function EndGameBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeVictoryDialogBJ": {
           "prefix": "fnMeleeVictoryDialogBJ",
           "body": "MeleeVictoryDialogBJ(${1:player whichPlayer},${2:boolean leftGame})",
           "description": "function MeleeVictoryDialogBJ takes player whichPlayer, boolean leftGame returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeDefeatDialogBJ": {
           "prefix": "fnMeleeDefeatDialogBJ",
           "body": "MeleeDefeatDialogBJ(${1:player whichPlayer},${2:boolean leftGame})",
           "description": "function MeleeDefeatDialogBJ takes player whichPlayer, boolean leftGame returns nothing",
           "scope": "source.vjass"
       },
        "fnGameOverDialogBJ": {
           "prefix": "fnGameOverDialogBJ",
           "body": "GameOverDialogBJ(${1:player whichPlayer},${2:boolean leftGame})",
           "description": "function GameOverDialogBJ takes player whichPlayer, boolean leftGame returns nothing",
           "scope": "source.vjass"
       },
        "fnRemovePlayerPreserveUnitsBJ": {
           "prefix": "fnRemovePlayerPreserveUnitsBJ",
           "body": "RemovePlayerPreserveUnitsBJ(${1:player whichPlayer},${2:playergameresult gameResult},${3:boolean leftGame})",
           "description": "function RemovePlayerPreserveUnitsBJ takes player whichPlayer, playergameresult gameResult, boolean leftGame returns nothing",
           "scope": "source.vjass"
       },
        "fnCustomVictoryOkBJ": {
           "prefix": "fnCustomVictoryOkBJ",
           "body": "CustomVictoryOkBJ(${1:nothing})",
           "description": "function CustomVictoryOkBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCustomVictoryQuitBJ": {
           "prefix": "fnCustomVictoryQuitBJ",
           "body": "CustomVictoryQuitBJ(${1:nothing})",
           "description": "function CustomVictoryQuitBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCustomVictoryDialogBJ": {
           "prefix": "fnCustomVictoryDialogBJ",
           "body": "CustomVictoryDialogBJ(${1:player whichPlayer})",
           "description": "function CustomVictoryDialogBJ takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnCustomVictorySkipBJ": {
           "prefix": "fnCustomVictorySkipBJ",
           "body": "CustomVictorySkipBJ(${1:player whichPlayer})",
           "description": "function CustomVictorySkipBJ takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnCustomVictoryBJ": {
           "prefix": "fnCustomVictoryBJ",
           "body": "CustomVictoryBJ(${1:player whichPlayer},${2:boolean showScores})",
           "description": "function CustomVictoryBJ takes player whichPlayer, boolean showDialog, boolean showScores returns nothing",
           "scope": "source.vjass"
       },
        "fnCustomDefeatRestartBJ": {
           "prefix": "fnCustomDefeatRestartBJ",
           "body": "CustomDefeatRestartBJ(${1:nothing})",
           "description": "function CustomDefeatRestartBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCustomDefeatReduceDifficultyBJ": {
           "prefix": "fnCustomDefeatReduceDifficultyBJ",
           "body": "CustomDefeatReduceDifficultyBJ(${1:nothing})",
           "description": "function CustomDefeatReduceDifficultyBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCustomDefeatLoadBJ": {
           "prefix": "fnCustomDefeatLoadBJ",
           "body": "CustomDefeatLoadBJ(${1:nothing})",
           "description": "function CustomDefeatLoadBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCustomDefeatQuitBJ": {
           "prefix": "fnCustomDefeatQuitBJ",
           "body": "CustomDefeatQuitBJ(${1:nothing})",
           "description": "function CustomDefeatQuitBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCustomDefeatDialogBJ": {
           "prefix": "fnCustomDefeatDialogBJ",
           "body": "CustomDefeatDialogBJ(${1:player whichPlayer},${2:string message})",
           "description": "function CustomDefeatDialogBJ takes player whichPlayer, string message returns nothing",
           "scope": "source.vjass"
       },
        "fnCustomDefeatBJ": {
           "prefix": "fnCustomDefeatBJ",
           "body": "CustomDefeatBJ(${1:player whichPlayer},${2:string message})",
           "description": "function CustomDefeatBJ takes player whichPlayer, string message returns nothing",
           "scope": "source.vjass"
       },
        "fnSetNextLevelBJ": {
           "prefix": "fnSetNextLevelBJ",
           "body": "SetNextLevelBJ(${1:string nextLevel})",
           "description": "function SetNextLevelBJ takes string nextLevel returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerOnScoreScreenBJ": {
           "prefix": "fnSetPlayerOnScoreScreenBJ",
           "body": "SetPlayerOnScoreScreenBJ(${1:player whichPlayer},${2:boolean flag})",
           "description": "function SetPlayerOnScoreScreenBJ takes boolean flag, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnCreateQuestBJ": {
           "prefix": "fnCreateQuestBJ",
           "body": "CreateQuestBJ(${1:integer questType},${2:string iconPath})",
           "description": "function CreateQuestBJ takes integer questType, string title, string description, string iconPath returns quest",
           "scope": "source.vjass"
       },
        "fnDestroyQuestBJ": {
           "prefix": "fnDestroyQuestBJ",
           "body": "DestroyQuestBJ(${1:quest whichQuest})",
           "description": "function DestroyQuestBJ takes quest whichQuest returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestSetEnabledBJ": {
           "prefix": "fnQuestSetEnabledBJ",
           "body": "QuestSetEnabledBJ(${1:quest whichQuest},${2:boolean enabled})",
           "description": "function QuestSetEnabledBJ takes boolean enabled, quest whichQuest returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestSetTitleBJ": {
           "prefix": "fnQuestSetTitleBJ",
           "body": "QuestSetTitleBJ(${1:quest whichQuest},${2:string title})",
           "description": "function QuestSetTitleBJ takes quest whichQuest, string title returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestSetDescriptionBJ": {
           "prefix": "fnQuestSetDescriptionBJ",
           "body": "QuestSetDescriptionBJ(${1:quest whichQuest},${2:string description})",
           "description": "function QuestSetDescriptionBJ takes quest whichQuest, string description returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestSetCompletedBJ": {
           "prefix": "fnQuestSetCompletedBJ",
           "body": "QuestSetCompletedBJ(${1:boolean completed},${2:quest whichQuest})",
           "description": "function QuestSetCompletedBJ takes quest whichQuest, boolean completed returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestSetFailedBJ": {
           "prefix": "fnQuestSetFailedBJ",
           "body": "QuestSetFailedBJ(${1:boolean failed},${2:quest whichQuest})",
           "description": "function QuestSetFailedBJ takes quest whichQuest, boolean failed returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestSetDiscoveredBJ": {
           "prefix": "fnQuestSetDiscoveredBJ",
           "body": "QuestSetDiscoveredBJ(${1:boolean discovered},${2:quest whichQuest})",
           "description": "function QuestSetDiscoveredBJ takes quest whichQuest, boolean discovered returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedQuestBJ": {
           "prefix": "fnGetLastCreatedQuestBJ",
           "body": "GetLastCreatedQuestBJ(${1:nothing})",
           "description": "function GetLastCreatedQuestBJ takes nothing returns quest",
           "scope": "source.vjass"
       },
        "fnCreateQuestItemBJ": {
           "prefix": "fnCreateQuestItemBJ",
           "body": "CreateQuestItemBJ(${1:quest whichQuest},${2:string description})",
           "description": "function CreateQuestItemBJ takes quest whichQuest, string description returns questitem",
           "scope": "source.vjass"
       },
        "fnQuestItemSetDescriptionBJ": {
           "prefix": "fnQuestItemSetDescriptionBJ",
           "body": "QuestItemSetDescriptionBJ(${1:questitem whichQuestItem},${2:string description})",
           "description": "function QuestItemSetDescriptionBJ takes questitem whichQuestItem, string description returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestItemSetCompletedBJ": {
           "prefix": "fnQuestItemSetCompletedBJ",
           "body": "QuestItemSetCompletedBJ(${1:questitem whichQuestItem},${2:boolean completed})",
           "description": "function QuestItemSetCompletedBJ takes questitem whichQuestItem, boolean completed returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedQuestItemBJ": {
           "prefix": "fnGetLastCreatedQuestItemBJ",
           "body": "GetLastCreatedQuestItemBJ(${1:nothing})",
           "description": "function GetLastCreatedQuestItemBJ takes nothing returns questitem",
           "scope": "source.vjass"
       },
        "fnCreateDefeatConditionBJ": {
           "prefix": "fnCreateDefeatConditionBJ",
           "body": "CreateDefeatConditionBJ(${1:string description})",
           "description": "function CreateDefeatConditionBJ takes string description returns defeatcondition",
           "scope": "source.vjass"
       },
        "fnDestroyDefeatConditionBJ": {
           "prefix": "fnDestroyDefeatConditionBJ",
           "body": "DestroyDefeatConditionBJ(${1:defeatcondition whichCondition})",
           "description": "function DestroyDefeatConditionBJ takes defeatcondition whichCondition returns nothing",
           "scope": "source.vjass"
       },
        "fnDefeatConditionSetDescriptionBJ": {
           "prefix": "fnDefeatConditionSetDescriptionBJ",
           "body": "DefeatConditionSetDescriptionBJ(${1:defeatcondition whichCondition},${2:string description})",
           "description": "function DefeatConditionSetDescriptionBJ takes defeatcondition whichCondition, string description returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedDefeatConditionBJ": {
           "prefix": "fnGetLastCreatedDefeatConditionBJ",
           "body": "GetLastCreatedDefeatConditionBJ(${1:nothing})",
           "description": "function GetLastCreatedDefeatConditionBJ takes nothing returns defeatcondition",
           "scope": "source.vjass"
       },
        "fnFlashQuestDialogButtonBJ": {
           "prefix": "fnFlashQuestDialogButtonBJ",
           "body": "FlashQuestDialogButtonBJ(${1:nothing})",
           "description": "function FlashQuestDialogButtonBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestMessageBJ": {
           "prefix": "fnQuestMessageBJ",
           "body": "QuestMessageBJ(${1:integer messageType},${2:force f},${3:string message})",
           "description": "function QuestMessageBJ takes force f, integer messageType, string message returns nothing",
           "scope": "source.vjass"
       },
        "fnStartTimerBJ": {
           "prefix": "fnStartTimerBJ",
           "body": "StartTimerBJ(${1:real timeout},${2:boolean periodic},${3:timer t})",
           "description": "function StartTimerBJ takes timer t, boolean periodic, real timeout returns timer",
           "scope": "source.vjass"
       },
        "fnCreateTimerBJ": {
           "prefix": "fnCreateTimerBJ",
           "body": "CreateTimerBJ(${1:real timeout},${2:boolean periodic})",
           "description": "function CreateTimerBJ takes boolean periodic, real timeout returns timer",
           "scope": "source.vjass"
       },
        "fnDestroyTimerBJ": {
           "prefix": "fnDestroyTimerBJ",
           "body": "DestroyTimerBJ(${1:timer whichTimer})",
           "description": "function DestroyTimerBJ takes timer whichTimer returns nothing",
           "scope": "source.vjass"
       },
        "fnPauseTimerBJ": {
           "prefix": "fnPauseTimerBJ",
           "body": "PauseTimerBJ(${1:boolean pause},${2:timer whichTimer})",
           "description": "function PauseTimerBJ takes boolean pause, timer whichTimer returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedTimerBJ": {
           "prefix": "fnGetLastCreatedTimerBJ",
           "body": "GetLastCreatedTimerBJ(${1:nothing})",
           "description": "function GetLastCreatedTimerBJ takes nothing returns timer",
           "scope": "source.vjass"
       },
        "fnCreateTimerDialogBJ": {
           "prefix": "fnCreateTimerDialogBJ",
           "body": "CreateTimerDialogBJ(${1:string title},${2:timer t})",
           "description": "function CreateTimerDialogBJ takes timer t, string title returns timerdialog",
           "scope": "source.vjass"
       },
        "fnDestroyTimerDialogBJ": {
           "prefix": "fnDestroyTimerDialogBJ",
           "body": "DestroyTimerDialogBJ(${1:timerdialog td})",
           "description": "function DestroyTimerDialogBJ takes timerdialog td returns nothing",
           "scope": "source.vjass"
       },
        "fnTimerDialogSetTitleBJ": {
           "prefix": "fnTimerDialogSetTitleBJ",
           "body": "TimerDialogSetTitleBJ(${1:timerdialog td},${2:string title})",
           "description": "function TimerDialogSetTitleBJ takes timerdialog td, string title returns nothing",
           "scope": "source.vjass"
       },
        "fnTimerDialogSetTitleColorBJ": {
           "prefix": "fnTimerDialogSetTitleColorBJ",
           "body": "TimerDialogSetTitleColorBJ(${1:real transparency},${2:timerdialog td})",
           "description": "function TimerDialogSetTitleColorBJ takes timerdialog td, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnTimerDialogSetTimeColorBJ": {
           "prefix": "fnTimerDialogSetTimeColorBJ",
           "body": "TimerDialogSetTimeColorBJ(${1:real transparency},${2:timerdialog td})",
           "description": "function TimerDialogSetTimeColorBJ takes timerdialog td, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnTimerDialogSetSpeedBJ": {
           "prefix": "fnTimerDialogSetSpeedBJ",
           "body": "TimerDialogSetSpeedBJ(${1:real speedMultFactor},${2:timerdialog td})",
           "description": "function TimerDialogSetSpeedBJ takes timerdialog td, real speedMultFactor returns nothing",
           "scope": "source.vjass"
       },
        "fnTimerDialogDisplayForPlayerBJ": {
           "prefix": "fnTimerDialogDisplayForPlayerBJ",
           "body": "TimerDialogDisplayForPlayerBJ(${1:player whichPlayer},${2:boolean show},${3:timerdialog td})",
           "description": "function TimerDialogDisplayForPlayerBJ takes boolean show, timerdialog td, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnTimerDialogDisplayBJ": {
           "prefix": "fnTimerDialogDisplayBJ",
           "body": "TimerDialogDisplayBJ(${1:boolean show},${2:timerdialog td})",
           "description": "function TimerDialogDisplayBJ takes boolean show, timerdialog td returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedTimerDialogBJ": {
           "prefix": "fnGetLastCreatedTimerDialogBJ",
           "body": "GetLastCreatedTimerDialogBJ(${1:nothing})",
           "description": "function GetLastCreatedTimerDialogBJ takes nothing returns timerdialog",
           "scope": "source.vjass"
       },
        "fnLeaderboardResizeBJ": {
           "prefix": "fnLeaderboardResizeBJ",
           "body": "LeaderboardResizeBJ(${1:leaderboard lb})",
           "description": "function LeaderboardResizeBJ takes leaderboard lb returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetPlayerItemValueBJ": {
           "prefix": "fnLeaderboardSetPlayerItemValueBJ",
           "body": "LeaderboardSetPlayerItemValueBJ(${1:player whichPlayer},${2:leaderboard lb},${3:integer val})",
           "description": "function LeaderboardSetPlayerItemValueBJ takes player whichPlayer, leaderboard lb, integer val returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetPlayerItemLabelBJ": {
           "prefix": "fnLeaderboardSetPlayerItemLabelBJ",
           "body": "LeaderboardSetPlayerItemLabelBJ(${1:player whichPlayer},${2:string val},${3:leaderboard lb})",
           "description": "function LeaderboardSetPlayerItemLabelBJ takes player whichPlayer, leaderboard lb, string val returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetPlayerItemStyleBJ": {
           "prefix": "fnLeaderboardSetPlayerItemStyleBJ",
           "body": "LeaderboardSetPlayerItemStyleBJ(${1:player whichPlayer},${2:boolean showIcon},${3:leaderboard lb})",
           "description": "function LeaderboardSetPlayerItemStyleBJ takes player whichPlayer, leaderboard lb, boolean showLabel, boolean showValue, boolean showIcon returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetPlayerItemLabelColorBJ": {
           "prefix": "fnLeaderboardSetPlayerItemLabelColorBJ",
           "body": "LeaderboardSetPlayerItemLabelColorBJ(${1:real transparency},${2:player whichPlayer},${3:leaderboard lb})",
           "description": "function LeaderboardSetPlayerItemLabelColorBJ takes player whichPlayer, leaderboard lb, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetPlayerItemValueColorBJ": {
           "prefix": "fnLeaderboardSetPlayerItemValueColorBJ",
           "body": "LeaderboardSetPlayerItemValueColorBJ(${1:real transparency},${2:player whichPlayer},${3:leaderboard lb})",
           "description": "function LeaderboardSetPlayerItemValueColorBJ takes player whichPlayer, leaderboard lb, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetLabelColorBJ": {
           "prefix": "fnLeaderboardSetLabelColorBJ",
           "body": "LeaderboardSetLabelColorBJ(${1:real transparency},${2:leaderboard lb})",
           "description": "function LeaderboardSetLabelColorBJ takes leaderboard lb, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetValueColorBJ": {
           "prefix": "fnLeaderboardSetValueColorBJ",
           "body": "LeaderboardSetValueColorBJ(${1:real transparency},${2:leaderboard lb})",
           "description": "function LeaderboardSetValueColorBJ takes leaderboard lb, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetLabelBJ": {
           "prefix": "fnLeaderboardSetLabelBJ",
           "body": "LeaderboardSetLabelBJ(${1:string label},${2:leaderboard lb})",
           "description": "function LeaderboardSetLabelBJ takes leaderboard lb, string label returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetStyleBJ": {
           "prefix": "fnLeaderboardSetStyleBJ",
           "body": "LeaderboardSetStyleBJ(${1:boolean showIcons},${2:leaderboard lb})",
           "description": "function LeaderboardSetStyleBJ takes leaderboard lb, boolean showLabel, boolean showNames, boolean showValues, boolean showIcons returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardGetItemCountBJ": {
           "prefix": "fnLeaderboardGetItemCountBJ",
           "body": "LeaderboardGetItemCountBJ(${1:leaderboard lb})",
           "description": "function LeaderboardGetItemCountBJ takes leaderboard lb returns integer",
           "scope": "source.vjass"
       },
        "fnLeaderboardHasPlayerItemBJ": {
           "prefix": "fnLeaderboardHasPlayerItemBJ",
           "body": "LeaderboardHasPlayerItemBJ(${1:player whichPlayer},${2:leaderboard lb})",
           "description": "function LeaderboardHasPlayerItemBJ takes leaderboard lb, player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnForceSetLeaderboardBJ": {
           "prefix": "fnForceSetLeaderboardBJ",
           "body": "ForceSetLeaderboardBJ(${1:force toForce},${2:leaderboard lb})",
           "description": "function ForceSetLeaderboardBJ takes leaderboard lb, force toForce returns nothing",
           "scope": "source.vjass"
       },
        "fnCreateLeaderboardBJ": {
           "prefix": "fnCreateLeaderboardBJ",
           "body": "CreateLeaderboardBJ(${1:force toForce},${2:string label})",
           "description": "function CreateLeaderboardBJ takes force toForce, string label returns leaderboard",
           "scope": "source.vjass"
       },
        "fnDestroyLeaderboardBJ": {
           "prefix": "fnDestroyLeaderboardBJ",
           "body": "DestroyLeaderboardBJ(${1:leaderboard lb})",
           "description": "function DestroyLeaderboardBJ takes leaderboard lb returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardDisplayBJ": {
           "prefix": "fnLeaderboardDisplayBJ",
           "body": "LeaderboardDisplayBJ(${1:boolean show},${2:leaderboard lb})",
           "description": "function LeaderboardDisplayBJ takes boolean show, leaderboard lb returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardAddItemBJ": {
           "prefix": "fnLeaderboardAddItemBJ",
           "body": "LeaderboardAddItemBJ(${1:player whichPlayer},${2:string label},${3:leaderboard lb},${4:integer value})",
           "description": "function LeaderboardAddItemBJ takes player whichPlayer, leaderboard lb, string label, integer value returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardRemovePlayerItemBJ": {
           "prefix": "fnLeaderboardRemovePlayerItemBJ",
           "body": "LeaderboardRemovePlayerItemBJ(${1:player whichPlayer},${2:leaderboard lb})",
           "description": "function LeaderboardRemovePlayerItemBJ takes player whichPlayer, leaderboard lb returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSortItemsBJ": {
           "prefix": "fnLeaderboardSortItemsBJ",
           "body": "LeaderboardSortItemsBJ(${1:integer sortType},${2:boolean ascending},${3:leaderboard lb})",
           "description": "function LeaderboardSortItemsBJ takes leaderboard lb, integer sortType, boolean ascending returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSortItemsByPlayerBJ": {
           "prefix": "fnLeaderboardSortItemsByPlayerBJ",
           "body": "LeaderboardSortItemsByPlayerBJ(${1:boolean ascending},${2:leaderboard lb})",
           "description": "function LeaderboardSortItemsByPlayerBJ takes leaderboard lb, boolean ascending returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSortItemsByLabelBJ": {
           "prefix": "fnLeaderboardSortItemsByLabelBJ",
           "body": "LeaderboardSortItemsByLabelBJ(${1:boolean ascending},${2:leaderboard lb})",
           "description": "function LeaderboardSortItemsByLabelBJ takes leaderboard lb, boolean ascending returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardGetPlayerIndexBJ": {
           "prefix": "fnLeaderboardGetPlayerIndexBJ",
           "body": "LeaderboardGetPlayerIndexBJ(${1:player whichPlayer},${2:leaderboard lb})",
           "description": "function LeaderboardGetPlayerIndexBJ takes player whichPlayer, leaderboard lb returns integer",
           "scope": "source.vjass"
       },
        "fnLeaderboardGetIndexedPlayerBJ": {
           "prefix": "fnLeaderboardGetIndexedPlayerBJ",
           "body": "LeaderboardGetIndexedPlayerBJ(${1:integer position},${2:leaderboard lb})",
           "description": "function LeaderboardGetIndexedPlayerBJ takes integer position, leaderboard lb returns player",
           "scope": "source.vjass"
       },
        "fnPlayerGetLeaderboardBJ": {
           "prefix": "fnPlayerGetLeaderboardBJ",
           "body": "PlayerGetLeaderboardBJ(${1:player whichPlayer})",
           "description": "function PlayerGetLeaderboardBJ takes player whichPlayer returns leaderboard",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedLeaderboard": {
           "prefix": "fnGetLastCreatedLeaderboard",
           "body": "GetLastCreatedLeaderboard(${1:nothing})",
           "description": "function GetLastCreatedLeaderboard takes nothing returns leaderboard",
           "scope": "source.vjass"
       },
        "fnCreateMultiboardBJ": {
           "prefix": "fnCreateMultiboardBJ",
           "body": "CreateMultiboardBJ(${1:integer rows},${2:string title})",
           "description": "function CreateMultiboardBJ takes integer cols, integer rows, string title returns multiboard",
           "scope": "source.vjass"
       },
        "fnDestroyMultiboardBJ": {
           "prefix": "fnDestroyMultiboardBJ",
           "body": "DestroyMultiboardBJ(${1:multiboard mb})",
           "description": "function DestroyMultiboardBJ takes multiboard mb returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedMultiboard": {
           "prefix": "fnGetLastCreatedMultiboard",
           "body": "GetLastCreatedMultiboard(${1:nothing})",
           "description": "function GetLastCreatedMultiboard takes nothing returns multiboard",
           "scope": "source.vjass"
       },
        "fnMultiboardDisplayBJ": {
           "prefix": "fnMultiboardDisplayBJ",
           "body": "MultiboardDisplayBJ(${1:boolean show},${2:multiboard mb})",
           "description": "function MultiboardDisplayBJ takes boolean show, multiboard mb returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardMinimizeBJ": {
           "prefix": "fnMultiboardMinimizeBJ",
           "body": "MultiboardMinimizeBJ(${1:boolean minimize},${2:multiboard mb})",
           "description": "function MultiboardMinimizeBJ takes boolean minimize, multiboard mb returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetTitleTextColorBJ": {
           "prefix": "fnMultiboardSetTitleTextColorBJ",
           "body": "MultiboardSetTitleTextColorBJ(${1:real transparency},${2:multiboard mb})",
           "description": "function MultiboardSetTitleTextColorBJ takes multiboard mb, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardAllowDisplayBJ": {
           "prefix": "fnMultiboardAllowDisplayBJ",
           "body": "MultiboardAllowDisplayBJ(${1:boolean flag})",
           "description": "function MultiboardAllowDisplayBJ takes boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemStyleBJ": {
           "prefix": "fnMultiboardSetItemStyleBJ",
           "body": "MultiboardSetItemStyleBJ(${1:boolean showIcon},${2:integer row},${3:multiboard mb})",
           "description": "function MultiboardSetItemStyleBJ takes multiboard mb, integer col, integer row, boolean showValue, boolean showIcon returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemValueBJ": {
           "prefix": "fnMultiboardSetItemValueBJ",
           "body": "MultiboardSetItemValueBJ(${1:integer row},${2:multiboard mb},${3:string val})",
           "description": "function MultiboardSetItemValueBJ takes multiboard mb, integer col, integer row, string val returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemColorBJ": {
           "prefix": "fnMultiboardSetItemColorBJ",
           "body": "MultiboardSetItemColorBJ(${1:real transparency},${2:integer row},${3:multiboard mb})",
           "description": "function MultiboardSetItemColorBJ takes multiboard mb, integer col, integer row, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemWidthBJ": {
           "prefix": "fnMultiboardSetItemWidthBJ",
           "body": "MultiboardSetItemWidthBJ(${1:real width},${2:integer row},${3:multiboard mb})",
           "description": "function MultiboardSetItemWidthBJ takes multiboard mb, integer col, integer row, real width returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemIconBJ": {
           "prefix": "fnMultiboardSetItemIconBJ",
           "body": "MultiboardSetItemIconBJ(${1:integer row},${2:multiboard mb},${3:string iconFileName})",
           "description": "function MultiboardSetItemIconBJ takes multiboard mb, integer col, integer row, string iconFileName returns nothing",
           "scope": "source.vjass"
       },
        "fnTextTagSize2Height": {
           "prefix": "fnTextTagSize2Height",
           "body": "TextTagSize2Height(${1:real size})",
           "description": "function TextTagSize2Height takes real size returns real",
           "scope": "source.vjass"
       },
        "fnTextTagSpeed2Velocity": {
           "prefix": "fnTextTagSpeed2Velocity",
           "body": "TextTagSpeed2Velocity(${1:real speed})",
           "description": "function TextTagSpeed2Velocity takes real speed returns real",
           "scope": "source.vjass"
       },
        "fnSetTextTagColorBJ": {
           "prefix": "fnSetTextTagColorBJ",
           "body": "SetTextTagColorBJ(${1:texttag tt},${2:real transparency})",
           "description": "function SetTextTagColorBJ takes texttag tt, real red, real green, real blue, real transparency returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagVelocityBJ": {
           "prefix": "fnSetTextTagVelocityBJ",
           "body": "SetTextTagVelocityBJ(${1:texttag tt},${2:real angle})",
           "description": "function SetTextTagVelocityBJ takes texttag tt, real speed, real angle returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagTextBJ": {
           "prefix": "fnSetTextTagTextBJ",
           "body": "SetTextTagTextBJ(${1:texttag tt},${2:real size},${3:string s})",
           "description": "function SetTextTagTextBJ takes texttag tt, string s, real size returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagPosBJ": {
           "prefix": "fnSetTextTagPosBJ",
           "body": "SetTextTagPosBJ(${1:texttag tt},${2:real zOffset},${3:location loc})",
           "description": "function SetTextTagPosBJ takes texttag tt, location loc, real zOffset returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagPosUnitBJ": {
           "prefix": "fnSetTextTagPosUnitBJ",
           "body": "SetTextTagPosUnitBJ(${1:texttag tt},${2:real zOffset},${3:unit whichUnit})",
           "description": "function SetTextTagPosUnitBJ takes texttag tt, unit whichUnit, real zOffset returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagSuspendedBJ": {
           "prefix": "fnSetTextTagSuspendedBJ",
           "body": "SetTextTagSuspendedBJ(${1:texttag tt},${2:boolean flag})",
           "description": "function SetTextTagSuspendedBJ takes texttag tt, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagPermanentBJ": {
           "prefix": "fnSetTextTagPermanentBJ",
           "body": "SetTextTagPermanentBJ(${1:texttag tt},${2:boolean flag})",
           "description": "function SetTextTagPermanentBJ takes texttag tt, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagAgeBJ": {
           "prefix": "fnSetTextTagAgeBJ",
           "body": "SetTextTagAgeBJ(${1:texttag tt},${2:real age})",
           "description": "function SetTextTagAgeBJ takes texttag tt, real age returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagLifespanBJ": {
           "prefix": "fnSetTextTagLifespanBJ",
           "body": "SetTextTagLifespanBJ(${1:texttag tt},${2:real lifespan})",
           "description": "function SetTextTagLifespanBJ takes texttag tt, real lifespan returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagFadepointBJ": {
           "prefix": "fnSetTextTagFadepointBJ",
           "body": "SetTextTagFadepointBJ(${1:texttag tt},${2:real fadepoint})",
           "description": "function SetTextTagFadepointBJ takes texttag tt, real fadepoint returns nothing",
           "scope": "source.vjass"
       },
        "fnCreateTextTagLocBJ": {
           "prefix": "fnCreateTextTagLocBJ",
           "body": "CreateTextTagLocBJ(${1:real transparency},${2:string s},${3:location loc})",
           "description": "function CreateTextTagLocBJ takes string s, location loc, real zOffset, real size, real red, real green, real blue, real transparency returns texttag",
           "scope": "source.vjass"
       },
        "fnCreateTextTagUnitBJ": {
           "prefix": "fnCreateTextTagUnitBJ",
           "body": "CreateTextTagUnitBJ(${1:real transparency},${2:string s},${3:unit whichUnit})",
           "description": "function CreateTextTagUnitBJ takes string s, unit whichUnit, real zOffset, real size, real red, real green, real blue, real transparency returns texttag",
           "scope": "source.vjass"
       },
        "fnDestroyTextTagBJ": {
           "prefix": "fnDestroyTextTagBJ",
           "body": "DestroyTextTagBJ(${1:texttag tt})",
           "description": "function DestroyTextTagBJ takes texttag tt returns nothing",
           "scope": "source.vjass"
       },
        "fnShowTextTagForceBJ": {
           "prefix": "fnShowTextTagForceBJ",
           "body": "ShowTextTagForceBJ(${1:texttag tt},${2:boolean show},${3:force whichForce})",
           "description": "function ShowTextTagForceBJ takes boolean show, texttag tt, force whichForce returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedTextTag": {
           "prefix": "fnGetLastCreatedTextTag",
           "body": "GetLastCreatedTextTag(${1:nothing})",
           "description": "function GetLastCreatedTextTag takes nothing returns texttag",
           "scope": "source.vjass"
       },
        "fnPauseGameOn": {
           "prefix": "fnPauseGameOn",
           "body": "PauseGameOn(${1:nothing})",
           "description": "function PauseGameOn takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnPauseGameOff": {
           "prefix": "fnPauseGameOff",
           "body": "PauseGameOff(${1:nothing})",
           "description": "function PauseGameOff takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUserControlForceOn": {
           "prefix": "fnSetUserControlForceOn",
           "body": "SetUserControlForceOn(${1:force whichForce})",
           "description": "function SetUserControlForceOn takes force whichForce returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUserControlForceOff": {
           "prefix": "fnSetUserControlForceOff",
           "body": "SetUserControlForceOff(${1:force whichForce})",
           "description": "function SetUserControlForceOff takes force whichForce returns nothing",
           "scope": "source.vjass"
       },
        "fnShowInterfaceForceOn": {
           "prefix": "fnShowInterfaceForceOn",
           "body": "ShowInterfaceForceOn(${1:real fadeDuration},${2:force whichForce})",
           "description": "function ShowInterfaceForceOn takes force whichForce, real fadeDuration returns nothing",
           "scope": "source.vjass"
       },
        "fnShowInterfaceForceOff": {
           "prefix": "fnShowInterfaceForceOff",
           "body": "ShowInterfaceForceOff(${1:real fadeDuration},${2:force whichForce})",
           "description": "function ShowInterfaceForceOff takes force whichForce, real fadeDuration returns nothing",
           "scope": "source.vjass"
       },
        "fnPingMinimapForForce": {
           "prefix": "fnPingMinimapForForce",
           "body": "PingMinimapForForce(${1:real duration},${2:force whichForce})",
           "description": "function PingMinimapForForce takes force whichForce, real x, real y, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnPingMinimapLocForForce": {
           "prefix": "fnPingMinimapLocForForce",
           "body": "PingMinimapLocForForce(${1:real duration},${2:force whichForce},${3:location loc})",
           "description": "function PingMinimapLocForForce takes force whichForce, location loc, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnPingMinimapForPlayer": {
           "prefix": "fnPingMinimapForPlayer",
           "body": "PingMinimapForPlayer(${1:real duration},${2:player whichPlayer})",
           "description": "function PingMinimapForPlayer takes player whichPlayer, real x, real y, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnPingMinimapLocForPlayer": {
           "prefix": "fnPingMinimapLocForPlayer",
           "body": "PingMinimapLocForPlayer(${1:real duration},${2:player whichPlayer},${3:location loc})",
           "description": "function PingMinimapLocForPlayer takes player whichPlayer, location loc, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnPingMinimapForForceEx": {
           "prefix": "fnPingMinimapForForceEx",
           "body": "PingMinimapForForceEx(${1:real blue},${2:integer style},${3:force whichForce})",
           "description": "function PingMinimapForForceEx takes force whichForce, real x, real y, real duration, integer style, real red, real green, real blue returns nothing",
           "scope": "source.vjass"
       },
        "fnPingMinimapLocForForceEx": {
           "prefix": "fnPingMinimapLocForForceEx",
           "body": "PingMinimapLocForForceEx(${1:real blue},${2:integer style},${3:force whichForce},${4:location loc})",
           "description": "function PingMinimapLocForForceEx takes force whichForce, location loc, real duration, integer style, real red, real green, real blue returns nothing",
           "scope": "source.vjass"
       },
        "fnEnableWorldFogBoundaryBJ": {
           "prefix": "fnEnableWorldFogBoundaryBJ",
           "body": "EnableWorldFogBoundaryBJ(${1:boolean enable},${2:force f})",
           "description": "function EnableWorldFogBoundaryBJ takes boolean enable, force f returns nothing",
           "scope": "source.vjass"
       },
        "fnEnableOcclusionBJ": {
           "prefix": "fnEnableOcclusionBJ",
           "body": "EnableOcclusionBJ(${1:boolean enable},${2:force f})",
           "description": "function EnableOcclusionBJ takes boolean enable, force f returns nothing",
           "scope": "source.vjass"
       },
        "fnCancelCineSceneBJ": {
           "prefix": "fnCancelCineSceneBJ",
           "body": "CancelCineSceneBJ(${1:nothing})",
           "description": "function CancelCineSceneBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnTryInitCinematicBehaviorBJ": {
           "prefix": "fnTryInitCinematicBehaviorBJ",
           "body": "TryInitCinematicBehaviorBJ(${1:nothing})",
           "description": "function TryInitCinematicBehaviorBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCinematicSceneBJ": {
           "prefix": "fnSetCinematicSceneBJ",
           "body": "SetCinematicSceneBJ(${1:sound soundHandle},${2:integer portraitUnitId},${3:playercolor color},${4:real voiceoverDuration},${5:string text})",
           "description": "function SetCinematicSceneBJ takes sound soundHandle, integer portraitUnitId, playercolor color, string speakerTitle, string text, real sceneDuration, real voiceoverDuration returns nothing",
           "scope": "source.vjass"
       },
        "fnGetTransmissionDuration": {
           "prefix": "fnGetTransmissionDuration",
           "body": "GetTransmissionDuration(${1:sound soundHandle},${2:integer timeType},${3:real timeVal})",
           "description": "function GetTransmissionDuration takes sound soundHandle, integer timeType, real timeVal returns real",
           "scope": "source.vjass"
       },
        "fnWaitTransmissionDuration": {
           "prefix": "fnWaitTransmissionDuration",
           "body": "WaitTransmissionDuration(${1:sound soundHandle},${2:integer timeType},${3:real timeVal})",
           "description": "function WaitTransmissionDuration takes sound soundHandle, integer timeType, real timeVal returns nothing",
           "scope": "source.vjass"
       },
        "fnDoTransmissionBasicsXYBJ": {
           "prefix": "fnDoTransmissionBasicsXYBJ",
           "body": "DoTransmissionBasicsXYBJ(${1:real duration},${2:integer unitId},${3:sound soundHandle},${4:playercolor color},${5:string message})",
           "description": "function DoTransmissionBasicsXYBJ takes integer unitId, playercolor color, real x, real y, sound soundHandle, string unitName, string message, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnTransmissionFromUnitWithNameBJ": {
           "prefix": "fnTransmissionFromUnitWithNameBJ",
           "body": "TransmissionFromUnitWithNameBJ(${1:sound soundHandle},${2:real timeVal},${3:force toForce},${4:string message},${5:boolean wait},${6:integer timeType},${7:unit whichUnit})",
           "description": "function TransmissionFromUnitWithNameBJ takes force toForce, unit whichUnit, string unitName, sound soundHandle, string message, integer timeType, real timeVal, boolean wait returns nothing",
           "scope": "source.vjass"
       },
        "fnTransmissionFromUnitTypeWithNameBJ": {
           "prefix": "fnTransmissionFromUnitTypeWithNameBJ",
           "body": "TransmissionFromUnitTypeWithNameBJ(${1:sound soundHandle},${2:real timeVal},${3:force toForce},${4:string message},${5:player fromPlayer},${6:boolean wait},${7:location loc},${8:integer timeType})",
           "description": "function TransmissionFromUnitTypeWithNameBJ takes force toForce, player fromPlayer, integer unitId, string unitName, location loc, sound soundHandle, string message, integer timeType, real timeVal, boolean wait returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLastTransmissionDurationBJ": {
           "prefix": "fnGetLastTransmissionDurationBJ",
           "body": "GetLastTransmissionDurationBJ(${1:nothing})",
           "description": "function GetLastTransmissionDurationBJ takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnForceCinematicSubtitlesBJ": {
           "prefix": "fnForceCinematicSubtitlesBJ",
           "body": "ForceCinematicSubtitlesBJ(${1:boolean flag})",
           "description": "function ForceCinematicSubtitlesBJ takes boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnCinematicModeExBJ": {
           "prefix": "fnCinematicModeExBJ",
           "body": "CinematicModeExBJ(${1:real interfaceFadeTime},${2:boolean cineMode},${3:force forForce})",
           "description": "function CinematicModeExBJ takes boolean cineMode, force forForce, real interfaceFadeTime returns nothing",
           "scope": "source.vjass"
       },
        "fnCinematicModeBJ": {
           "prefix": "fnCinematicModeBJ",
           "body": "CinematicModeBJ(${1:boolean cineMode},${2:force forForce})",
           "description": "function CinematicModeBJ takes boolean cineMode, force forForce returns nothing",
           "scope": "source.vjass"
       },
        "fnDisplayCineFilterBJ": {
           "prefix": "fnDisplayCineFilterBJ",
           "body": "DisplayCineFilterBJ(${1:boolean flag})",
           "description": "function DisplayCineFilterBJ takes boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnCinematicFadeCommonBJ": {
           "prefix": "fnCinematicFadeCommonBJ",
           "body": "CinematicFadeCommonBJ(${1:real endTrans},${2:string tex})",
           "description": "function CinematicFadeCommonBJ takes real red, real green, real blue, real duration, string tex, real startTrans, real endTrans returns nothing",
           "scope": "source.vjass"
       },
        "fnFinishCinematicFadeBJ": {
           "prefix": "fnFinishCinematicFadeBJ",
           "body": "FinishCinematicFadeBJ(${1:nothing})",
           "description": "function FinishCinematicFadeBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnFinishCinematicFadeAfterBJ": {
           "prefix": "fnFinishCinematicFadeAfterBJ",
           "body": "FinishCinematicFadeAfterBJ(${1:real duration})",
           "description": "function FinishCinematicFadeAfterBJ takes real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnContinueCinematicFadeBJ": {
           "prefix": "fnContinueCinematicFadeBJ",
           "body": "ContinueCinematicFadeBJ(${1:nothing})",
           "description": "function ContinueCinematicFadeBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnContinueCinematicFadeAfterBJ": {
           "prefix": "fnContinueCinematicFadeAfterBJ",
           "body": "ContinueCinematicFadeAfterBJ(${1:real trans},${2:string tex})",
           "description": "function ContinueCinematicFadeAfterBJ takes real duration, real red, real green, real blue, real trans, string tex returns nothing",
           "scope": "source.vjass"
       },
        "fnAbortCinematicFadeBJ": {
           "prefix": "fnAbortCinematicFadeBJ",
           "body": "AbortCinematicFadeBJ(${1:nothing})",
           "description": "function AbortCinematicFadeBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCinematicFadeBJ": {
           "prefix": "fnCinematicFadeBJ",
           "body": "CinematicFadeBJ(${1:real trans},${2:integer fadetype},${3:string tex})",
           "description": "function CinematicFadeBJ takes integer fadetype, real duration, string tex, real red, real green, real blue, real trans returns nothing",
           "scope": "source.vjass"
       },
        "fnCinematicFilterGenericBJ": {
           "prefix": "fnCinematicFilterGenericBJ",
           "body": "CinematicFilterGenericBJ(${1:real trans1},${2:blendmode bmode},${3:string tex})",
           "description": "function CinematicFilterGenericBJ takes real duration, blendmode bmode, string tex, real red0, real green0, real blue0, real trans0, real red1, real green1, real blue1, real trans1 returns nothing",
           "scope": "source.vjass"
       },
        "fnRescueUnitBJ": {
           "prefix": "fnRescueUnitBJ",
           "body": "RescueUnitBJ(${1:player rescuer},${2:boolean changeColor},${3:unit whichUnit})",
           "description": "function RescueUnitBJ takes unit whichUnit, player rescuer, boolean changeColor returns nothing",
           "scope": "source.vjass"
       },
        "fnTriggerActionUnitRescuedBJ": {
           "prefix": "fnTriggerActionUnitRescuedBJ",
           "body": "TriggerActionUnitRescuedBJ(${1:nothing})",
           "description": "function TriggerActionUnitRescuedBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnTryInitRescuableTriggersBJ": {
           "prefix": "fnTryInitRescuableTriggersBJ",
           "body": "TryInitRescuableTriggersBJ(${1:nothing})",
           "description": "function TryInitRescuableTriggersBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetRescueUnitColorChangeBJ": {
           "prefix": "fnSetRescueUnitColorChangeBJ",
           "body": "SetRescueUnitColorChangeBJ(${1:boolean changeColor})",
           "description": "function SetRescueUnitColorChangeBJ takes boolean changeColor returns nothing",
           "scope": "source.vjass"
       },
        "fnSetRescueBuildingColorChangeBJ": {
           "prefix": "fnSetRescueBuildingColorChangeBJ",
           "body": "SetRescueBuildingColorChangeBJ(${1:boolean changeColor})",
           "description": "function SetRescueBuildingColorChangeBJ takes boolean changeColor returns nothing",
           "scope": "source.vjass"
       },
        "fnMakeUnitRescuableToForceBJEnum": {
           "prefix": "fnMakeUnitRescuableToForceBJEnum",
           "body": "MakeUnitRescuableToForceBJEnum(${1:nothing})",
           "description": "function MakeUnitRescuableToForceBJEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMakeUnitRescuableToForceBJ": {
           "prefix": "fnMakeUnitRescuableToForceBJ",
           "body": "MakeUnitRescuableToForceBJ(${1:boolean isRescuable},${2:force whichForce},${3:unit whichUnit})",
           "description": "function MakeUnitRescuableToForceBJ takes unit whichUnit, boolean isRescuable, force whichForce returns nothing",
           "scope": "source.vjass"
       },
        "fnInitRescuableBehaviorBJ": {
           "prefix": "fnInitRescuableBehaviorBJ",
           "body": "InitRescuableBehaviorBJ(${1:nothing})",
           "description": "function InitRescuableBehaviorBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerTechResearchedSwap": {
           "prefix": "fnSetPlayerTechResearchedSwap",
           "body": "SetPlayerTechResearchedSwap(${1:integer levels},${2:player whichPlayer})",
           "description": "function SetPlayerTechResearchedSwap takes integer techid, integer levels, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerTechMaxAllowedSwap": {
           "prefix": "fnSetPlayerTechMaxAllowedSwap",
           "body": "SetPlayerTechMaxAllowedSwap(${1:integer maximum},${2:player whichPlayer})",
           "description": "function SetPlayerTechMaxAllowedSwap takes integer techid, integer maximum, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerMaxHeroesAllowed": {
           "prefix": "fnSetPlayerMaxHeroesAllowed",
           "body": "SetPlayerMaxHeroesAllowed(${1:integer maximum},${2:player whichPlayer})",
           "description": "function SetPlayerMaxHeroesAllowed takes integer maximum, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnGetPlayerTechCountSimple": {
           "prefix": "fnGetPlayerTechCountSimple",
           "body": "GetPlayerTechCountSimple(${1:integer techid},${2:player whichPlayer})",
           "description": "function GetPlayerTechCountSimple takes integer techid, player whichPlayer returns integer",
           "scope": "source.vjass"
       },
        "fnGetPlayerTechMaxAllowedSwap": {
           "prefix": "fnGetPlayerTechMaxAllowedSwap",
           "body": "GetPlayerTechMaxAllowedSwap(${1:integer techid},${2:player whichPlayer})",
           "description": "function GetPlayerTechMaxAllowedSwap takes integer techid, player whichPlayer returns integer",
           "scope": "source.vjass"
       },
        "fnSetPlayerAbilityAvailableBJ": {
           "prefix": "fnSetPlayerAbilityAvailableBJ",
           "body": "SetPlayerAbilityAvailableBJ(${1:integer abilid},${2:boolean avail},${3:player whichPlayer})",
           "description": "function SetPlayerAbilityAvailableBJ takes boolean avail, integer abilid, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCampaignMenuRaceBJ": {
           "prefix": "fnSetCampaignMenuRaceBJ",
           "body": "SetCampaignMenuRaceBJ(${1:integer campaignNumber})",
           "description": "function SetCampaignMenuRaceBJ takes integer campaignNumber returns nothing",
           "scope": "source.vjass"
       },
        "fnSetMissionAvailableBJ": {
           "prefix": "fnSetMissionAvailableBJ",
           "body": "SetMissionAvailableBJ(${1:integer missionIndex},${2:boolean available})",
           "description": "function SetMissionAvailableBJ takes boolean available, integer missionIndex returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCampaignAvailableBJ": {
           "prefix": "fnSetCampaignAvailableBJ",
           "body": "SetCampaignAvailableBJ(${1:integer campaignNumber},${2:boolean available})",
           "description": "function SetCampaignAvailableBJ takes boolean available, integer campaignNumber returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCinematicAvailableBJ": {
           "prefix": "fnSetCinematicAvailableBJ",
           "body": "SetCinematicAvailableBJ(${1:integer cinematicIndex},${2:boolean available})",
           "description": "function SetCinematicAvailableBJ takes boolean available, integer cinematicIndex returns nothing",
           "scope": "source.vjass"
       },
        "fnInitGameCacheBJ": {
           "prefix": "fnInitGameCacheBJ",
           "body": "InitGameCacheBJ(${1:string campaignFile})",
           "description": "function InitGameCacheBJ takes string campaignFile returns gamecache",
           "scope": "source.vjass"
       },
        "fnSaveGameCacheBJ": {
           "prefix": "fnSaveGameCacheBJ",
           "body": "SaveGameCacheBJ(${1:gamecache cache})",
           "description": "function SaveGameCacheBJ takes gamecache cache returns boolean",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedGameCacheBJ": {
           "prefix": "fnGetLastCreatedGameCacheBJ",
           "body": "GetLastCreatedGameCacheBJ(${1:nothing})",
           "description": "function GetLastCreatedGameCacheBJ takes nothing returns gamecache",
           "scope": "source.vjass"
       },
        "fnInitHashtableBJ": {
           "prefix": "fnInitHashtableBJ",
           "body": "InitHashtableBJ(${1:nothing})",
           "description": "function InitHashtableBJ takes nothing returns hashtable",
           "scope": "source.vjass"
       },
        "fnGetLastCreatedHashtableBJ": {
           "prefix": "fnGetLastCreatedHashtableBJ",
           "body": "GetLastCreatedHashtableBJ(${1:nothing})",
           "description": "function GetLastCreatedHashtableBJ takes nothing returns hashtable",
           "scope": "source.vjass"
       },
        "fnStoreRealBJ": {
           "prefix": "fnStoreRealBJ",
           "body": "StoreRealBJ(${1:real value},${2:gamecache cache},${3:string missionKey})",
           "description": "function StoreRealBJ takes real value, string key, string missionKey, gamecache cache returns nothing",
           "scope": "source.vjass"
       },
        "fnStoreIntegerBJ": {
           "prefix": "fnStoreIntegerBJ",
           "body": "StoreIntegerBJ(${1:integer value},${2:string missionKey},${3:gamecache cache})",
           "description": "function StoreIntegerBJ takes integer value, string key, string missionKey, gamecache cache returns nothing",
           "scope": "source.vjass"
       },
        "fnStoreBooleanBJ": {
           "prefix": "fnStoreBooleanBJ",
           "body": "StoreBooleanBJ(${1:gamecache cache},${2:boolean value},${3:string missionKey})",
           "description": "function StoreBooleanBJ takes boolean value, string key, string missionKey, gamecache cache returns nothing",
           "scope": "source.vjass"
       },
        "fnStoreStringBJ": {
           "prefix": "fnStoreStringBJ",
           "body": "StoreStringBJ(${1:gamecache cache},${2:string missionKey})",
           "description": "function StoreStringBJ takes string value, string key, string missionKey, gamecache cache returns boolean",
           "scope": "source.vjass"
       },
        "fnStoreUnitBJ": {
           "prefix": "fnStoreUnitBJ",
           "body": "StoreUnitBJ(${1:gamecache cache},${2:string missionKey},${3:unit whichUnit})",
           "description": "function StoreUnitBJ takes unit whichUnit, string key, string missionKey, gamecache cache returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveRealBJ": {
           "prefix": "fnSaveRealBJ",
           "body": "SaveRealBJ(${1:real value},${2:integer missionKey},${3:hashtable table})",
           "description": "function SaveRealBJ takes real value, integer key, integer missionKey, hashtable table returns nothing",
           "scope": "source.vjass"
       },
        "fnSaveIntegerBJ": {
           "prefix": "fnSaveIntegerBJ",
           "body": "SaveIntegerBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function SaveIntegerBJ takes integer value, integer key, integer missionKey, hashtable table returns nothing",
           "scope": "source.vjass"
       },
        "fnSaveBooleanBJ": {
           "prefix": "fnSaveBooleanBJ",
           "body": "SaveBooleanBJ(${1:integer missionKey},${2:boolean value},${3:hashtable table})",
           "description": "function SaveBooleanBJ takes boolean value, integer key, integer missionKey, hashtable table returns nothing",
           "scope": "source.vjass"
       },
        "fnSaveStringBJ": {
           "prefix": "fnSaveStringBJ",
           "body": "SaveStringBJ(${1:integer missionKey},${2:string value},${3:hashtable table})",
           "description": "function SaveStringBJ takes string value, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSavePlayerHandleBJ": {
           "prefix": "fnSavePlayerHandleBJ",
           "body": "SavePlayerHandleBJ(${1:player whichPlayer},${2:hashtable table},${3:integer missionKey})",
           "description": "function SavePlayerHandleBJ takes player whichPlayer, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveWidgetHandleBJ": {
           "prefix": "fnSaveWidgetHandleBJ",
           "body": "SaveWidgetHandleBJ(${1:integer missionKey},${2:widget whichWidget},${3:hashtable table})",
           "description": "function SaveWidgetHandleBJ takes widget whichWidget, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveDestructableHandleBJ": {
           "prefix": "fnSaveDestructableHandleBJ",
           "body": "SaveDestructableHandleBJ(${1:integer missionKey},${2:hashtable table},${3:destructable whichDestructable})",
           "description": "function SaveDestructableHandleBJ takes destructable whichDestructable, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveItemHandleBJ": {
           "prefix": "fnSaveItemHandleBJ",
           "body": "SaveItemHandleBJ(${1:item whichItem},${2:hashtable table},${3:integer missionKey})",
           "description": "function SaveItemHandleBJ takes item whichItem, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveUnitHandleBJ": {
           "prefix": "fnSaveUnitHandleBJ",
           "body": "SaveUnitHandleBJ(${1:integer missionKey},${2:hashtable table},${3:unit whichUnit})",
           "description": "function SaveUnitHandleBJ takes unit whichUnit, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveAbilityHandleBJ": {
           "prefix": "fnSaveAbilityHandleBJ",
           "body": "SaveAbilityHandleBJ(${1:integer missionKey},${2:ability whichAbility},${3:hashtable table})",
           "description": "function SaveAbilityHandleBJ takes ability whichAbility, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveTimerHandleBJ": {
           "prefix": "fnSaveTimerHandleBJ",
           "body": "SaveTimerHandleBJ(${1:integer missionKey},${2:hashtable table},${3:timer whichTimer})",
           "description": "function SaveTimerHandleBJ takes timer whichTimer, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveTriggerHandleBJ": {
           "prefix": "fnSaveTriggerHandleBJ",
           "body": "SaveTriggerHandleBJ(${1:integer missionKey},${2:trigger whichTrigger},${3:hashtable table})",
           "description": "function SaveTriggerHandleBJ takes trigger whichTrigger, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveTriggerConditionHandleBJ": {
           "prefix": "fnSaveTriggerConditionHandleBJ",
           "body": "SaveTriggerConditionHandleBJ(${1:integer missionKey},${2:triggercondition whichTriggercondition},${3:hashtable table})",
           "description": "function SaveTriggerConditionHandleBJ takes triggercondition whichTriggercondition, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveTriggerActionHandleBJ": {
           "prefix": "fnSaveTriggerActionHandleBJ",
           "body": "SaveTriggerActionHandleBJ(${1:integer missionKey},${2:hashtable table},${3:triggeraction whichTriggeraction})",
           "description": "function SaveTriggerActionHandleBJ takes triggeraction whichTriggeraction, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveTriggerEventHandleBJ": {
           "prefix": "fnSaveTriggerEventHandleBJ",
           "body": "SaveTriggerEventHandleBJ(${1:integer missionKey},${2:event whichEvent},${3:hashtable table})",
           "description": "function SaveTriggerEventHandleBJ takes event whichEvent, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveForceHandleBJ": {
           "prefix": "fnSaveForceHandleBJ",
           "body": "SaveForceHandleBJ(${1:integer missionKey},${2:force whichForce},${3:hashtable table})",
           "description": "function SaveForceHandleBJ takes force whichForce, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveGroupHandleBJ": {
           "prefix": "fnSaveGroupHandleBJ",
           "body": "SaveGroupHandleBJ(${1:integer missionKey},${2:group whichGroup},${3:hashtable table})",
           "description": "function SaveGroupHandleBJ takes group whichGroup, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveLocationHandleBJ": {
           "prefix": "fnSaveLocationHandleBJ",
           "body": "SaveLocationHandleBJ(${1:integer missionKey},${2:location whichLocation},${3:hashtable table})",
           "description": "function SaveLocationHandleBJ takes location whichLocation, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveRectHandleBJ": {
           "prefix": "fnSaveRectHandleBJ",
           "body": "SaveRectHandleBJ(${1:integer missionKey},${2:hashtable table},${3:rect whichRect})",
           "description": "function SaveRectHandleBJ takes rect whichRect, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveBooleanExprHandleBJ": {
           "prefix": "fnSaveBooleanExprHandleBJ",
           "body": "SaveBooleanExprHandleBJ(${1:integer missionKey},${2:boolexpr whichBoolexpr},${3:hashtable table})",
           "description": "function SaveBooleanExprHandleBJ takes boolexpr whichBoolexpr, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveSoundHandleBJ": {
           "prefix": "fnSaveSoundHandleBJ",
           "body": "SaveSoundHandleBJ(${1:sound whichSound},${2:integer missionKey},${3:hashtable table})",
           "description": "function SaveSoundHandleBJ takes sound whichSound, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveEffectHandleBJ": {
           "prefix": "fnSaveEffectHandleBJ",
           "body": "SaveEffectHandleBJ(${1:integer missionKey},${2:effect whichEffect},${3:hashtable table})",
           "description": "function SaveEffectHandleBJ takes effect whichEffect, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveUnitPoolHandleBJ": {
           "prefix": "fnSaveUnitPoolHandleBJ",
           "body": "SaveUnitPoolHandleBJ(${1:integer missionKey},${2:unitpool whichUnitpool},${3:hashtable table})",
           "description": "function SaveUnitPoolHandleBJ takes unitpool whichUnitpool, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveItemPoolHandleBJ": {
           "prefix": "fnSaveItemPoolHandleBJ",
           "body": "SaveItemPoolHandleBJ(${1:integer missionKey},${2:hashtable table},${3:itempool whichItempool})",
           "description": "function SaveItemPoolHandleBJ takes itempool whichItempool, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveQuestHandleBJ": {
           "prefix": "fnSaveQuestHandleBJ",
           "body": "SaveQuestHandleBJ(${1:integer missionKey},${2:quest whichQuest},${3:hashtable table})",
           "description": "function SaveQuestHandleBJ takes quest whichQuest, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveQuestItemHandleBJ": {
           "prefix": "fnSaveQuestItemHandleBJ",
           "body": "SaveQuestItemHandleBJ(${1:integer missionKey},${2:questitem whichQuestitem},${3:hashtable table})",
           "description": "function SaveQuestItemHandleBJ takes questitem whichQuestitem, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveDefeatConditionHandleBJ": {
           "prefix": "fnSaveDefeatConditionHandleBJ",
           "body": "SaveDefeatConditionHandleBJ(${1:integer missionKey},${2:defeatcondition whichDefeatcondition},${3:hashtable table})",
           "description": "function SaveDefeatConditionHandleBJ takes defeatcondition whichDefeatcondition, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveTimerDialogHandleBJ": {
           "prefix": "fnSaveTimerDialogHandleBJ",
           "body": "SaveTimerDialogHandleBJ(${1:integer missionKey},${2:timerdialog whichTimerdialog},${3:hashtable table})",
           "description": "function SaveTimerDialogHandleBJ takes timerdialog whichTimerdialog, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveLeaderboardHandleBJ": {
           "prefix": "fnSaveLeaderboardHandleBJ",
           "body": "SaveLeaderboardHandleBJ(${1:integer missionKey},${2:hashtable table},${3:leaderboard whichLeaderboard})",
           "description": "function SaveLeaderboardHandleBJ takes leaderboard whichLeaderboard, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveMultiboardHandleBJ": {
           "prefix": "fnSaveMultiboardHandleBJ",
           "body": "SaveMultiboardHandleBJ(${1:integer missionKey},${2:multiboard whichMultiboard},${3:hashtable table})",
           "description": "function SaveMultiboardHandleBJ takes multiboard whichMultiboard, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveMultiboardItemHandleBJ": {
           "prefix": "fnSaveMultiboardItemHandleBJ",
           "body": "SaveMultiboardItemHandleBJ(${1:integer missionKey},${2:multiboarditem whichMultiboarditem},${3:hashtable table})",
           "description": "function SaveMultiboardItemHandleBJ takes multiboarditem whichMultiboarditem, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveTrackableHandleBJ": {
           "prefix": "fnSaveTrackableHandleBJ",
           "body": "SaveTrackableHandleBJ(${1:trackable whichTrackable},${2:integer missionKey},${3:hashtable table})",
           "description": "function SaveTrackableHandleBJ takes trackable whichTrackable, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveDialogHandleBJ": {
           "prefix": "fnSaveDialogHandleBJ",
           "body": "SaveDialogHandleBJ(${1:integer missionKey},${2:hashtable table},${3:dialog whichDialog})",
           "description": "function SaveDialogHandleBJ takes dialog whichDialog, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveButtonHandleBJ": {
           "prefix": "fnSaveButtonHandleBJ",
           "body": "SaveButtonHandleBJ(${1:integer missionKey},${2:button whichButton},${3:hashtable table})",
           "description": "function SaveButtonHandleBJ takes button whichButton, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveTextTagHandleBJ": {
           "prefix": "fnSaveTextTagHandleBJ",
           "body": "SaveTextTagHandleBJ(${1:texttag whichTexttag},${2:integer missionKey},${3:hashtable table})",
           "description": "function SaveTextTagHandleBJ takes texttag whichTexttag, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveLightningHandleBJ": {
           "prefix": "fnSaveLightningHandleBJ",
           "body": "SaveLightningHandleBJ(${1:integer missionKey},${2:hashtable table},${3:lightning whichLightning})",
           "description": "function SaveLightningHandleBJ takes lightning whichLightning, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveImageHandleBJ": {
           "prefix": "fnSaveImageHandleBJ",
           "body": "SaveImageHandleBJ(${1:integer missionKey},${2:image whichImage},${3:hashtable table})",
           "description": "function SaveImageHandleBJ takes image whichImage, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveUbersplatHandleBJ": {
           "prefix": "fnSaveUbersplatHandleBJ",
           "body": "SaveUbersplatHandleBJ(${1:integer missionKey},${2:ubersplat whichUbersplat},${3:hashtable table})",
           "description": "function SaveUbersplatHandleBJ takes ubersplat whichUbersplat, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveRegionHandleBJ": {
           "prefix": "fnSaveRegionHandleBJ",
           "body": "SaveRegionHandleBJ(${1:integer missionKey},${2:region whichRegion},${3:hashtable table})",
           "description": "function SaveRegionHandleBJ takes region whichRegion, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveFogStateHandleBJ": {
           "prefix": "fnSaveFogStateHandleBJ",
           "body": "SaveFogStateHandleBJ(${1:integer missionKey},${2:hashtable table},${3:fogstate whichFogState})",
           "description": "function SaveFogStateHandleBJ takes fogstate whichFogState, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveFogModifierHandleBJ": {
           "prefix": "fnSaveFogModifierHandleBJ",
           "body": "SaveFogModifierHandleBJ(${1:fogmodifier whichFogModifier},${2:integer missionKey},${3:hashtable table})",
           "description": "function SaveFogModifierHandleBJ takes fogmodifier whichFogModifier, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveAgentHandleBJ": {
           "prefix": "fnSaveAgentHandleBJ",
           "body": "SaveAgentHandleBJ(${1:integer missionKey},${2:hashtable table},${3:agent whichAgent})",
           "description": "function SaveAgentHandleBJ takes agent whichAgent, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveHashtableHandleBJ": {
           "prefix": "fnSaveHashtableHandleBJ",
           "body": "SaveHashtableHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function SaveHashtableHandleBJ takes hashtable whichHashtable, integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnGetStoredRealBJ": {
           "prefix": "fnGetStoredRealBJ",
           "body": "GetStoredRealBJ(${1:gamecache cache},${2:string missionKey})",
           "description": "function GetStoredRealBJ takes string key, string missionKey, gamecache cache returns real",
           "scope": "source.vjass"
       },
        "fnGetStoredIntegerBJ": {
           "prefix": "fnGetStoredIntegerBJ",
           "body": "GetStoredIntegerBJ(${1:gamecache cache},${2:string missionKey})",
           "description": "function GetStoredIntegerBJ takes string key, string missionKey, gamecache cache returns integer",
           "scope": "source.vjass"
       },
        "fnGetStoredBooleanBJ": {
           "prefix": "fnGetStoredBooleanBJ",
           "body": "GetStoredBooleanBJ(${1:gamecache cache},${2:string missionKey})",
           "description": "function GetStoredBooleanBJ takes string key, string missionKey, gamecache cache returns boolean",
           "scope": "source.vjass"
       },
        "fnGetStoredStringBJ": {
           "prefix": "fnGetStoredStringBJ",
           "body": "GetStoredStringBJ(${1:gamecache cache},${2:string missionKey})",
           "description": "function GetStoredStringBJ takes string key, string missionKey, gamecache cache returns string",
           "scope": "source.vjass"
       },
        "fnLoadRealBJ": {
           "prefix": "fnLoadRealBJ",
           "body": "LoadRealBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadRealBJ takes integer key, integer missionKey, hashtable table returns real",
           "scope": "source.vjass"
       },
        "fnLoadIntegerBJ": {
           "prefix": "fnLoadIntegerBJ",
           "body": "LoadIntegerBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadIntegerBJ takes integer key, integer missionKey, hashtable table returns integer",
           "scope": "source.vjass"
       },
        "fnLoadBooleanBJ": {
           "prefix": "fnLoadBooleanBJ",
           "body": "LoadBooleanBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadBooleanBJ takes integer key, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnLoadStringBJ": {
           "prefix": "fnLoadStringBJ",
           "body": "LoadStringBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadStringBJ takes integer key, integer missionKey, hashtable table returns string",
           "scope": "source.vjass"
       },
        "fnLoadPlayerHandleBJ": {
           "prefix": "fnLoadPlayerHandleBJ",
           "body": "LoadPlayerHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadPlayerHandleBJ takes integer key, integer missionKey, hashtable table returns player",
           "scope": "source.vjass"
       },
        "fnLoadWidgetHandleBJ": {
           "prefix": "fnLoadWidgetHandleBJ",
           "body": "LoadWidgetHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadWidgetHandleBJ takes integer key, integer missionKey, hashtable table returns widget",
           "scope": "source.vjass"
       },
        "fnLoadDestructableHandleBJ": {
           "prefix": "fnLoadDestructableHandleBJ",
           "body": "LoadDestructableHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadDestructableHandleBJ takes integer key, integer missionKey, hashtable table returns destructable",
           "scope": "source.vjass"
       },
        "fnLoadItemHandleBJ": {
           "prefix": "fnLoadItemHandleBJ",
           "body": "LoadItemHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadItemHandleBJ takes integer key, integer missionKey, hashtable table returns item",
           "scope": "source.vjass"
       },
        "fnLoadUnitHandleBJ": {
           "prefix": "fnLoadUnitHandleBJ",
           "body": "LoadUnitHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadUnitHandleBJ takes integer key, integer missionKey, hashtable table returns unit",
           "scope": "source.vjass"
       },
        "fnLoadAbilityHandleBJ": {
           "prefix": "fnLoadAbilityHandleBJ",
           "body": "LoadAbilityHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadAbilityHandleBJ takes integer key, integer missionKey, hashtable table returns ability",
           "scope": "source.vjass"
       },
        "fnLoadTimerHandleBJ": {
           "prefix": "fnLoadTimerHandleBJ",
           "body": "LoadTimerHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadTimerHandleBJ takes integer key, integer missionKey, hashtable table returns timer",
           "scope": "source.vjass"
       },
        "fnLoadTriggerHandleBJ": {
           "prefix": "fnLoadTriggerHandleBJ",
           "body": "LoadTriggerHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadTriggerHandleBJ takes integer key, integer missionKey, hashtable table returns trigger",
           "scope": "source.vjass"
       },
        "fnLoadTriggerConditionHandleBJ": {
           "prefix": "fnLoadTriggerConditionHandleBJ",
           "body": "LoadTriggerConditionHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadTriggerConditionHandleBJ takes integer key, integer missionKey, hashtable table returns triggercondition",
           "scope": "source.vjass"
       },
        "fnLoadTriggerActionHandleBJ": {
           "prefix": "fnLoadTriggerActionHandleBJ",
           "body": "LoadTriggerActionHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadTriggerActionHandleBJ takes integer key, integer missionKey, hashtable table returns triggeraction",
           "scope": "source.vjass"
       },
        "fnLoadTriggerEventHandleBJ": {
           "prefix": "fnLoadTriggerEventHandleBJ",
           "body": "LoadTriggerEventHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadTriggerEventHandleBJ takes integer key, integer missionKey, hashtable table returns event",
           "scope": "source.vjass"
       },
        "fnLoadForceHandleBJ": {
           "prefix": "fnLoadForceHandleBJ",
           "body": "LoadForceHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadForceHandleBJ takes integer key, integer missionKey, hashtable table returns force",
           "scope": "source.vjass"
       },
        "fnLoadGroupHandleBJ": {
           "prefix": "fnLoadGroupHandleBJ",
           "body": "LoadGroupHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadGroupHandleBJ takes integer key, integer missionKey, hashtable table returns group",
           "scope": "source.vjass"
       },
        "fnLoadLocationHandleBJ": {
           "prefix": "fnLoadLocationHandleBJ",
           "body": "LoadLocationHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadLocationHandleBJ takes integer key, integer missionKey, hashtable table returns location",
           "scope": "source.vjass"
       },
        "fnLoadRectHandleBJ": {
           "prefix": "fnLoadRectHandleBJ",
           "body": "LoadRectHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadRectHandleBJ takes integer key, integer missionKey, hashtable table returns rect",
           "scope": "source.vjass"
       },
        "fnLoadBooleanExprHandleBJ": {
           "prefix": "fnLoadBooleanExprHandleBJ",
           "body": "LoadBooleanExprHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadBooleanExprHandleBJ takes integer key, integer missionKey, hashtable table returns boolexpr",
           "scope": "source.vjass"
       },
        "fnLoadSoundHandleBJ": {
           "prefix": "fnLoadSoundHandleBJ",
           "body": "LoadSoundHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadSoundHandleBJ takes integer key, integer missionKey, hashtable table returns sound",
           "scope": "source.vjass"
       },
        "fnLoadEffectHandleBJ": {
           "prefix": "fnLoadEffectHandleBJ",
           "body": "LoadEffectHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadEffectHandleBJ takes integer key, integer missionKey, hashtable table returns effect",
           "scope": "source.vjass"
       },
        "fnLoadUnitPoolHandleBJ": {
           "prefix": "fnLoadUnitPoolHandleBJ",
           "body": "LoadUnitPoolHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadUnitPoolHandleBJ takes integer key, integer missionKey, hashtable table returns unitpool",
           "scope": "source.vjass"
       },
        "fnLoadItemPoolHandleBJ": {
           "prefix": "fnLoadItemPoolHandleBJ",
           "body": "LoadItemPoolHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadItemPoolHandleBJ takes integer key, integer missionKey, hashtable table returns itempool",
           "scope": "source.vjass"
       },
        "fnLoadQuestHandleBJ": {
           "prefix": "fnLoadQuestHandleBJ",
           "body": "LoadQuestHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadQuestHandleBJ takes integer key, integer missionKey, hashtable table returns quest",
           "scope": "source.vjass"
       },
        "fnLoadQuestItemHandleBJ": {
           "prefix": "fnLoadQuestItemHandleBJ",
           "body": "LoadQuestItemHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadQuestItemHandleBJ takes integer key, integer missionKey, hashtable table returns questitem",
           "scope": "source.vjass"
       },
        "fnLoadDefeatConditionHandleBJ": {
           "prefix": "fnLoadDefeatConditionHandleBJ",
           "body": "LoadDefeatConditionHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadDefeatConditionHandleBJ takes integer key, integer missionKey, hashtable table returns defeatcondition",
           "scope": "source.vjass"
       },
        "fnLoadTimerDialogHandleBJ": {
           "prefix": "fnLoadTimerDialogHandleBJ",
           "body": "LoadTimerDialogHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadTimerDialogHandleBJ takes integer key, integer missionKey, hashtable table returns timerdialog",
           "scope": "source.vjass"
       },
        "fnLoadLeaderboardHandleBJ": {
           "prefix": "fnLoadLeaderboardHandleBJ",
           "body": "LoadLeaderboardHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadLeaderboardHandleBJ takes integer key, integer missionKey, hashtable table returns leaderboard",
           "scope": "source.vjass"
       },
        "fnLoadMultiboardHandleBJ": {
           "prefix": "fnLoadMultiboardHandleBJ",
           "body": "LoadMultiboardHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadMultiboardHandleBJ takes integer key, integer missionKey, hashtable table returns multiboard",
           "scope": "source.vjass"
       },
        "fnLoadMultiboardItemHandleBJ": {
           "prefix": "fnLoadMultiboardItemHandleBJ",
           "body": "LoadMultiboardItemHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadMultiboardItemHandleBJ takes integer key, integer missionKey, hashtable table returns multiboarditem",
           "scope": "source.vjass"
       },
        "fnLoadTrackableHandleBJ": {
           "prefix": "fnLoadTrackableHandleBJ",
           "body": "LoadTrackableHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadTrackableHandleBJ takes integer key, integer missionKey, hashtable table returns trackable",
           "scope": "source.vjass"
       },
        "fnLoadDialogHandleBJ": {
           "prefix": "fnLoadDialogHandleBJ",
           "body": "LoadDialogHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadDialogHandleBJ takes integer key, integer missionKey, hashtable table returns dialog",
           "scope": "source.vjass"
       },
        "fnLoadButtonHandleBJ": {
           "prefix": "fnLoadButtonHandleBJ",
           "body": "LoadButtonHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadButtonHandleBJ takes integer key, integer missionKey, hashtable table returns button",
           "scope": "source.vjass"
       },
        "fnLoadTextTagHandleBJ": {
           "prefix": "fnLoadTextTagHandleBJ",
           "body": "LoadTextTagHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadTextTagHandleBJ takes integer key, integer missionKey, hashtable table returns texttag",
           "scope": "source.vjass"
       },
        "fnLoadLightningHandleBJ": {
           "prefix": "fnLoadLightningHandleBJ",
           "body": "LoadLightningHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadLightningHandleBJ takes integer key, integer missionKey, hashtable table returns lightning",
           "scope": "source.vjass"
       },
        "fnLoadImageHandleBJ": {
           "prefix": "fnLoadImageHandleBJ",
           "body": "LoadImageHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadImageHandleBJ takes integer key, integer missionKey, hashtable table returns image",
           "scope": "source.vjass"
       },
        "fnLoadUbersplatHandleBJ": {
           "prefix": "fnLoadUbersplatHandleBJ",
           "body": "LoadUbersplatHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadUbersplatHandleBJ takes integer key, integer missionKey, hashtable table returns ubersplat",
           "scope": "source.vjass"
       },
        "fnLoadRegionHandleBJ": {
           "prefix": "fnLoadRegionHandleBJ",
           "body": "LoadRegionHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadRegionHandleBJ takes integer key, integer missionKey, hashtable table returns region",
           "scope": "source.vjass"
       },
        "fnLoadFogStateHandleBJ": {
           "prefix": "fnLoadFogStateHandleBJ",
           "body": "LoadFogStateHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadFogStateHandleBJ takes integer key, integer missionKey, hashtable table returns fogstate",
           "scope": "source.vjass"
       },
        "fnLoadFogModifierHandleBJ": {
           "prefix": "fnLoadFogModifierHandleBJ",
           "body": "LoadFogModifierHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadFogModifierHandleBJ takes integer key, integer missionKey, hashtable table returns fogmodifier",
           "scope": "source.vjass"
       },
        "fnLoadHashtableHandleBJ": {
           "prefix": "fnLoadHashtableHandleBJ",
           "body": "LoadHashtableHandleBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function LoadHashtableHandleBJ takes integer key, integer missionKey, hashtable table returns hashtable",
           "scope": "source.vjass"
       },
        "fnRestoreUnitLocFacingAngleBJ": {
           "prefix": "fnRestoreUnitLocFacingAngleBJ",
           "body": "RestoreUnitLocFacingAngleBJ(${1:real facing},${2:gamecache cache},${3:location loc},${4:string missionKey},${5:player forWhichPlayer})",
           "description": "function RestoreUnitLocFacingAngleBJ takes string key, string missionKey, gamecache cache, player forWhichPlayer, location loc, real facing returns unit",
           "scope": "source.vjass"
       },
        "fnRestoreUnitLocFacingPointBJ": {
           "prefix": "fnRestoreUnitLocFacingPointBJ",
           "body": "RestoreUnitLocFacingPointBJ(${1:gamecache cache},${2:location lookAt},${3:string missionKey},${4:player forWhichPlayer})",
           "description": "function RestoreUnitLocFacingPointBJ takes string key, string missionKey, gamecache cache, player forWhichPlayer, location loc, location lookAt returns unit",
           "scope": "source.vjass"
       },
        "fnGetLastRestoredUnitBJ": {
           "prefix": "fnGetLastRestoredUnitBJ",
           "body": "GetLastRestoredUnitBJ(${1:nothing})",
           "description": "function GetLastRestoredUnitBJ takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnFlushGameCacheBJ": {
           "prefix": "fnFlushGameCacheBJ",
           "body": "FlushGameCacheBJ(${1:gamecache cache})",
           "description": "function FlushGameCacheBJ takes gamecache cache returns nothing",
           "scope": "source.vjass"
       },
        "fnFlushStoredMissionBJ": {
           "prefix": "fnFlushStoredMissionBJ",
           "body": "FlushStoredMissionBJ(${1:gamecache cache},${2:string missionKey})",
           "description": "function FlushStoredMissionBJ takes string missionKey, gamecache cache returns nothing",
           "scope": "source.vjass"
       },
        "fnFlushParentHashtableBJ": {
           "prefix": "fnFlushParentHashtableBJ",
           "body": "FlushParentHashtableBJ(${1:hashtable table})",
           "description": "function FlushParentHashtableBJ takes hashtable table returns nothing",
           "scope": "source.vjass"
       },
        "fnFlushChildHashtableBJ": {
           "prefix": "fnFlushChildHashtableBJ",
           "body": "FlushChildHashtableBJ(${1:integer missionKey},${2:hashtable table})",
           "description": "function FlushChildHashtableBJ takes integer missionKey, hashtable table returns nothing",
           "scope": "source.vjass"
       },
        "fnHaveStoredValue": {
           "prefix": "fnHaveStoredValue",
           "body": "HaveStoredValue(${1:integer valueType},${2:string missionKey},${3:gamecache cache})",
           "description": "function HaveStoredValue takes string key, integer valueType, string missionKey, gamecache cache returns boolean",
           "scope": "source.vjass"
       },
        "fnHaveSavedValue": {
           "prefix": "fnHaveSavedValue",
           "body": "HaveSavedValue(${1:integer missionKey},${2:hashtable table})",
           "description": "function HaveSavedValue takes integer key, integer valueType, integer missionKey, hashtable table returns boolean",
           "scope": "source.vjass"
       },
        "fnShowCustomCampaignButton": {
           "prefix": "fnShowCustomCampaignButton",
           "body": "ShowCustomCampaignButton(${1:integer whichButton},${2:boolean show})",
           "description": "function ShowCustomCampaignButton takes boolean show, integer whichButton returns nothing",
           "scope": "source.vjass"
       },
        "fnIsCustomCampaignButtonVisibile": {
           "prefix": "fnIsCustomCampaignButtonVisibile",
           "body": "IsCustomCampaignButtonVisibile(${1:integer whichButton})",
           "description": "function IsCustomCampaignButtonVisibile takes integer whichButton returns boolean",
           "scope": "source.vjass"
       },
        "fnLoadGameBJ": {
           "prefix": "fnLoadGameBJ",
           "body": "LoadGameBJ(${1:boolean doScoreScreen},${2:string loadFileName})",
           "description": "function LoadGameBJ takes string loadFileName, boolean doScoreScreen returns nothing",
           "scope": "source.vjass"
       },
        "fnSaveAndChangeLevelBJ": {
           "prefix": "fnSaveAndChangeLevelBJ",
           "body": "SaveAndChangeLevelBJ(${1:boolean doScoreScreen},${2:string newLevel})",
           "description": "function SaveAndChangeLevelBJ takes string saveFileName, string newLevel, boolean doScoreScreen returns nothing",
           "scope": "source.vjass"
       },
        "fnSaveAndLoadGameBJ": {
           "prefix": "fnSaveAndLoadGameBJ",
           "body": "SaveAndLoadGameBJ(${1:boolean doScoreScreen},${2:string loadFileName})",
           "description": "function SaveAndLoadGameBJ takes string saveFileName, string loadFileName, boolean doScoreScreen returns nothing",
           "scope": "source.vjass"
       },
        "fnRenameSaveDirectoryBJ": {
           "prefix": "fnRenameSaveDirectoryBJ",
           "body": "RenameSaveDirectoryBJ(${1:string destDirName})",
           "description": "function RenameSaveDirectoryBJ takes string sourceDirName, string destDirName returns boolean",
           "scope": "source.vjass"
       },
        "fnRemoveSaveDirectoryBJ": {
           "prefix": "fnRemoveSaveDirectoryBJ",
           "body": "RemoveSaveDirectoryBJ(${1:string sourceDirName})",
           "description": "function RemoveSaveDirectoryBJ takes string sourceDirName returns boolean",
           "scope": "source.vjass"
       },
        "fnCopySaveGameBJ": {
           "prefix": "fnCopySaveGameBJ",
           "body": "CopySaveGameBJ(${1:string destSaveName})",
           "description": "function CopySaveGameBJ takes string sourceSaveName, string destSaveName returns boolean",
           "scope": "source.vjass"
       },
        "fnGetPlayerStartLocationX": {
           "prefix": "fnGetPlayerStartLocationX",
           "body": "GetPlayerStartLocationX(${1:player whichPlayer})",
           "description": "function GetPlayerStartLocationX takes player whichPlayer returns real",
           "scope": "source.vjass"
       },
        "fnGetPlayerStartLocationY": {
           "prefix": "fnGetPlayerStartLocationY",
           "body": "GetPlayerStartLocationY(${1:player whichPlayer})",
           "description": "function GetPlayerStartLocationY takes player whichPlayer returns real",
           "scope": "source.vjass"
       },
        "fnGetPlayerStartLocationLoc": {
           "prefix": "fnGetPlayerStartLocationLoc",
           "body": "GetPlayerStartLocationLoc(${1:player whichPlayer})",
           "description": "function GetPlayerStartLocationLoc takes player whichPlayer returns location",
           "scope": "source.vjass"
       },
        "fnGetRectCenter": {
           "prefix": "fnGetRectCenter",
           "body": "GetRectCenter(${1:rect whichRect})",
           "description": "function GetRectCenter takes rect whichRect returns location",
           "scope": "source.vjass"
       },
        "fnIsPlayerSlotState": {
           "prefix": "fnIsPlayerSlotState",
           "body": "IsPlayerSlotState(${1:player whichPlayer},${2:playerslotstate whichState})",
           "description": "function IsPlayerSlotState takes player whichPlayer, playerslotstate whichState returns boolean",
           "scope": "source.vjass"
       },
        "fnGetFadeFromSeconds": {
           "prefix": "fnGetFadeFromSeconds",
           "body": "GetFadeFromSeconds(${1:real seconds})",
           "description": "function GetFadeFromSeconds takes real seconds returns integer",
           "scope": "source.vjass"
       },
        "fnGetFadeFromSecondsAsReal": {
           "prefix": "fnGetFadeFromSecondsAsReal",
           "body": "GetFadeFromSecondsAsReal(${1:real seconds})",
           "description": "function GetFadeFromSecondsAsReal takes real seconds returns real",
           "scope": "source.vjass"
       },
        "fnAdjustPlayerStateSimpleBJ": {
           "prefix": "fnAdjustPlayerStateSimpleBJ",
           "body": "AdjustPlayerStateSimpleBJ(${1:player whichPlayer},${2:integer delta},${3:playerstate whichPlayerState})",
           "description": "function AdjustPlayerStateSimpleBJ takes player whichPlayer, playerstate whichPlayerState, integer delta returns nothing",
           "scope": "source.vjass"
       },
        "fnAdjustPlayerStateBJ": {
           "prefix": "fnAdjustPlayerStateBJ",
           "body": "AdjustPlayerStateBJ(${1:integer delta},${2:playerstate whichPlayerState},${3:player whichPlayer})",
           "description": "function AdjustPlayerStateBJ takes integer delta, player whichPlayer, playerstate whichPlayerState returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerStateBJ": {
           "prefix": "fnSetPlayerStateBJ",
           "body": "SetPlayerStateBJ(${1:player whichPlayer},${2:integer value},${3:playerstate whichPlayerState})",
           "description": "function SetPlayerStateBJ takes player whichPlayer, playerstate whichPlayerState, integer value returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerFlagBJ": {
           "prefix": "fnSetPlayerFlagBJ",
           "body": "SetPlayerFlagBJ(${1:playerstate whichPlayerFlag},${2:boolean flag},${3:player whichPlayer})",
           "description": "function SetPlayerFlagBJ takes playerstate whichPlayerFlag, boolean flag, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerTaxRateBJ": {
           "prefix": "fnSetPlayerTaxRateBJ",
           "body": "SetPlayerTaxRateBJ(${1:player otherPlayer},${2:integer rate},${3:playerstate whichResource})",
           "description": "function SetPlayerTaxRateBJ takes integer rate, playerstate whichResource, player sourcePlayer, player otherPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnGetPlayerTaxRateBJ": {
           "prefix": "fnGetPlayerTaxRateBJ",
           "body": "GetPlayerTaxRateBJ(${1:playerstate whichResource},${2:player otherPlayer})",
           "description": "function GetPlayerTaxRateBJ takes playerstate whichResource, player sourcePlayer, player otherPlayer returns integer",
           "scope": "source.vjass"
       },
        "fnIsPlayerFlagSetBJ": {
           "prefix": "fnIsPlayerFlagSetBJ",
           "body": "IsPlayerFlagSetBJ(${1:playerstate whichPlayerFlag},${2:player whichPlayer})",
           "description": "function IsPlayerFlagSetBJ takes playerstate whichPlayerFlag, player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnAddResourceAmountBJ": {
           "prefix": "fnAddResourceAmountBJ",
           "body": "AddResourceAmountBJ(${1:integer delta},${2:unit whichUnit})",
           "description": "function AddResourceAmountBJ takes integer delta, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnGetConvertedPlayerId": {
           "prefix": "fnGetConvertedPlayerId",
           "body": "GetConvertedPlayerId(${1:player whichPlayer})",
           "description": "function GetConvertedPlayerId takes player whichPlayer returns integer",
           "scope": "source.vjass"
       },
        "fnConvertedPlayer": {
           "prefix": "fnConvertedPlayer",
           "body": "ConvertedPlayer(${1:integer convertedPlayerId})",
           "description": "function ConvertedPlayer takes integer convertedPlayerId returns player",
           "scope": "source.vjass"
       },
        "fnGetRectWidthBJ": {
           "prefix": "fnGetRectWidthBJ",
           "body": "GetRectWidthBJ(${1:rect r})",
           "description": "function GetRectWidthBJ takes rect r returns real",
           "scope": "source.vjass"
       },
        "fnGetRectHeightBJ": {
           "prefix": "fnGetRectHeightBJ",
           "body": "GetRectHeightBJ(${1:rect r})",
           "description": "function GetRectHeightBJ takes rect r returns real",
           "scope": "source.vjass"
       },
        "fnBlightGoldMineForPlayerBJ": {
           "prefix": "fnBlightGoldMineForPlayerBJ",
           "body": "BlightGoldMineForPlayerBJ(${1:player whichPlayer},${2:unit goldMine})",
           "description": "function BlightGoldMineForPlayerBJ takes unit goldMine, player whichPlayer returns unit",
           "scope": "source.vjass"
       },
        "fnBlightGoldMineForPlayer": {
           "prefix": "fnBlightGoldMineForPlayer",
           "body": "BlightGoldMineForPlayer(${1:player whichPlayer},${2:unit goldMine})",
           "description": "function BlightGoldMineForPlayer takes unit goldMine, player whichPlayer returns unit",
           "scope": "source.vjass"
       },
        "fnGetLastHauntedGoldMine": {
           "prefix": "fnGetLastHauntedGoldMine",
           "body": "GetLastHauntedGoldMine(${1:nothing})",
           "description": "function GetLastHauntedGoldMine takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnIsPointBlightedBJ": {
           "prefix": "fnIsPointBlightedBJ",
           "body": "IsPointBlightedBJ(${1:location where})",
           "description": "function IsPointBlightedBJ takes location where returns boolean",
           "scope": "source.vjass"
       },
        "fnSetPlayerColorBJEnum": {
           "prefix": "fnSetPlayerColorBJEnum",
           "body": "SetPlayerColorBJEnum(${1:nothing})",
           "description": "function SetPlayerColorBJEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerColorBJ": {
           "prefix": "fnSetPlayerColorBJ",
           "body": "SetPlayerColorBJ(${1:boolean changeExisting},${2:player whichPlayer},${3:playercolor color})",
           "description": "function SetPlayerColorBJ takes player whichPlayer, playercolor color, boolean changeExisting returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerUnitAvailableBJ": {
           "prefix": "fnSetPlayerUnitAvailableBJ",
           "body": "SetPlayerUnitAvailableBJ(${1:integer unitId},${2:boolean allowed},${3:player whichPlayer})",
           "description": "function SetPlayerUnitAvailableBJ takes integer unitId, boolean allowed, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnLockGameSpeedBJ": {
           "prefix": "fnLockGameSpeedBJ",
           "body": "LockGameSpeedBJ(${1:nothing})",
           "description": "function LockGameSpeedBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnUnlockGameSpeedBJ": {
           "prefix": "fnUnlockGameSpeedBJ",
           "body": "UnlockGameSpeedBJ(${1:nothing})",
           "description": "function UnlockGameSpeedBJ takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnIssueTargetOrderBJ": {
           "prefix": "fnIssueTargetOrderBJ",
           "body": "IssueTargetOrderBJ(${1:widget targetWidget},${2:string order},${3:unit whichUnit})",
           "description": "function IssueTargetOrderBJ takes unit whichUnit, string order, widget targetWidget returns boolean",
           "scope": "source.vjass"
       },
        "fnIssuePointOrderLocBJ": {
           "prefix": "fnIssuePointOrderLocBJ",
           "body": "IssuePointOrderLocBJ(${1:string order},${2:unit whichUnit},${3:location whichLocation})",
           "description": "function IssuePointOrderLocBJ takes unit whichUnit, string order, location whichLocation returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueTargetDestructableOrder": {
           "prefix": "fnIssueTargetDestructableOrder",
           "body": "IssueTargetDestructableOrder(${1:widget targetWidget},${2:string order},${3:unit whichUnit})",
           "description": "function IssueTargetDestructableOrder takes unit whichUnit, string order, widget targetWidget returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueTargetItemOrder": {
           "prefix": "fnIssueTargetItemOrder",
           "body": "IssueTargetItemOrder(${1:widget targetWidget},${2:string order},${3:unit whichUnit})",
           "description": "function IssueTargetItemOrder takes unit whichUnit, string order, widget targetWidget returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueImmediateOrderBJ": {
           "prefix": "fnIssueImmediateOrderBJ",
           "body": "IssueImmediateOrderBJ(${1:string order},${2:unit whichUnit})",
           "description": "function IssueImmediateOrderBJ takes unit whichUnit, string order returns boolean",
           "scope": "source.vjass"
       },
        "fnGroupTargetOrderBJ": {
           "prefix": "fnGroupTargetOrderBJ",
           "body": "GroupTargetOrderBJ(${1:widget targetWidget},${2:group whichGroup},${3:string order})",
           "description": "function GroupTargetOrderBJ takes group whichGroup, string order, widget targetWidget returns boolean",
           "scope": "source.vjass"
       },
        "fnGroupPointOrderLocBJ": {
           "prefix": "fnGroupPointOrderLocBJ",
           "body": "GroupPointOrderLocBJ(${1:group whichGroup},${2:string order},${3:location whichLocation})",
           "description": "function GroupPointOrderLocBJ takes group whichGroup, string order, location whichLocation returns boolean",
           "scope": "source.vjass"
       },
        "fnGroupImmediateOrderBJ": {
           "prefix": "fnGroupImmediateOrderBJ",
           "body": "GroupImmediateOrderBJ(${1:group whichGroup},${2:string order})",
           "description": "function GroupImmediateOrderBJ takes group whichGroup, string order returns boolean",
           "scope": "source.vjass"
       },
        "fnGroupTargetDestructableOrder": {
           "prefix": "fnGroupTargetDestructableOrder",
           "body": "GroupTargetDestructableOrder(${1:widget targetWidget},${2:group whichGroup},${3:string order})",
           "description": "function GroupTargetDestructableOrder takes group whichGroup, string order, widget targetWidget returns boolean",
           "scope": "source.vjass"
       },
        "fnGroupTargetItemOrder": {
           "prefix": "fnGroupTargetItemOrder",
           "body": "GroupTargetItemOrder(${1:widget targetWidget},${2:group whichGroup},${3:string order})",
           "description": "function GroupTargetItemOrder takes group whichGroup, string order, widget targetWidget returns boolean",
           "scope": "source.vjass"
       },
        "fnGetDyingDestructable": {
           "prefix": "fnGetDyingDestructable",
           "body": "GetDyingDestructable(${1:nothing})",
           "description": "function GetDyingDestructable takes nothing returns destructable",
           "scope": "source.vjass"
       },
        "fnSetUnitRallyPoint": {
           "prefix": "fnSetUnitRallyPoint",
           "body": "SetUnitRallyPoint(${1:location targPos},${2:unit whichUnit})",
           "description": "function SetUnitRallyPoint takes unit whichUnit, location targPos returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitRallyUnit": {
           "prefix": "fnSetUnitRallyUnit",
           "body": "SetUnitRallyUnit(${1:unit targUnit})",
           "description": "function SetUnitRallyUnit takes unit whichUnit, unit targUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitRallyDestructable": {
           "prefix": "fnSetUnitRallyDestructable",
           "body": "SetUnitRallyDestructable(${1:destructable targDest},${2:unit whichUnit})",
           "description": "function SetUnitRallyDestructable takes unit whichUnit, destructable targDest returns nothing",
           "scope": "source.vjass"
       },
        "fnSaveDyingWidget": {
           "prefix": "fnSaveDyingWidget",
           "body": "SaveDyingWidget(${1:nothing})",
           "description": "function SaveDyingWidget takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetBlightRectBJ": {
           "prefix": "fnSetBlightRectBJ",
           "body": "SetBlightRectBJ(${1:player whichPlayer},${2:boolean addBlight},${3:rect r})",
           "description": "function SetBlightRectBJ takes boolean addBlight, player whichPlayer, rect r returns nothing",
           "scope": "source.vjass"
       },
        "fnSetBlightRadiusLocBJ": {
           "prefix": "fnSetBlightRadiusLocBJ",
           "body": "SetBlightRadiusLocBJ(${1:real radius},${2:player whichPlayer},${3:boolean addBlight},${4:location loc})",
           "description": "function SetBlightRadiusLocBJ takes boolean addBlight, player whichPlayer, location loc, real radius returns nothing",
           "scope": "source.vjass"
       },
        "fnGetAbilityName": {
           "prefix": "fnGetAbilityName",
           "body": "GetAbilityName(${1:integer abilcode})",
           "description": "function GetAbilityName takes integer abilcode returns string",
           "scope": "source.vjass"
       },
        "fnMeleeStartingVisibility": {
           "prefix": "fnMeleeStartingVisibility",
           "body": "MeleeStartingVisibility(${1:nothing})",
           "description": "function MeleeStartingVisibility takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeStartingResources": {
           "prefix": "fnMeleeStartingResources",
           "body": "MeleeStartingResources(${1:nothing})",
           "description": "function MeleeStartingResources takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnReducePlayerTechMaxAllowed": {
           "prefix": "fnReducePlayerTechMaxAllowed",
           "body": "ReducePlayerTechMaxAllowed(${1:player whichPlayer},${2:integer limit})",
           "description": "function ReducePlayerTechMaxAllowed takes player whichPlayer, integer techId, integer limit returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeStartingHeroLimit": {
           "prefix": "fnMeleeStartingHeroLimit",
           "body": "MeleeStartingHeroLimit(${1:nothing})",
           "description": "function MeleeStartingHeroLimit takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeTrainedUnitIsHeroBJFilter": {
           "prefix": "fnMeleeTrainedUnitIsHeroBJFilter",
           "body": "MeleeTrainedUnitIsHeroBJFilter(${1:nothing})",
           "description": "function MeleeTrainedUnitIsHeroBJFilter takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnMeleeGrantItemsToHero": {
           "prefix": "fnMeleeGrantItemsToHero",
           "body": "MeleeGrantItemsToHero(${1:unit whichUnit})",
           "description": "function MeleeGrantItemsToHero takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeGrantItemsToTrainedHero": {
           "prefix": "fnMeleeGrantItemsToTrainedHero",
           "body": "MeleeGrantItemsToTrainedHero(${1:nothing})",
           "description": "function MeleeGrantItemsToTrainedHero takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeGrantItemsToHiredHero": {
           "prefix": "fnMeleeGrantItemsToHiredHero",
           "body": "MeleeGrantItemsToHiredHero(${1:nothing})",
           "description": "function MeleeGrantItemsToHiredHero takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeGrantHeroItems": {
           "prefix": "fnMeleeGrantHeroItems",
           "body": "MeleeGrantHeroItems(${1:nothing})",
           "description": "function MeleeGrantHeroItems takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeClearExcessUnit": {
           "prefix": "fnMeleeClearExcessUnit",
           "body": "MeleeClearExcessUnit(${1:nothing})",
           "description": "function MeleeClearExcessUnit takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeClearNearbyUnits": {
           "prefix": "fnMeleeClearNearbyUnits",
           "body": "MeleeClearNearbyUnits(${1:real range})",
           "description": "function MeleeClearNearbyUnits takes real x, real y, real range returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeClearExcessUnits": {
           "prefix": "fnMeleeClearExcessUnits",
           "body": "MeleeClearExcessUnits(${1:nothing})",
           "description": "function MeleeClearExcessUnits takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeEnumFindNearestMine": {
           "prefix": "fnMeleeEnumFindNearestMine",
           "body": "MeleeEnumFindNearestMine(${1:nothing})",
           "description": "function MeleeEnumFindNearestMine takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeFindNearestMine": {
           "prefix": "fnMeleeFindNearestMine",
           "body": "MeleeFindNearestMine(${1:real range},${2:location src})",
           "description": "function MeleeFindNearestMine takes location src, real range returns unit",
           "scope": "source.vjass"
       },
        "fnMeleeRandomHeroLoc": {
           "prefix": "fnMeleeRandomHeroLoc",
           "body": "MeleeRandomHeroLoc(${1:player p},${2:location loc},${3:integer id4})",
           "description": "function MeleeRandomHeroLoc takes player p, integer id1, integer id2, integer id3, integer id4, location loc returns unit",
           "scope": "source.vjass"
       },
        "fnMeleeGetProjectedLoc": {
           "prefix": "fnMeleeGetProjectedLoc",
           "body": "MeleeGetProjectedLoc(${1:real deltaAngle},${2:location targ})",
           "description": "function MeleeGetProjectedLoc takes location src, location targ, real distance, real deltaAngle returns location",
           "scope": "source.vjass"
       },
        "fnMeleeGetNearestValueWithin": {
           "prefix": "fnMeleeGetNearestValueWithin",
           "body": "MeleeGetNearestValueWithin(${1:real maxVal})",
           "description": "function MeleeGetNearestValueWithin takes real val, real minVal, real maxVal returns real",
           "scope": "source.vjass"
       },
        "fnMeleeGetLocWithinRect": {
           "prefix": "fnMeleeGetLocWithinRect",
           "body": "MeleeGetLocWithinRect(${1:location src},${2:rect r})",
           "description": "function MeleeGetLocWithinRect takes location src, rect r returns location",
           "scope": "source.vjass"
       },
        "fnMeleeStartingUnitsHuman": {
           "prefix": "fnMeleeStartingUnitsHuman",
           "body": "MeleeStartingUnitsHuman(${1:player whichPlayer},${2:boolean doPreload},${3:location startLoc})",
           "description": "function MeleeStartingUnitsHuman takes player whichPlayer, location startLoc, boolean doHeroes, boolean doCamera, boolean doPreload returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeStartingUnitsOrc": {
           "prefix": "fnMeleeStartingUnitsOrc",
           "body": "MeleeStartingUnitsOrc(${1:player whichPlayer},${2:boolean doPreload},${3:location startLoc})",
           "description": "function MeleeStartingUnitsOrc takes player whichPlayer, location startLoc, boolean doHeroes, boolean doCamera, boolean doPreload returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeStartingUnitsUndead": {
           "prefix": "fnMeleeStartingUnitsUndead",
           "body": "MeleeStartingUnitsUndead(${1:player whichPlayer},${2:boolean doPreload},${3:location startLoc})",
           "description": "function MeleeStartingUnitsUndead takes player whichPlayer, location startLoc, boolean doHeroes, boolean doCamera, boolean doPreload returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeStartingUnitsNightElf": {
           "prefix": "fnMeleeStartingUnitsNightElf",
           "body": "MeleeStartingUnitsNightElf(${1:player whichPlayer},${2:boolean doPreload},${3:location startLoc})",
           "description": "function MeleeStartingUnitsNightElf takes player whichPlayer, location startLoc, boolean doHeroes, boolean doCamera, boolean doPreload returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeStartingUnitsUnknownRace": {
           "prefix": "fnMeleeStartingUnitsUnknownRace",
           "body": "MeleeStartingUnitsUnknownRace(${1:player whichPlayer},${2:boolean doPreload},${3:location startLoc})",
           "description": "function MeleeStartingUnitsUnknownRace takes player whichPlayer, location startLoc, boolean doHeroes, boolean doCamera, boolean doPreload returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeStartingUnits": {
           "prefix": "fnMeleeStartingUnits",
           "body": "MeleeStartingUnits(${1:nothing})",
           "description": "function MeleeStartingUnits takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeStartingUnitsForPlayer": {
           "prefix": "fnMeleeStartingUnitsForPlayer",
           "body": "MeleeStartingUnitsForPlayer(${1:boolean doHeroes},${2:player whichPlayer},${3:race whichRace},${4:location loc})",
           "description": "function MeleeStartingUnitsForPlayer takes race whichRace, player whichPlayer, location loc, boolean doHeroes returns nothing",
           "scope": "source.vjass"
       },
        "fnPickMeleeAI": {
           "prefix": "fnPickMeleeAI",
           "body": "PickMeleeAI(${1:player num},${2:string s3})",
           "description": "function PickMeleeAI takes player num, string s1, string s2, string s3 returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeStartingAI": {
           "prefix": "fnMeleeStartingAI",
           "body": "MeleeStartingAI(${1:nothing})",
           "description": "function MeleeStartingAI takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnLockGuardPosition": {
           "prefix": "fnLockGuardPosition",
           "body": "LockGuardPosition(${1:unit targ})",
           "description": "function LockGuardPosition takes unit targ returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleePlayerIsOpponent": {
           "prefix": "fnMeleePlayerIsOpponent",
           "body": "MeleePlayerIsOpponent(${1:integer opponentIndex})",
           "description": "function MeleePlayerIsOpponent takes integer playerIndex, integer opponentIndex returns boolean",
           "scope": "source.vjass"
       },
        "fnMeleeGetAllyStructureCount": {
           "prefix": "fnMeleeGetAllyStructureCount",
           "body": "MeleeGetAllyStructureCount(${1:player whichPlayer})",
           "description": "function MeleeGetAllyStructureCount takes player whichPlayer returns integer",
           "scope": "source.vjass"
       },
        "fnMeleeGetAllyCount": {
           "prefix": "fnMeleeGetAllyCount",
           "body": "MeleeGetAllyCount(${1:player whichPlayer})",
           "description": "function MeleeGetAllyCount takes player whichPlayer returns integer",
           "scope": "source.vjass"
       },
        "fnMeleeGetAllyKeyStructureCount": {
           "prefix": "fnMeleeGetAllyKeyStructureCount",
           "body": "MeleeGetAllyKeyStructureCount(${1:player whichPlayer})",
           "description": "function MeleeGetAllyKeyStructureCount takes player whichPlayer returns integer",
           "scope": "source.vjass"
       },
        "fnMeleeDoDrawEnum": {
           "prefix": "fnMeleeDoDrawEnum",
           "body": "MeleeDoDrawEnum(${1:nothing})",
           "description": "function MeleeDoDrawEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeDoVictoryEnum": {
           "prefix": "fnMeleeDoVictoryEnum",
           "body": "MeleeDoVictoryEnum(${1:nothing})",
           "description": "function MeleeDoVictoryEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeDoDefeat": {
           "prefix": "fnMeleeDoDefeat",
           "body": "MeleeDoDefeat(${1:player whichPlayer})",
           "description": "function MeleeDoDefeat takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeDoDefeatEnum": {
           "prefix": "fnMeleeDoDefeatEnum",
           "body": "MeleeDoDefeatEnum(${1:nothing})",
           "description": "function MeleeDoDefeatEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeDoLeave": {
           "prefix": "fnMeleeDoLeave",
           "body": "MeleeDoLeave(${1:player whichPlayer})",
           "description": "function MeleeDoLeave takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeRemoveObservers": {
           "prefix": "fnMeleeRemoveObservers",
           "body": "MeleeRemoveObservers(${1:nothing})",
           "description": "function MeleeRemoveObservers takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeCheckForVictors": {
           "prefix": "fnMeleeCheckForVictors",
           "body": "MeleeCheckForVictors(${1:nothing})",
           "description": "function MeleeCheckForVictors takes nothing returns force",
           "scope": "source.vjass"
       },
        "fnMeleeCheckForLosersAndVictors": {
           "prefix": "fnMeleeCheckForLosersAndVictors",
           "body": "MeleeCheckForLosersAndVictors(${1:nothing})",
           "description": "function MeleeCheckForLosersAndVictors takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeGetCrippledWarningMessage": {
           "prefix": "fnMeleeGetCrippledWarningMessage",
           "body": "MeleeGetCrippledWarningMessage(${1:player whichPlayer})",
           "description": "function MeleeGetCrippledWarningMessage takes player whichPlayer returns string",
           "scope": "source.vjass"
       },
        "fnMeleeGetCrippledTimerMessage": {
           "prefix": "fnMeleeGetCrippledTimerMessage",
           "body": "MeleeGetCrippledTimerMessage(${1:player whichPlayer})",
           "description": "function MeleeGetCrippledTimerMessage takes player whichPlayer returns string",
           "scope": "source.vjass"
       },
        "fnMeleeGetCrippledRevealedMessage": {
           "prefix": "fnMeleeGetCrippledRevealedMessage",
           "body": "MeleeGetCrippledRevealedMessage(${1:player whichPlayer})",
           "description": "function MeleeGetCrippledRevealedMessage takes player whichPlayer returns string",
           "scope": "source.vjass"
       },
        "fnMeleeExposePlayer": {
           "prefix": "fnMeleeExposePlayer",
           "body": "MeleeExposePlayer(${1:player whichPlayer},${2:boolean expose})",
           "description": "function MeleeExposePlayer takes player whichPlayer, boolean expose returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeExposeAllPlayers": {
           "prefix": "fnMeleeExposeAllPlayers",
           "body": "MeleeExposeAllPlayers(${1:nothing})",
           "description": "function MeleeExposeAllPlayers takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeCrippledPlayerTimeout": {
           "prefix": "fnMeleeCrippledPlayerTimeout",
           "body": "MeleeCrippledPlayerTimeout(${1:nothing})",
           "description": "function MeleeCrippledPlayerTimeout takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleePlayerIsCrippled": {
           "prefix": "fnMeleePlayerIsCrippled",
           "body": "MeleePlayerIsCrippled(${1:player whichPlayer})",
           "description": "function MeleePlayerIsCrippled takes player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnMeleeCheckForCrippledPlayers": {
           "prefix": "fnMeleeCheckForCrippledPlayers",
           "body": "MeleeCheckForCrippledPlayers(${1:nothing})",
           "description": "function MeleeCheckForCrippledPlayers takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeCheckLostUnit": {
           "prefix": "fnMeleeCheckLostUnit",
           "body": "MeleeCheckLostUnit(${1:unit lostUnit})",
           "description": "function MeleeCheckLostUnit takes unit lostUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeCheckAddedUnit": {
           "prefix": "fnMeleeCheckAddedUnit",
           "body": "MeleeCheckAddedUnit(${1:unit addedUnit})",
           "description": "function MeleeCheckAddedUnit takes unit addedUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeTriggerActionConstructCancel": {
           "prefix": "fnMeleeTriggerActionConstructCancel",
           "body": "MeleeTriggerActionConstructCancel(${1:nothing})",
           "description": "function MeleeTriggerActionConstructCancel takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeTriggerActionUnitDeath": {
           "prefix": "fnMeleeTriggerActionUnitDeath",
           "body": "MeleeTriggerActionUnitDeath(${1:nothing})",
           "description": "function MeleeTriggerActionUnitDeath takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeTriggerActionUnitConstructionStart": {
           "prefix": "fnMeleeTriggerActionUnitConstructionStart",
           "body": "MeleeTriggerActionUnitConstructionStart(${1:nothing})",
           "description": "function MeleeTriggerActionUnitConstructionStart takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeTriggerActionPlayerDefeated": {
           "prefix": "fnMeleeTriggerActionPlayerDefeated",
           "body": "MeleeTriggerActionPlayerDefeated(${1:nothing})",
           "description": "function MeleeTriggerActionPlayerDefeated takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeTriggerActionPlayerLeft": {
           "prefix": "fnMeleeTriggerActionPlayerLeft",
           "body": "MeleeTriggerActionPlayerLeft(${1:nothing})",
           "description": "function MeleeTriggerActionPlayerLeft takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeTriggerActionAllianceChange": {
           "prefix": "fnMeleeTriggerActionAllianceChange",
           "body": "MeleeTriggerActionAllianceChange(${1:nothing})",
           "description": "function MeleeTriggerActionAllianceChange takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeTriggerTournamentFinishSoon": {
           "prefix": "fnMeleeTriggerTournamentFinishSoon",
           "body": "MeleeTriggerTournamentFinishSoon(${1:nothing})",
           "description": "function MeleeTriggerTournamentFinishSoon takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeWasUserPlayer": {
           "prefix": "fnMeleeWasUserPlayer",
           "body": "MeleeWasUserPlayer(${1:player whichPlayer})",
           "description": "function MeleeWasUserPlayer takes player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnMeleeTournamentFinishNowRuleA": {
           "prefix": "fnMeleeTournamentFinishNowRuleA",
           "body": "MeleeTournamentFinishNowRuleA(${1:integer multiplier})",
           "description": "function MeleeTournamentFinishNowRuleA takes integer multiplier returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeTriggerTournamentFinishNow": {
           "prefix": "fnMeleeTriggerTournamentFinishNow",
           "body": "MeleeTriggerTournamentFinishNow(${1:nothing})",
           "description": "function MeleeTriggerTournamentFinishNow takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeInitVictoryDefeat": {
           "prefix": "fnMeleeInitVictoryDefeat",
           "body": "MeleeInitVictoryDefeat(${1:nothing})",
           "description": "function MeleeInitVictoryDefeat takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCheckInitPlayerSlotAvailability": {
           "prefix": "fnCheckInitPlayerSlotAvailability",
           "body": "CheckInitPlayerSlotAvailability(${1:nothing})",
           "description": "function CheckInitPlayerSlotAvailability takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerSlotAvailable": {
           "prefix": "fnSetPlayerSlotAvailable",
           "body": "SetPlayerSlotAvailable(${1:player whichPlayer},${2:mapcontrol control})",
           "description": "function SetPlayerSlotAvailable takes player whichPlayer, mapcontrol control returns nothing",
           "scope": "source.vjass"
       },
        "fnTeamInitPlayerSlots": {
           "prefix": "fnTeamInitPlayerSlots",
           "body": "TeamInitPlayerSlots(${1:integer teamCount})",
           "description": "function TeamInitPlayerSlots takes integer teamCount returns nothing",
           "scope": "source.vjass"
       },
        "fnMeleeInitPlayerSlots": {
           "prefix": "fnMeleeInitPlayerSlots",
           "body": "MeleeInitPlayerSlots(${1:nothing})",
           "description": "function MeleeInitPlayerSlots takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnFFAInitPlayerSlots": {
           "prefix": "fnFFAInitPlayerSlots",
           "body": "FFAInitPlayerSlots(${1:nothing})",
           "description": "function FFAInitPlayerSlots takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnOneOnOneInitPlayerSlots": {
           "prefix": "fnOneOnOneInitPlayerSlots",
           "body": "OneOnOneInitPlayerSlots(${1:nothing})",
           "description": "function OneOnOneInitPlayerSlots takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnInitGenericPlayerSlots": {
           "prefix": "fnInitGenericPlayerSlots",
           "body": "InitGenericPlayerSlots(${1:nothing})",
           "description": "function InitGenericPlayerSlots takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDNCSoundsDawn": {
           "prefix": "fnSetDNCSoundsDawn",
           "body": "SetDNCSoundsDawn(${1:nothing})",
           "description": "function SetDNCSoundsDawn takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDNCSoundsDusk": {
           "prefix": "fnSetDNCSoundsDusk",
           "body": "SetDNCSoundsDusk(${1:nothing})",
           "description": "function SetDNCSoundsDusk takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDNCSoundsDay": {
           "prefix": "fnSetDNCSoundsDay",
           "body": "SetDNCSoundsDay(${1:nothing})",
           "description": "function SetDNCSoundsDay takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDNCSoundsNight": {
           "prefix": "fnSetDNCSoundsNight",
           "body": "SetDNCSoundsNight(${1:nothing})",
           "description": "function SetDNCSoundsNight takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnInitDNCSounds": {
           "prefix": "fnInitDNCSounds",
           "body": "InitDNCSounds(${1:nothing})",
           "description": "function InitDNCSounds takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnInitBlizzardGlobals": {
           "prefix": "fnInitBlizzardGlobals",
           "body": "InitBlizzardGlobals(${1:nothing})",
           "description": "function InitBlizzardGlobals takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnInitQueuedTriggers": {
           "prefix": "fnInitQueuedTriggers",
           "body": "InitQueuedTriggers(${1:nothing})",
           "description": "function InitQueuedTriggers takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnInitMapRects": {
           "prefix": "fnInitMapRects",
           "body": "InitMapRects(${1:nothing})",
           "description": "function InitMapRects takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnInitSummonableCaps": {
           "prefix": "fnInitSummonableCaps",
           "body": "InitSummonableCaps(${1:nothing})",
           "description": "function InitSummonableCaps takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnUpdateStockAvailability": {
           "prefix": "fnUpdateStockAvailability",
           "body": "UpdateStockAvailability(${1:item whichItem})",
           "description": "function UpdateStockAvailability takes item whichItem returns nothing",
           "scope": "source.vjass"
       },
        "fnUpdateEachStockBuildingEnum": {
           "prefix": "fnUpdateEachStockBuildingEnum",
           "body": "UpdateEachStockBuildingEnum(${1:nothing})",
           "description": "function UpdateEachStockBuildingEnum takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnUpdateEachStockBuilding": {
           "prefix": "fnUpdateEachStockBuilding",
           "body": "UpdateEachStockBuilding(${1:integer iLevel},${2:itemtype iType})",
           "description": "function UpdateEachStockBuilding takes itemtype iType, integer iLevel returns nothing",
           "scope": "source.vjass"
       },
        "fnPerformStockUpdates": {
           "prefix": "fnPerformStockUpdates",
           "body": "PerformStockUpdates(${1:nothing})",
           "description": "function PerformStockUpdates takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnStartStockUpdates": {
           "prefix": "fnStartStockUpdates",
           "body": "StartStockUpdates(${1:nothing})",
           "description": "function StartStockUpdates takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnRemovePurchasedItem": {
           "prefix": "fnRemovePurchasedItem",
           "body": "RemovePurchasedItem(${1:nothing})",
           "description": "function RemovePurchasedItem takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnInitNeutralBuildings": {
           "prefix": "fnInitNeutralBuildings",
           "body": "InitNeutralBuildings(${1:nothing})",
           "description": "function InitNeutralBuildings takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnMarkGameStarted": {
           "prefix": "fnMarkGameStarted",
           "body": "MarkGameStarted(${1:nothing})",
           "description": "function MarkGameStarted takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnDetectGameStarted": {
           "prefix": "fnDetectGameStarted",
           "body": "DetectGameStarted(${1:nothing})",
           "description": "function DetectGameStarted takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnInitBlizzard": {
           "prefix": "fnInitBlizzard",
           "body": "InitBlizzard(${1:nothing})",
           "description": "function InitBlizzard takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnRandomDistReset": {
           "prefix": "fnRandomDistReset",
           "body": "RandomDistReset(${1:nothing})",
           "description": "function RandomDistReset takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnRandomDistAddItem": {
           "prefix": "fnRandomDistAddItem",
           "body": "RandomDistAddItem(${1:integer inChance})",
           "description": "function RandomDistAddItem takes integer inID, integer inChance returns nothing",
           "scope": "source.vjass"
       },
        "fnRandomDistChoose": {
           "prefix": "fnRandomDistChoose",
           "body": "RandomDistChoose(${1:nothing})",
           "description": "function RandomDistChoose takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnUnitDropItem": {
           "prefix": "fnUnitDropItem",
           "body": "UnitDropItem(${1:integer inItemID},${2:unit inUnit})",
           "description": "function UnitDropItem takes unit inUnit, integer inItemID returns item",
           "scope": "source.vjass"
       },
        "fnWidgetDropItem": {
           "prefix": "fnWidgetDropItem",
           "body": "WidgetDropItem(${1:integer inItemID},${2:widget inWidget})",
           "description": "function WidgetDropItem takes widget inWidget, integer inItemID returns item",
           "scope": "source.vjass"
       }
}
