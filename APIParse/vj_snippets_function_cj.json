{
        "fnConvertRace": {
           "prefix": "fnConvertRace",
           "body": "ConvertRace(${0:integer i})",
           "description": "fnConvertRace",
           "scope": "source.vjass"
       },
        "fnConvertAllianceType": {
           "prefix": "fnConvertAllianceType",
           "body": "ConvertAllianceType(${0:integer i})",
           "description": "fnConvertAllianceType",
           "scope": "source.vjass"
       },
        "fnConvertRacePref": {
           "prefix": "fnConvertRacePref",
           "body": "ConvertRacePref(${0:integer i})",
           "description": "fnConvertRacePref",
           "scope": "source.vjass"
       },
        "fnConvertIGameState": {
           "prefix": "fnConvertIGameState",
           "body": "ConvertIGameState(${0:integer i})",
           "description": "fnConvertIGameState",
           "scope": "source.vjass"
       },
        "fnConvertFGameState": {
           "prefix": "fnConvertFGameState",
           "body": "ConvertFGameState(${0:integer i})",
           "description": "fnConvertFGameState",
           "scope": "source.vjass"
       },
        "fnConvertPlayerState": {
           "prefix": "fnConvertPlayerState",
           "body": "ConvertPlayerState(${0:integer i})",
           "description": "fnConvertPlayerState",
           "scope": "source.vjass"
       },
        "fnConvertPlayerScore": {
           "prefix": "fnConvertPlayerScore",
           "body": "ConvertPlayerScore(${0:integer i})",
           "description": "fnConvertPlayerScore",
           "scope": "source.vjass"
       },
        "fnConvertPlayerGameResult": {
           "prefix": "fnConvertPlayerGameResult",
           "body": "ConvertPlayerGameResult(${0:integer i})",
           "description": "fnConvertPlayerGameResult",
           "scope": "source.vjass"
       },
        "fnConvertUnitState": {
           "prefix": "fnConvertUnitState",
           "body": "ConvertUnitState(${0:integer i})",
           "description": "fnConvertUnitState",
           "scope": "source.vjass"
       },
        "fnConvertAIDifficulty": {
           "prefix": "fnConvertAIDifficulty",
           "body": "ConvertAIDifficulty(${0:integer i})",
           "description": "fnConvertAIDifficulty",
           "scope": "source.vjass"
       },
        "fnConvertGameEvent": {
           "prefix": "fnConvertGameEvent",
           "body": "ConvertGameEvent(${0:integer i})",
           "description": "fnConvertGameEvent",
           "scope": "source.vjass"
       },
        "fnConvertPlayerEvent": {
           "prefix": "fnConvertPlayerEvent",
           "body": "ConvertPlayerEvent(${0:integer i})",
           "description": "fnConvertPlayerEvent",
           "scope": "source.vjass"
       },
        "fnConvertPlayerUnitEvent": {
           "prefix": "fnConvertPlayerUnitEvent",
           "body": "ConvertPlayerUnitEvent(${0:integer i})",
           "description": "fnConvertPlayerUnitEvent",
           "scope": "source.vjass"
       },
        "fnConvertWidgetEvent": {
           "prefix": "fnConvertWidgetEvent",
           "body": "ConvertWidgetEvent(${0:integer i})",
           "description": "fnConvertWidgetEvent",
           "scope": "source.vjass"
       },
        "fnConvertDialogEvent": {
           "prefix": "fnConvertDialogEvent",
           "body": "ConvertDialogEvent(${0:integer i})",
           "description": "fnConvertDialogEvent",
           "scope": "source.vjass"
       },
        "fnConvertUnitEvent": {
           "prefix": "fnConvertUnitEvent",
           "body": "ConvertUnitEvent(${0:integer i})",
           "description": "fnConvertUnitEvent",
           "scope": "source.vjass"
       },
        "fnConvertLimitOp": {
           "prefix": "fnConvertLimitOp",
           "body": "ConvertLimitOp(${0:integer i})",
           "description": "fnConvertLimitOp",
           "scope": "source.vjass"
       },
        "fnConvertUnitType": {
           "prefix": "fnConvertUnitType",
           "body": "ConvertUnitType(${0:integer i})",
           "description": "fnConvertUnitType",
           "scope": "source.vjass"
       },
        "fnConvertGameSpeed": {
           "prefix": "fnConvertGameSpeed",
           "body": "ConvertGameSpeed(${0:integer i})",
           "description": "fnConvertGameSpeed",
           "scope": "source.vjass"
       },
        "fnConvertPlacement": {
           "prefix": "fnConvertPlacement",
           "body": "ConvertPlacement(${0:integer i})",
           "description": "fnConvertPlacement",
           "scope": "source.vjass"
       },
        "fnConvertStartLocPrio": {
           "prefix": "fnConvertStartLocPrio",
           "body": "ConvertStartLocPrio(${0:integer i})",
           "description": "fnConvertStartLocPrio",
           "scope": "source.vjass"
       },
        "fnConvertGameDifficulty": {
           "prefix": "fnConvertGameDifficulty",
           "body": "ConvertGameDifficulty(${0:integer i})",
           "description": "fnConvertGameDifficulty",
           "scope": "source.vjass"
       },
        "fnConvertGameType": {
           "prefix": "fnConvertGameType",
           "body": "ConvertGameType(${0:integer i})",
           "description": "fnConvertGameType",
           "scope": "source.vjass"
       },
        "fnConvertMapFlag": {
           "prefix": "fnConvertMapFlag",
           "body": "ConvertMapFlag(${0:integer i})",
           "description": "fnConvertMapFlag",
           "scope": "source.vjass"
       },
        "fnConvertMapVisibility": {
           "prefix": "fnConvertMapVisibility",
           "body": "ConvertMapVisibility(${0:integer i})",
           "description": "fnConvertMapVisibility",
           "scope": "source.vjass"
       },
        "fnConvertMapSetting": {
           "prefix": "fnConvertMapSetting",
           "body": "ConvertMapSetting(${0:integer i})",
           "description": "fnConvertMapSetting",
           "scope": "source.vjass"
       },
        "fnConvertMapDensity": {
           "prefix": "fnConvertMapDensity",
           "body": "ConvertMapDensity(${0:integer i})",
           "description": "fnConvertMapDensity",
           "scope": "source.vjass"
       },
        "fnConvertMapControl": {
           "prefix": "fnConvertMapControl",
           "body": "ConvertMapControl(${0:integer i})",
           "description": "fnConvertMapControl",
           "scope": "source.vjass"
       },
        "fnConvertPlayerColor": {
           "prefix": "fnConvertPlayerColor",
           "body": "ConvertPlayerColor(${0:integer i})",
           "description": "fnConvertPlayerColor",
           "scope": "source.vjass"
       },
        "fnConvertPlayerSlotState": {
           "prefix": "fnConvertPlayerSlotState",
           "body": "ConvertPlayerSlotState(${0:integer i})",
           "description": "fnConvertPlayerSlotState",
           "scope": "source.vjass"
       },
        "fnConvertVolumeGroup": {
           "prefix": "fnConvertVolumeGroup",
           "body": "ConvertVolumeGroup(${0:integer i})",
           "description": "fnConvertVolumeGroup",
           "scope": "source.vjass"
       },
        "fnConvertCameraField": {
           "prefix": "fnConvertCameraField",
           "body": "ConvertCameraField(${0:integer i})",
           "description": "fnConvertCameraField",
           "scope": "source.vjass"
       },
        "fnConvertBlendMode": {
           "prefix": "fnConvertBlendMode",
           "body": "ConvertBlendMode(${0:integer i})",
           "description": "fnConvertBlendMode",
           "scope": "source.vjass"
       },
        "fnConvertRarityControl": {
           "prefix": "fnConvertRarityControl",
           "body": "ConvertRarityControl(${0:integer i})",
           "description": "fnConvertRarityControl",
           "scope": "source.vjass"
       },
        "fnConvertTexMapFlags": {
           "prefix": "fnConvertTexMapFlags",
           "body": "ConvertTexMapFlags(${0:integer i})",
           "description": "fnConvertTexMapFlags",
           "scope": "source.vjass"
       },
        "fnConvertFogState": {
           "prefix": "fnConvertFogState",
           "body": "ConvertFogState(${0:integer i})",
           "description": "fnConvertFogState",
           "scope": "source.vjass"
       },
        "fnConvertEffectType": {
           "prefix": "fnConvertEffectType",
           "body": "ConvertEffectType(${0:integer i})",
           "description": "fnConvertEffectType",
           "scope": "source.vjass"
       },
        "fnConvertVersion": {
           "prefix": "fnConvertVersion",
           "body": "ConvertVersion(${0:integer i})",
           "description": "fnConvertVersion",
           "scope": "source.vjass"
       },
        "fnConvertItemType": {
           "prefix": "fnConvertItemType",
           "body": "ConvertItemType(${0:integer i})",
           "description": "fnConvertItemType",
           "scope": "source.vjass"
       },
        "fnConvertAttackType": {
           "prefix": "fnConvertAttackType",
           "body": "ConvertAttackType(${0:integer i})",
           "description": "fnConvertAttackType",
           "scope": "source.vjass"
       },
        "fnConvertDamageType": {
           "prefix": "fnConvertDamageType",
           "body": "ConvertDamageType(${0:integer i})",
           "description": "fnConvertDamageType",
           "scope": "source.vjass"
       },
        "fnConvertWeaponType": {
           "prefix": "fnConvertWeaponType",
           "body": "ConvertWeaponType(${0:integer i})",
           "description": "fnConvertWeaponType",
           "scope": "source.vjass"
       },
        "fnConvertSoundType": {
           "prefix": "fnConvertSoundType",
           "body": "ConvertSoundType(${0:integer i})",
           "description": "fnConvertSoundType",
           "scope": "source.vjass"
       },
        "fnConvertPathingType": {
           "prefix": "fnConvertPathingType",
           "body": "ConvertPathingType(${0:integer i})",
           "description": "fnConvertPathingType",
           "scope": "source.vjass"
       },
        "fnOrderId": {
           "prefix": "fnOrderId",
           "body": "OrderId(${0:string orderIdString})",
           "description": "fnOrderId",
           "scope": "source.vjass"
       },
        "fnOrderId2String": {
           "prefix": "fnOrderId2String",
           "body": "OrderId2String(${0:integer orderId})",
           "description": "fnOrderId2String",
           "scope": "source.vjass"
       },
        "fnUnitId": {
           "prefix": "fnUnitId",
           "body": "UnitId(${0:string unitIdString})",
           "description": "fnUnitId",
           "scope": "source.vjass"
       },
        "fnUnitId2String": {
           "prefix": "fnUnitId2String",
           "body": "UnitId2String(${0:integer unitId})",
           "description": "fnUnitId2String",
           "scope": "source.vjass"
       },
        "fnAbilityId": {
           "prefix": "fnAbilityId",
           "body": "AbilityId(${0:string abilityIdString})",
           "description": "fnAbilityId",
           "scope": "source.vjass"
       },
        "fnAbilityId2String": {
           "prefix": "fnAbilityId2String",
           "body": "AbilityId2String(${0:integer abilityId})",
           "description": "fnAbilityId2String",
           "scope": "source.vjass"
       },
        "fnGetObjectName": {
           "prefix": "fnGetObjectName",
           "body": "GetObjectName(${0:integer objectId})",
           "description": "fnGetObjectName",
           "scope": "source.vjass"
       },
        "fnDeg2Rad": {
           "prefix": "fnDeg2Rad",
           "body": "Deg2Rad(${0:real degrees})",
           "description": "fnDeg2Rad",
           "scope": "source.vjass"
       },
        "fnRad2Deg": {
           "prefix": "fnRad2Deg",
           "body": "Rad2Deg(${0:real radians})",
           "description": "fnRad2Deg",
           "scope": "source.vjass"
       },
        "fnSin": {
           "prefix": "fnSin",
           "body": "Sin(${0:real radians})",
           "description": "fnSin",
           "scope": "source.vjass"
       },
        "fnCos": {
           "prefix": "fnCos",
           "body": "Cos(${0:real radians})",
           "description": "fnCos",
           "scope": "source.vjass"
       },
        "fnTan": {
           "prefix": "fnTan",
           "body": "Tan(${0:real radians})",
           "description": "fnTan",
           "scope": "source.vjass"
       },
        "fnAsin": {
           "prefix": "fnAsin",
           "body": "Asin(${0:real y})",
           "description": "fnAsin",
           "scope": "source.vjass"
       },
        "fnAcos": {
           "prefix": "fnAcos",
           "body": "Acos(${0:real x})",
           "description": "fnAcos",
           "scope": "source.vjass"
       },
        "fnAtan": {
           "prefix": "fnAtan",
           "body": "Atan(${0:real x})",
           "description": "fnAtan",
           "scope": "source.vjass"
       },
        "fnAtan2": {
           "prefix": "fnAtan2",
           "body": "Atan2(${0:real x})",
           "description": "fnAtan2",
           "scope": "source.vjass"
       },
        "fnSquareRoot": {
           "prefix": "fnSquareRoot",
           "body": "SquareRoot(${0:real x})",
           "description": "fnSquareRoot",
           "scope": "source.vjass"
       },
        "fnPow": {
           "prefix": "fnPow",
           "body": "Pow(${0:real power})",
           "description": "fnPow",
           "scope": "source.vjass"
       },
        "fnI2R": {
           "prefix": "fnI2R",
           "body": "I2R(${0:integer i})",
           "description": "fnI2R",
           "scope": "source.vjass"
       },
        "fnR2I": {
           "prefix": "fnR2I",
           "body": "R2I(${0:real r})",
           "description": "fnR2I",
           "scope": "source.vjass"
       },
        "fnI2S": {
           "prefix": "fnI2S",
           "body": "I2S(${0:integer i})",
           "description": "fnI2S",
           "scope": "source.vjass"
       },
        "fnR2S": {
           "prefix": "fnR2S",
           "body": "R2S(${0:real r})",
           "description": "fnR2S",
           "scope": "source.vjass"
       },
        "fnR2SW": {
           "prefix": "fnR2SW",
           "body": "R2SW(${0:real r},${1:integer precision})",
           "description": "fnR2SW",
           "scope": "source.vjass"
       },
        "fnS2I": {
           "prefix": "fnS2I",
           "body": "S2I(${0:string s})",
           "description": "fnS2I",
           "scope": "source.vjass"
       },
        "fnS2R": {
           "prefix": "fnS2R",
           "body": "S2R(${0:string s})",
           "description": "fnS2R",
           "scope": "source.vjass"
       },
        "fnGetHandleId": {
           "prefix": "fnGetHandleId",
           "body": "GetHandleId(${0:handle h})",
           "description": "fnGetHandleId",
           "scope": "source.vjass"
       },
        "fnSubString": {
           "prefix": "fnSubString",
           "body": "SubString(${0:integer end},${1:string source})",
           "description": "fnSubString",
           "scope": "source.vjass"
       },
        "fnStringLength": {
           "prefix": "fnStringLength",
           "body": "StringLength(${0:string s})",
           "description": "fnStringLength",
           "scope": "source.vjass"
       },
        "fnStringCase": {
           "prefix": "fnStringCase",
           "body": "StringCase(${0:boolean upper},${1:string source})",
           "description": "fnStringCase",
           "scope": "source.vjass"
       },
        "fnStringHash": {
           "prefix": "fnStringHash",
           "body": "StringHash(${0:string s})",
           "description": "fnStringHash",
           "scope": "source.vjass"
       },
        "fnGetLocalizedString": {
           "prefix": "fnGetLocalizedString",
           "body": "GetLocalizedString(${0:string source})",
           "description": "fnGetLocalizedString",
           "scope": "source.vjass"
       },
        "fnGetLocalizedHotkey": {
           "prefix": "fnGetLocalizedHotkey",
           "body": "GetLocalizedHotkey(${0:string source})",
           "description": "fnGetLocalizedHotkey",
           "scope": "source.vjass"
       },
        "fnSetMapName": {
           "prefix": "fnSetMapName",
           "body": "SetMapName(${0:string name})",
           "description": "fnSetMapName",
           "scope": "source.vjass"
       },
        "fnSetMapDescription": {
           "prefix": "fnSetMapDescription",
           "body": "SetMapDescription(${0:string description})",
           "description": "fnSetMapDescription",
           "scope": "source.vjass"
       },
        "fnSetTeams": {
           "prefix": "fnSetTeams",
           "body": "SetTeams(${0:integer teamcount})",
           "description": "fnSetTeams",
           "scope": "source.vjass"
       },
        "fnSetPlayers": {
           "prefix": "fnSetPlayers",
           "body": "SetPlayers(${0:integer playercount})",
           "description": "fnSetPlayers",
           "scope": "source.vjass"
       },
        "fnDefineStartLocation": {
           "prefix": "fnDefineStartLocation",
           "body": "DefineStartLocation(${0:real y},${1:integer whichStartLoc})",
           "description": "fnDefineStartLocation",
           "scope": "source.vjass"
       },
        "fnDefineStartLocationLoc": {
           "prefix": "fnDefineStartLocationLoc",
           "body": "DefineStartLocationLoc(${0:integer whichStartLoc},${1:location whichLocation})",
           "description": "fnDefineStartLocationLoc",
           "scope": "source.vjass"
       },
        "fnSetStartLocPrioCount": {
           "prefix": "fnSetStartLocPrioCount",
           "body": "SetStartLocPrioCount(${0:integer prioSlotCount})",
           "description": "fnSetStartLocPrioCount",
           "scope": "source.vjass"
       },
        "fnSetStartLocPrio": {
           "prefix": "fnSetStartLocPrio",
           "body": "SetStartLocPrio(${0:integer otherStartLocIndex},${1:startlocprio priority})",
           "description": "fnSetStartLocPrio",
           "scope": "source.vjass"
       },
        "fnGetStartLocPrioSlot": {
           "prefix": "fnGetStartLocPrioSlot",
           "body": "GetStartLocPrioSlot(${0:integer prioSlotIndex})",
           "description": "fnGetStartLocPrioSlot",
           "scope": "source.vjass"
       },
        "fnGetStartLocPrio": {
           "prefix": "fnGetStartLocPrio",
           "body": "GetStartLocPrio(${0:integer prioSlotIndex})",
           "description": "fnGetStartLocPrio",
           "scope": "source.vjass"
       },
        "fnSetGameTypeSupported": {
           "prefix": "fnSetGameTypeSupported",
           "body": "SetGameTypeSupported(${0:boolean value},${1:gametype whichGameType})",
           "description": "fnSetGameTypeSupported",
           "scope": "source.vjass"
       },
        "fnSetMapFlag": {
           "prefix": "fnSetMapFlag",
           "body": "SetMapFlag(${0:boolean value},${1:mapflag whichMapFlag})",
           "description": "fnSetMapFlag",
           "scope": "source.vjass"
       },
        "fnSetGamePlacement": {
           "prefix": "fnSetGamePlacement",
           "body": "SetGamePlacement(${0:placement whichPlacementType})",
           "description": "fnSetGamePlacement",
           "scope": "source.vjass"
       },
        "fnSetGameSpeed": {
           "prefix": "fnSetGameSpeed",
           "body": "SetGameSpeed(${0:gamespeed whichspeed})",
           "description": "fnSetGameSpeed",
           "scope": "source.vjass"
       },
        "fnSetGameDifficulty": {
           "prefix": "fnSetGameDifficulty",
           "body": "SetGameDifficulty(${0:gamedifficulty whichdifficulty})",
           "description": "fnSetGameDifficulty",
           "scope": "source.vjass"
       },
        "fnSetResourceDensity": {
           "prefix": "fnSetResourceDensity",
           "body": "SetResourceDensity(${0:mapdensity whichdensity})",
           "description": "fnSetResourceDensity",
           "scope": "source.vjass"
       },
        "fnSetCreatureDensity": {
           "prefix": "fnSetCreatureDensity",
           "body": "SetCreatureDensity(${0:mapdensity whichdensity})",
           "description": "fnSetCreatureDensity",
           "scope": "source.vjass"
       },
        "fnGetTeams": {
           "prefix": "fnGetTeams",
           "body": "GetTeams(${0:nothing})",
           "description": "fnGetTeams",
           "scope": "source.vjass"
       },
        "fnGetPlayers": {
           "prefix": "fnGetPlayers",
           "body": "GetPlayers(${0:nothing})",
           "description": "fnGetPlayers",
           "scope": "source.vjass"
       },
        "fnIsGameTypeSupported": {
           "prefix": "fnIsGameTypeSupported",
           "body": "IsGameTypeSupported(${0:gametype whichGameType})",
           "description": "fnIsGameTypeSupported",
           "scope": "source.vjass"
       },
        "fnGetGameTypeSelected": {
           "prefix": "fnGetGameTypeSelected",
           "body": "GetGameTypeSelected(${0:nothing})",
           "description": "fnGetGameTypeSelected",
           "scope": "source.vjass"
       },
        "fnIsMapFlagSet": {
           "prefix": "fnIsMapFlagSet",
           "body": "IsMapFlagSet(${0:mapflag whichMapFlag})",
           "description": "fnIsMapFlagSet",
           "scope": "source.vjass"
       },
        "fnGetGamePlacement": {
           "prefix": "fnGetGamePlacement",
           "body": "GetGamePlacement(${0:nothing})",
           "description": "fnGetGamePlacement",
           "scope": "source.vjass"
       },
        "fnGetGameSpeed": {
           "prefix": "fnGetGameSpeed",
           "body": "GetGameSpeed(${0:nothing})",
           "description": "fnGetGameSpeed",
           "scope": "source.vjass"
       },
        "fnGetGameDifficulty": {
           "prefix": "fnGetGameDifficulty",
           "body": "GetGameDifficulty(${0:nothing})",
           "description": "fnGetGameDifficulty",
           "scope": "source.vjass"
       },
        "fnGetResourceDensity": {
           "prefix": "fnGetResourceDensity",
           "body": "GetResourceDensity(${0:nothing})",
           "description": "fnGetResourceDensity",
           "scope": "source.vjass"
       },
        "fnGetCreatureDensity": {
           "prefix": "fnGetCreatureDensity",
           "body": "GetCreatureDensity(${0:nothing})",
           "description": "fnGetCreatureDensity",
           "scope": "source.vjass"
       },
        "fnGetStartLocationX": {
           "prefix": "fnGetStartLocationX",
           "body": "GetStartLocationX(${0:integer whichStartLocation})",
           "description": "fnGetStartLocationX",
           "scope": "source.vjass"
       },
        "fnGetStartLocationY": {
           "prefix": "fnGetStartLocationY",
           "body": "GetStartLocationY(${0:integer whichStartLocation})",
           "description": "fnGetStartLocationY",
           "scope": "source.vjass"
       },
        "fnGetStartLocationLoc": {
           "prefix": "fnGetStartLocationLoc",
           "body": "GetStartLocationLoc(${0:integer whichStartLocation})",
           "description": "fnGetStartLocationLoc",
           "scope": "source.vjass"
       },
        "fnSetPlayerTeam": {
           "prefix": "fnSetPlayerTeam",
           "body": "SetPlayerTeam(${0:player whichPlayer},${1:integer whichTeam})",
           "description": "fnSetPlayerTeam",
           "scope": "source.vjass"
       },
        "fnSetPlayerStartLocation": {
           "prefix": "fnSetPlayerStartLocation",
           "body": "SetPlayerStartLocation(${0:player whichPlayer},${1:integer startLocIndex})",
           "description": "fnSetPlayerStartLocation",
           "scope": "source.vjass"
       },
        "fnForcePlayerStartLocation": {
           "prefix": "fnForcePlayerStartLocation",
           "body": "ForcePlayerStartLocation(${0:player whichPlayer},${1:integer startLocIndex})",
           "description": "fnForcePlayerStartLocation",
           "scope": "source.vjass"
       },
        "fnSetPlayerColor": {
           "prefix": "fnSetPlayerColor",
           "body": "SetPlayerColor(${0:player whichPlayer},${1:playercolor color})",
           "description": "fnSetPlayerColor",
           "scope": "source.vjass"
       },
        "fnSetPlayerAlliance": {
           "prefix": "fnSetPlayerAlliance",
           "body": "SetPlayerAlliance(${0:player otherPlayer},${1:boolean value},${2:alliancetype whichAllianceSetting})",
           "description": "fnSetPlayerAlliance",
           "scope": "source.vjass"
       },
        "fnSetPlayerTaxRate": {
           "prefix": "fnSetPlayerTaxRate",
           "body": "SetPlayerTaxRate(${0:player otherPlayer},${1:integer rate},${2:playerstate whichResource})",
           "description": "fnSetPlayerTaxRate",
           "scope": "source.vjass"
       },
        "fnSetPlayerRacePreference": {
           "prefix": "fnSetPlayerRacePreference",
           "body": "SetPlayerRacePreference(${0:player whichPlayer},${1:racepreference whichRacePreference})",
           "description": "fnSetPlayerRacePreference",
           "scope": "source.vjass"
       },
        "fnSetPlayerRaceSelectable": {
           "prefix": "fnSetPlayerRaceSelectable",
           "body": "SetPlayerRaceSelectable(${0:player whichPlayer},${1:boolean value})",
           "description": "fnSetPlayerRaceSelectable",
           "scope": "source.vjass"
       },
        "fnSetPlayerController": {
           "prefix": "fnSetPlayerController",
           "body": "SetPlayerController(${0:player whichPlayer},${1:mapcontrol controlType})",
           "description": "fnSetPlayerController",
           "scope": "source.vjass"
       },
        "fnSetPlayerName": {
           "prefix": "fnSetPlayerName",
           "body": "SetPlayerName(${0:player whichPlayer},${1:string name})",
           "description": "fnSetPlayerName",
           "scope": "source.vjass"
       },
        "fnSetPlayerOnScoreScreen": {
           "prefix": "fnSetPlayerOnScoreScreen",
           "body": "SetPlayerOnScoreScreen(${0:player whichPlayer},${1:boolean flag})",
           "description": "fnSetPlayerOnScoreScreen",
           "scope": "source.vjass"
       },
        "fnGetPlayerTeam": {
           "prefix": "fnGetPlayerTeam",
           "body": "GetPlayerTeam(${0:player whichPlayer})",
           "description": "fnGetPlayerTeam",
           "scope": "source.vjass"
       },
        "fnGetPlayerStartLocation": {
           "prefix": "fnGetPlayerStartLocation",
           "body": "GetPlayerStartLocation(${0:player whichPlayer})",
           "description": "fnGetPlayerStartLocation",
           "scope": "source.vjass"
       },
        "fnGetPlayerColor": {
           "prefix": "fnGetPlayerColor",
           "body": "GetPlayerColor(${0:player whichPlayer})",
           "description": "fnGetPlayerColor",
           "scope": "source.vjass"
       },
        "fnGetPlayerSelectable": {
           "prefix": "fnGetPlayerSelectable",
           "body": "GetPlayerSelectable(${0:player whichPlayer})",
           "description": "fnGetPlayerSelectable",
           "scope": "source.vjass"
       },
        "fnGetPlayerController": {
           "prefix": "fnGetPlayerController",
           "body": "GetPlayerController(${0:player whichPlayer})",
           "description": "fnGetPlayerController",
           "scope": "source.vjass"
       },
        "fnGetPlayerSlotState": {
           "prefix": "fnGetPlayerSlotState",
           "body": "GetPlayerSlotState(${0:player whichPlayer})",
           "description": "fnGetPlayerSlotState",
           "scope": "source.vjass"
       },
        "fnGetPlayerTaxRate": {
           "prefix": "fnGetPlayerTaxRate",
           "body": "GetPlayerTaxRate(${0:player otherPlayer},${1:playerstate whichResource})",
           "description": "fnGetPlayerTaxRate",
           "scope": "source.vjass"
       },
        "fnIsPlayerRacePrefSet": {
           "prefix": "fnIsPlayerRacePrefSet",
           "body": "IsPlayerRacePrefSet(${0:player whichPlayer},${1:racepreference pref})",
           "description": "fnIsPlayerRacePrefSet",
           "scope": "source.vjass"
       },
        "fnGetPlayerName": {
           "prefix": "fnGetPlayerName",
           "body": "GetPlayerName(${0:player whichPlayer})",
           "description": "fnGetPlayerName",
           "scope": "source.vjass"
       },
        "fnCreateTimer": {
           "prefix": "fnCreateTimer",
           "body": "CreateTimer(${0:nothing})",
           "description": "fnCreateTimer",
           "scope": "source.vjass"
       },
        "fnDestroyTimer": {
           "prefix": "fnDestroyTimer",
           "body": "DestroyTimer(${0:timer whichTimer})",
           "description": "fnDestroyTimer",
           "scope": "source.vjass"
       },
        "fnTimerStart": {
           "prefix": "fnTimerStart",
           "body": "TimerStart(${0:real timeout},${1:boolean periodic},${2:timer whichTimer},${3:code handlerFunc})",
           "description": "fnTimerStart",
           "scope": "source.vjass"
       },
        "fnTimerGetElapsed": {
           "prefix": "fnTimerGetElapsed",
           "body": "TimerGetElapsed(${0:timer whichTimer})",
           "description": "fnTimerGetElapsed",
           "scope": "source.vjass"
       },
        "fnTimerGetRemaining": {
           "prefix": "fnTimerGetRemaining",
           "body": "TimerGetRemaining(${0:timer whichTimer})",
           "description": "fnTimerGetRemaining",
           "scope": "source.vjass"
       },
        "fnTimerGetTimeout": {
           "prefix": "fnTimerGetTimeout",
           "body": "TimerGetTimeout(${0:timer whichTimer})",
           "description": "fnTimerGetTimeout",
           "scope": "source.vjass"
       },
        "fnPauseTimer": {
           "prefix": "fnPauseTimer",
           "body": "PauseTimer(${0:timer whichTimer})",
           "description": "fnPauseTimer",
           "scope": "source.vjass"
       },
        "fnResumeTimer": {
           "prefix": "fnResumeTimer",
           "body": "ResumeTimer(${0:timer whichTimer})",
           "description": "fnResumeTimer",
           "scope": "source.vjass"
       },
        "fnGetExpiredTimer": {
           "prefix": "fnGetExpiredTimer",
           "body": "GetExpiredTimer(${0:nothing})",
           "description": "fnGetExpiredTimer",
           "scope": "source.vjass"
       },
        "fnCreateGroup": {
           "prefix": "fnCreateGroup",
           "body": "CreateGroup(${0:nothing})",
           "description": "fnCreateGroup",
           "scope": "source.vjass"
       },
        "fnDestroyGroup": {
           "prefix": "fnDestroyGroup",
           "body": "DestroyGroup(${0:group whichGroup})",
           "description": "fnDestroyGroup",
           "scope": "source.vjass"
       },
        "fnGroupAddUnit": {
           "prefix": "fnGroupAddUnit",
           "body": "GroupAddUnit(${0:group whichGroup},${1:unit whichUnit})",
           "description": "fnGroupAddUnit",
           "scope": "source.vjass"
       },
        "fnGroupRemoveUnit": {
           "prefix": "fnGroupRemoveUnit",
           "body": "GroupRemoveUnit(${0:group whichGroup},${1:unit whichUnit})",
           "description": "fnGroupRemoveUnit",
           "scope": "source.vjass"
       },
        "fnGroupClear": {
           "prefix": "fnGroupClear",
           "body": "GroupClear(${0:group whichGroup})",
           "description": "fnGroupClear",
           "scope": "source.vjass"
       },
        "fnGroupEnumUnitsOfType": {
           "prefix": "fnGroupEnumUnitsOfType",
           "body": "GroupEnumUnitsOfType(${0:group whichGroup},${1:string unitname},${2:boolexpr filter})",
           "description": "fnGroupEnumUnitsOfType",
           "scope": "source.vjass"
       },
        "fnGroupEnumUnitsOfPlayer": {
           "prefix": "fnGroupEnumUnitsOfPlayer",
           "body": "GroupEnumUnitsOfPlayer(${0:player whichPlayer},${1:group whichGroup},${2:boolexpr filter})",
           "description": "fnGroupEnumUnitsOfPlayer",
           "scope": "source.vjass"
       },
        "fnGroupEnumUnitsOfTypeCounted": {
           "prefix": "fnGroupEnumUnitsOfTypeCounted",
           "body": "GroupEnumUnitsOfTypeCounted(${0:integer countLimit},${1:group whichGroup},${2:string unitname},${3:boolexpr filter})",
           "description": "fnGroupEnumUnitsOfTypeCounted",
           "scope": "source.vjass"
       },
        "fnGroupEnumUnitsInRect": {
           "prefix": "fnGroupEnumUnitsInRect",
           "body": "GroupEnumUnitsInRect(${0:group whichGroup},${1:boolexpr filter},${2:rect r})",
           "description": "fnGroupEnumUnitsInRect",
           "scope": "source.vjass"
       },
        "fnGroupEnumUnitsInRectCounted": {
           "prefix": "fnGroupEnumUnitsInRectCounted",
           "body": "GroupEnumUnitsInRectCounted(${0:integer countLimit},${1:group whichGroup},${2:boolexpr filter},${3:rect r})",
           "description": "fnGroupEnumUnitsInRectCounted",
           "scope": "source.vjass"
       },
        "fnGroupEnumUnitsInRange": {
           "prefix": "fnGroupEnumUnitsInRange",
           "body": "GroupEnumUnitsInRange(${0:real radius},${1:group whichGroup},${2:boolexpr filter})",
           "description": "fnGroupEnumUnitsInRange",
           "scope": "source.vjass"
       },
        "fnGroupEnumUnitsInRangeOfLoc": {
           "prefix": "fnGroupEnumUnitsInRangeOfLoc",
           "body": "GroupEnumUnitsInRangeOfLoc(${0:real radius},${1:group whichGroup},${2:location whichLocation},${3:boolexpr filter})",
           "description": "fnGroupEnumUnitsInRangeOfLoc",
           "scope": "source.vjass"
       },
        "fnGroupEnumUnitsInRangeCounted": {
           "prefix": "fnGroupEnumUnitsInRangeCounted",
           "body": "GroupEnumUnitsInRangeCounted(${0:real radius},${1:integer countLimit},${2:group whichGroup},${3:boolexpr filter})",
           "description": "fnGroupEnumUnitsInRangeCounted",
           "scope": "source.vjass"
       },
        "fnGroupEnumUnitsInRangeOfLocCounted": {
           "prefix": "fnGroupEnumUnitsInRangeOfLocCounted",
           "body": "GroupEnumUnitsInRangeOfLocCounted(${0:real radius},${1:integer countLimit},${2:group whichGroup},${3:location whichLocation},${4:boolexpr filter})",
           "description": "fnGroupEnumUnitsInRangeOfLocCounted",
           "scope": "source.vjass"
       },
        "fnGroupEnumUnitsSelected": {
           "prefix": "fnGroupEnumUnitsSelected",
           "body": "GroupEnumUnitsSelected(${0:player whichPlayer},${1:group whichGroup},${2:boolexpr filter})",
           "description": "fnGroupEnumUnitsSelected",
           "scope": "source.vjass"
       },
        "fnGroupImmediateOrder": {
           "prefix": "fnGroupImmediateOrder",
           "body": "GroupImmediateOrder(${0:group whichGroup},${1:string order})",
           "description": "fnGroupImmediateOrder",
           "scope": "source.vjass"
       },
        "fnGroupImmediateOrderById": {
           "prefix": "fnGroupImmediateOrderById",
           "body": "GroupImmediateOrderById(${0:integer order},${1:group whichGroup})",
           "description": "fnGroupImmediateOrderById",
           "scope": "source.vjass"
       },
        "fnGroupPointOrder": {
           "prefix": "fnGroupPointOrder",
           "body": "GroupPointOrder(${0:real y},${1:group whichGroup},${2:string order})",
           "description": "fnGroupPointOrder",
           "scope": "source.vjass"
       },
        "fnGroupPointOrderLoc": {
           "prefix": "fnGroupPointOrderLoc",
           "body": "GroupPointOrderLoc(${0:group whichGroup},${1:string order},${2:location whichLocation})",
           "description": "fnGroupPointOrderLoc",
           "scope": "source.vjass"
       },
        "fnGroupPointOrderById": {
           "prefix": "fnGroupPointOrderById",
           "body": "GroupPointOrderById(${0:real y},${1:integer order},${2:group whichGroup})",
           "description": "fnGroupPointOrderById",
           "scope": "source.vjass"
       },
        "fnGroupPointOrderByIdLoc": {
           "prefix": "fnGroupPointOrderByIdLoc",
           "body": "GroupPointOrderByIdLoc(${0:integer order},${1:group whichGroup},${2:location whichLocation})",
           "description": "fnGroupPointOrderByIdLoc",
           "scope": "source.vjass"
       },
        "fnGroupTargetOrder": {
           "prefix": "fnGroupTargetOrder",
           "body": "GroupTargetOrder(${0:widget targetWidget},${1:group whichGroup},${2:string order})",
           "description": "fnGroupTargetOrder",
           "scope": "source.vjass"
       },
        "fnGroupTargetOrderById": {
           "prefix": "fnGroupTargetOrderById",
           "body": "GroupTargetOrderById(${0:integer order},${1:widget targetWidget},${2:group whichGroup})",
           "description": "fnGroupTargetOrderById",
           "scope": "source.vjass"
       },
        "fnForGroup": {
           "prefix": "fnForGroup",
           "body": "ForGroup(${0:code callback},${1:group whichGroup})",
           "description": "fnForGroup",
           "scope": "source.vjass"
       },
        "fnFirstOfGroup": {
           "prefix": "fnFirstOfGroup",
           "body": "FirstOfGroup(${0:group whichGroup})",
           "description": "fnFirstOfGroup",
           "scope": "source.vjass"
       },
        "fnCreateForce": {
           "prefix": "fnCreateForce",
           "body": "CreateForce(${0:nothing})",
           "description": "fnCreateForce",
           "scope": "source.vjass"
       },
        "fnDestroyForce": {
           "prefix": "fnDestroyForce",
           "body": "DestroyForce(${0:force whichForce})",
           "description": "fnDestroyForce",
           "scope": "source.vjass"
       },
        "fnForceAddPlayer": {
           "prefix": "fnForceAddPlayer",
           "body": "ForceAddPlayer(${0:player whichPlayer},${1:force whichForce})",
           "description": "fnForceAddPlayer",
           "scope": "source.vjass"
       },
        "fnForceRemovePlayer": {
           "prefix": "fnForceRemovePlayer",
           "body": "ForceRemovePlayer(${0:player whichPlayer},${1:force whichForce})",
           "description": "fnForceRemovePlayer",
           "scope": "source.vjass"
       },
        "fnForceClear": {
           "prefix": "fnForceClear",
           "body": "ForceClear(${0:force whichForce})",
           "description": "fnForceClear",
           "scope": "source.vjass"
       },
        "fnForceEnumPlayers": {
           "prefix": "fnForceEnumPlayers",
           "body": "ForceEnumPlayers(${0:force whichForce},${1:boolexpr filter})",
           "description": "fnForceEnumPlayers",
           "scope": "source.vjass"
       },
        "fnForceEnumPlayersCounted": {
           "prefix": "fnForceEnumPlayersCounted",
           "body": "ForceEnumPlayersCounted(${0:integer countLimit},${1:force whichForce},${2:boolexpr filter})",
           "description": "fnForceEnumPlayersCounted",
           "scope": "source.vjass"
       },
        "fnForceEnumAllies": {
           "prefix": "fnForceEnumAllies",
           "body": "ForceEnumAllies(${0:player whichPlayer},${1:force whichForce},${2:boolexpr filter})",
           "description": "fnForceEnumAllies",
           "scope": "source.vjass"
       },
        "fnForceEnumEnemies": {
           "prefix": "fnForceEnumEnemies",
           "body": "ForceEnumEnemies(${0:player whichPlayer},${1:force whichForce},${2:boolexpr filter})",
           "description": "fnForceEnumEnemies",
           "scope": "source.vjass"
       },
        "fnForForce": {
           "prefix": "fnForForce",
           "body": "ForForce(${0:code callback},${1:force whichForce})",
           "description": "fnForForce",
           "scope": "source.vjass"
       },
        "fnRect": {
           "prefix": "fnRect",
           "body": "Rect(${0:real maxy})",
           "description": "fnRect",
           "scope": "source.vjass"
       },
        "fnRectFromLoc": {
           "prefix": "fnRectFromLoc",
           "body": "RectFromLoc(${0:location max})",
           "description": "fnRectFromLoc",
           "scope": "source.vjass"
       },
        "fnRemoveRect": {
           "prefix": "fnRemoveRect",
           "body": "RemoveRect(${0:rect whichRect})",
           "description": "fnRemoveRect",
           "scope": "source.vjass"
       },
        "fnSetRect": {
           "prefix": "fnSetRect",
           "body": "SetRect(${0:real maxy},${1:rect whichRect})",
           "description": "fnSetRect",
           "scope": "source.vjass"
       },
        "fnSetRectFromLoc": {
           "prefix": "fnSetRectFromLoc",
           "body": "SetRectFromLoc(${0:location max},${1:rect whichRect})",
           "description": "fnSetRectFromLoc",
           "scope": "source.vjass"
       },
        "fnMoveRectTo": {
           "prefix": "fnMoveRectTo",
           "body": "MoveRectTo(${0:real newCenterY},${1:rect whichRect})",
           "description": "fnMoveRectTo",
           "scope": "source.vjass"
       },
        "fnMoveRectToLoc": {
           "prefix": "fnMoveRectToLoc",
           "body": "MoveRectToLoc(${0:location newCenterLoc},${1:rect whichRect})",
           "description": "fnMoveRectToLoc",
           "scope": "source.vjass"
       },
        "fnGetRectCenterX": {
           "prefix": "fnGetRectCenterX",
           "body": "GetRectCenterX(${0:rect whichRect})",
           "description": "fnGetRectCenterX",
           "scope": "source.vjass"
       },
        "fnGetRectCenterY": {
           "prefix": "fnGetRectCenterY",
           "body": "GetRectCenterY(${0:rect whichRect})",
           "description": "fnGetRectCenterY",
           "scope": "source.vjass"
       },
        "fnGetRectMinX": {
           "prefix": "fnGetRectMinX",
           "body": "GetRectMinX(${0:rect whichRect})",
           "description": "fnGetRectMinX",
           "scope": "source.vjass"
       },
        "fnGetRectMinY": {
           "prefix": "fnGetRectMinY",
           "body": "GetRectMinY(${0:rect whichRect})",
           "description": "fnGetRectMinY",
           "scope": "source.vjass"
       },
        "fnGetRectMaxX": {
           "prefix": "fnGetRectMaxX",
           "body": "GetRectMaxX(${0:rect whichRect})",
           "description": "fnGetRectMaxX",
           "scope": "source.vjass"
       },
        "fnGetRectMaxY": {
           "prefix": "fnGetRectMaxY",
           "body": "GetRectMaxY(${0:rect whichRect})",
           "description": "fnGetRectMaxY",
           "scope": "source.vjass"
       },
        "fnCreateRegion": {
           "prefix": "fnCreateRegion",
           "body": "CreateRegion(${0:nothing})",
           "description": "fnCreateRegion",
           "scope": "source.vjass"
       },
        "fnRemoveRegion": {
           "prefix": "fnRemoveRegion",
           "body": "RemoveRegion(${0:region whichRegion})",
           "description": "fnRemoveRegion",
           "scope": "source.vjass"
       },
        "fnRegionAddRect": {
           "prefix": "fnRegionAddRect",
           "body": "RegionAddRect(${0:region whichRegion},${1:rect r})",
           "description": "fnRegionAddRect",
           "scope": "source.vjass"
       },
        "fnRegionClearRect": {
           "prefix": "fnRegionClearRect",
           "body": "RegionClearRect(${0:region whichRegion},${1:rect r})",
           "description": "fnRegionClearRect",
           "scope": "source.vjass"
       },
        "fnRegionAddCell": {
           "prefix": "fnRegionAddCell",
           "body": "RegionAddCell(${0:real y},${1:region whichRegion})",
           "description": "fnRegionAddCell",
           "scope": "source.vjass"
       },
        "fnRegionAddCellAtLoc": {
           "prefix": "fnRegionAddCellAtLoc",
           "body": "RegionAddCellAtLoc(${0:region whichRegion},${1:location whichLocation})",
           "description": "fnRegionAddCellAtLoc",
           "scope": "source.vjass"
       },
        "fnRegionClearCell": {
           "prefix": "fnRegionClearCell",
           "body": "RegionClearCell(${0:real y},${1:region whichRegion})",
           "description": "fnRegionClearCell",
           "scope": "source.vjass"
       },
        "fnRegionClearCellAtLoc": {
           "prefix": "fnRegionClearCellAtLoc",
           "body": "RegionClearCellAtLoc(${0:region whichRegion},${1:location whichLocation})",
           "description": "fnRegionClearCellAtLoc",
           "scope": "source.vjass"
       },
        "fnLocation": {
           "prefix": "fnLocation",
           "body": "Location(${0:real y})",
           "description": "fnLocation",
           "scope": "source.vjass"
       },
        "fnRemoveLocation": {
           "prefix": "fnRemoveLocation",
           "body": "RemoveLocation(${0:location whichLocation})",
           "description": "fnRemoveLocation",
           "scope": "source.vjass"
       },
        "fnMoveLocation": {
           "prefix": "fnMoveLocation",
           "body": "MoveLocation(${0:real newY},${1:location whichLocation})",
           "description": "fnMoveLocation",
           "scope": "source.vjass"
       },
        "fnGetLocationX": {
           "prefix": "fnGetLocationX",
           "body": "GetLocationX(${0:location whichLocation})",
           "description": "fnGetLocationX",
           "scope": "source.vjass"
       },
        "fnGetLocationY": {
           "prefix": "fnGetLocationY",
           "body": "GetLocationY(${0:location whichLocation})",
           "description": "fnGetLocationY",
           "scope": "source.vjass"
       },
        "fnGetLocationZ": {
           "prefix": "fnGetLocationZ",
           "body": "GetLocationZ(${0:location whichLocation})",
           "description": "fnGetLocationZ",
           "scope": "source.vjass"
       },
        "fnIsUnitInRegion": {
           "prefix": "fnIsUnitInRegion",
           "body": "IsUnitInRegion(${0:region whichRegion},${1:unit whichUnit})",
           "description": "fnIsUnitInRegion",
           "scope": "source.vjass"
       },
        "fnIsPointInRegion": {
           "prefix": "fnIsPointInRegion",
           "body": "IsPointInRegion(${0:real y},${1:region whichRegion})",
           "description": "fnIsPointInRegion",
           "scope": "source.vjass"
       },
        "fnIsLocationInRegion": {
           "prefix": "fnIsLocationInRegion",
           "body": "IsLocationInRegion(${0:region whichRegion},${1:location whichLocation})",
           "description": "fnIsLocationInRegion",
           "scope": "source.vjass"
       },
        "fnGetWorldBounds": {
           "prefix": "fnGetWorldBounds",
           "body": "GetWorldBounds(${0:nothing})",
           "description": "fnGetWorldBounds",
           "scope": "source.vjass"
       },
        "fnCreateTrigger": {
           "prefix": "fnCreateTrigger",
           "body": "CreateTrigger(${0:nothing})",
           "description": "fnCreateTrigger",
           "scope": "source.vjass"
       },
        "fnDestroyTrigger": {
           "prefix": "fnDestroyTrigger",
           "body": "DestroyTrigger(${0:trigger whichTrigger})",
           "description": "fnDestroyTrigger",
           "scope": "source.vjass"
       },
        "fnResetTrigger": {
           "prefix": "fnResetTrigger",
           "body": "ResetTrigger(${0:trigger whichTrigger})",
           "description": "fnResetTrigger",
           "scope": "source.vjass"
       },
        "fnEnableTrigger": {
           "prefix": "fnEnableTrigger",
           "body": "EnableTrigger(${0:trigger whichTrigger})",
           "description": "fnEnableTrigger",
           "scope": "source.vjass"
       },
        "fnDisableTrigger": {
           "prefix": "fnDisableTrigger",
           "body": "DisableTrigger(${0:trigger whichTrigger})",
           "description": "fnDisableTrigger",
           "scope": "source.vjass"
       },
        "fnIsTriggerEnabled": {
           "prefix": "fnIsTriggerEnabled",
           "body": "IsTriggerEnabled(${0:trigger whichTrigger})",
           "description": "fnIsTriggerEnabled",
           "scope": "source.vjass"
       },
        "fnTriggerWaitOnSleeps": {
           "prefix": "fnTriggerWaitOnSleeps",
           "body": "TriggerWaitOnSleeps(${0:boolean flag},${1:trigger whichTrigger})",
           "description": "fnTriggerWaitOnSleeps",
           "scope": "source.vjass"
       },
        "fnIsTriggerWaitOnSleeps": {
           "prefix": "fnIsTriggerWaitOnSleeps",
           "body": "IsTriggerWaitOnSleeps(${0:trigger whichTrigger})",
           "description": "fnIsTriggerWaitOnSleeps",
           "scope": "source.vjass"
       },
        "fnGetFilterUnit": {
           "prefix": "fnGetFilterUnit",
           "body": "GetFilterUnit(${0:nothing})",
           "description": "fnGetFilterUnit",
           "scope": "source.vjass"
       },
        "fnGetEnumUnit": {
           "prefix": "fnGetEnumUnit",
           "body": "GetEnumUnit(${0:nothing})",
           "description": "fnGetEnumUnit",
           "scope": "source.vjass"
       },
        "fnGetFilterDestructable": {
           "prefix": "fnGetFilterDestructable",
           "body": "GetFilterDestructable(${0:nothing})",
           "description": "fnGetFilterDestructable",
           "scope": "source.vjass"
       },
        "fnGetEnumDestructable": {
           "prefix": "fnGetEnumDestructable",
           "body": "GetEnumDestructable(${0:nothing})",
           "description": "fnGetEnumDestructable",
           "scope": "source.vjass"
       },
        "fnGetFilterItem": {
           "prefix": "fnGetFilterItem",
           "body": "GetFilterItem(${0:nothing})",
           "description": "fnGetFilterItem",
           "scope": "source.vjass"
       },
        "fnGetEnumItem": {
           "prefix": "fnGetEnumItem",
           "body": "GetEnumItem(${0:nothing})",
           "description": "fnGetEnumItem",
           "scope": "source.vjass"
       },
        "fnGetFilterPlayer": {
           "prefix": "fnGetFilterPlayer",
           "body": "GetFilterPlayer(${0:nothing})",
           "description": "fnGetFilterPlayer",
           "scope": "source.vjass"
       },
        "fnGetEnumPlayer": {
           "prefix": "fnGetEnumPlayer",
           "body": "GetEnumPlayer(${0:nothing})",
           "description": "fnGetEnumPlayer",
           "scope": "source.vjass"
       },
        "fnGetTriggeringTrigger": {
           "prefix": "fnGetTriggeringTrigger",
           "body": "GetTriggeringTrigger(${0:nothing})",
           "description": "fnGetTriggeringTrigger",
           "scope": "source.vjass"
       },
        "fnGetTriggerEventId": {
           "prefix": "fnGetTriggerEventId",
           "body": "GetTriggerEventId(${0:nothing})",
           "description": "fnGetTriggerEventId",
           "scope": "source.vjass"
       },
        "fnGetTriggerEvalCount": {
           "prefix": "fnGetTriggerEvalCount",
           "body": "GetTriggerEvalCount(${0:trigger whichTrigger})",
           "description": "fnGetTriggerEvalCount",
           "scope": "source.vjass"
       },
        "fnGetTriggerExecCount": {
           "prefix": "fnGetTriggerExecCount",
           "body": "GetTriggerExecCount(${0:trigger whichTrigger})",
           "description": "fnGetTriggerExecCount",
           "scope": "source.vjass"
       },
        "fnExecuteFunc": {
           "prefix": "fnExecuteFunc",
           "body": "ExecuteFunc(${0:string funcName})",
           "description": "fnExecuteFunc",
           "scope": "source.vjass"
       },
        "fnAnd": {
           "prefix": "fnAnd",
           "body": "And(${0:boolexpr operandB})",
           "description": "fnAnd",
           "scope": "source.vjass"
       },
        "fnOr": {
           "prefix": "fnOr",
           "body": "Or(${0:boolexpr operandB})",
           "description": "fnOr",
           "scope": "source.vjass"
       },
        "fnNot": {
           "prefix": "fnNot",
           "body": "Not(${0:boolexpr operand})",
           "description": "fnNot",
           "scope": "source.vjass"
       },
        "fnCondition": {
           "prefix": "fnCondition",
           "body": "Condition(${0:code func})",
           "description": "fnCondition",
           "scope": "source.vjass"
       },
        "fnDestroyCondition": {
           "prefix": "fnDestroyCondition",
           "body": "DestroyCondition(${0:conditionfunc c})",
           "description": "fnDestroyCondition",
           "scope": "source.vjass"
       },
        "fnFilter": {
           "prefix": "fnFilter",
           "body": "Filter(${0:code func})",
           "description": "fnFilter",
           "scope": "source.vjass"
       },
        "fnDestroyFilter": {
           "prefix": "fnDestroyFilter",
           "body": "DestroyFilter(${0:filterfunc f})",
           "description": "fnDestroyFilter",
           "scope": "source.vjass"
       },
        "fnDestroyBoolExpr": {
           "prefix": "fnDestroyBoolExpr",
           "body": "DestroyBoolExpr(${0:boolexpr e})",
           "description": "fnDestroyBoolExpr",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterVariableEvent": {
           "prefix": "fnTriggerRegisterVariableEvent",
           "body": "TriggerRegisterVariableEvent(${0:real limitval},${1:trigger whichTrigger},${2:limitop opcode},${3:string varName})",
           "description": "fnTriggerRegisterVariableEvent",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterTimerEvent": {
           "prefix": "fnTriggerRegisterTimerEvent",
           "body": "TriggerRegisterTimerEvent(${0:real timeout},${1:trigger whichTrigger},${2:boolean periodic})",
           "description": "fnTriggerRegisterTimerEvent",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterTimerExpireEvent": {
           "prefix": "fnTriggerRegisterTimerExpireEvent",
           "body": "TriggerRegisterTimerExpireEvent(${0:trigger whichTrigger},${1:timer t})",
           "description": "fnTriggerRegisterTimerExpireEvent",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterGameStateEvent": {
           "prefix": "fnTriggerRegisterGameStateEvent",
           "body": "TriggerRegisterGameStateEvent(${0:limitop opcode},${1:real limitval},${2:trigger whichTrigger},${3:gamestate whichState})",
           "description": "fnTriggerRegisterGameStateEvent",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterDialogEvent": {
           "prefix": "fnTriggerRegisterDialogEvent",
           "body": "TriggerRegisterDialogEvent(${0:trigger whichTrigger},${1:dialog whichDialog})",
           "description": "fnTriggerRegisterDialogEvent",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterDialogButtonEvent": {
           "prefix": "fnTriggerRegisterDialogButtonEvent",
           "body": "TriggerRegisterDialogButtonEvent(${0:button whichButton},${1:trigger whichTrigger})",
           "description": "fnTriggerRegisterDialogButtonEvent",
           "scope": "source.vjass"
       },
        "fnGetEventGameState": {
           "prefix": "fnGetEventGameState",
           "body": "GetEventGameState(${0:nothing})",
           "description": "fnGetEventGameState",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterGameEvent": {
           "prefix": "fnTriggerRegisterGameEvent",
           "body": "TriggerRegisterGameEvent(${0:trigger whichTrigger},${1:gameevent whichGameEvent})",
           "description": "fnTriggerRegisterGameEvent",
           "scope": "source.vjass"
       },
        "fnGetWinningPlayer": {
           "prefix": "fnGetWinningPlayer",
           "body": "GetWinningPlayer(${0:nothing})",
           "description": "fnGetWinningPlayer",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterEnterRegion": {
           "prefix": "fnTriggerRegisterEnterRegion",
           "body": "TriggerRegisterEnterRegion(${0:region whichRegion},${1:trigger whichTrigger},${2:boolexpr filter})",
           "description": "fnTriggerRegisterEnterRegion",
           "scope": "source.vjass"
       },
        "fnGetTriggeringRegion": {
           "prefix": "fnGetTriggeringRegion",
           "body": "GetTriggeringRegion(${0:nothing})",
           "description": "fnGetTriggeringRegion",
           "scope": "source.vjass"
       },
        "fnGetEnteringUnit": {
           "prefix": "fnGetEnteringUnit",
           "body": "GetEnteringUnit(${0:nothing})",
           "description": "fnGetEnteringUnit",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterLeaveRegion": {
           "prefix": "fnTriggerRegisterLeaveRegion",
           "body": "TriggerRegisterLeaveRegion(${0:region whichRegion},${1:trigger whichTrigger},${2:boolexpr filter})",
           "description": "fnTriggerRegisterLeaveRegion",
           "scope": "source.vjass"
       },
        "fnGetLeavingUnit": {
           "prefix": "fnGetLeavingUnit",
           "body": "GetLeavingUnit(${0:nothing})",
           "description": "fnGetLeavingUnit",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterTrackableHitEvent": {
           "prefix": "fnTriggerRegisterTrackableHitEvent",
           "body": "TriggerRegisterTrackableHitEvent(${0:trackable t},${1:trigger whichTrigger})",
           "description": "fnTriggerRegisterTrackableHitEvent",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterTrackableTrackEvent": {
           "prefix": "fnTriggerRegisterTrackableTrackEvent",
           "body": "TriggerRegisterTrackableTrackEvent(${0:trackable t},${1:trigger whichTrigger})",
           "description": "fnTriggerRegisterTrackableTrackEvent",
           "scope": "source.vjass"
       },
        "fnGetTriggeringTrackable": {
           "prefix": "fnGetTriggeringTrackable",
           "body": "GetTriggeringTrackable(${0:nothing})",
           "description": "fnGetTriggeringTrackable",
           "scope": "source.vjass"
       },
        "fnGetClickedButton": {
           "prefix": "fnGetClickedButton",
           "body": "GetClickedButton(${0:nothing})",
           "description": "fnGetClickedButton",
           "scope": "source.vjass"
       },
        "fnGetClickedDialog": {
           "prefix": "fnGetClickedDialog",
           "body": "GetClickedDialog(${0:nothing})",
           "description": "fnGetClickedDialog",
           "scope": "source.vjass"
       },
        "fnGetTournamentFinishSoonTimeRemaining": {
           "prefix": "fnGetTournamentFinishSoonTimeRemaining",
           "body": "GetTournamentFinishSoonTimeRemaining(${0:nothing})",
           "description": "fnGetTournamentFinishSoonTimeRemaining",
           "scope": "source.vjass"
       },
        "fnGetTournamentFinishNowRule": {
           "prefix": "fnGetTournamentFinishNowRule",
           "body": "GetTournamentFinishNowRule(${0:nothing})",
           "description": "fnGetTournamentFinishNowRule",
           "scope": "source.vjass"
       },
        "fnGetTournamentFinishNowPlayer": {
           "prefix": "fnGetTournamentFinishNowPlayer",
           "body": "GetTournamentFinishNowPlayer(${0:nothing})",
           "description": "fnGetTournamentFinishNowPlayer",
           "scope": "source.vjass"
       },
        "fnGetTournamentScore": {
           "prefix": "fnGetTournamentScore",
           "body": "GetTournamentScore(${0:player whichPlayer})",
           "description": "fnGetTournamentScore",
           "scope": "source.vjass"
       },
        "fnGetSaveBasicFilename": {
           "prefix": "fnGetSaveBasicFilename",
           "body": "GetSaveBasicFilename(${0:nothing})",
           "description": "fnGetSaveBasicFilename",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerEvent": {
           "prefix": "fnTriggerRegisterPlayerEvent",
           "body": "TriggerRegisterPlayerEvent(${0:player whichPlayer},${1:trigger whichTrigger},${2:playerevent whichPlayerEvent})",
           "description": "fnTriggerRegisterPlayerEvent",
           "scope": "source.vjass"
       },
        "fnGetTriggerPlayer": {
           "prefix": "fnGetTriggerPlayer",
           "body": "GetTriggerPlayer(${0:nothing})",
           "description": "fnGetTriggerPlayer",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerUnitEvent": {
           "prefix": "fnTriggerRegisterPlayerUnitEvent",
           "body": "TriggerRegisterPlayerUnitEvent(${0:playerunitevent whichPlayerUnitEvent},${1:player whichPlayer},${2:trigger whichTrigger},${3:boolexpr filter})",
           "description": "fnTriggerRegisterPlayerUnitEvent",
           "scope": "source.vjass"
       },
        "fnGetLevelingUnit": {
           "prefix": "fnGetLevelingUnit",
           "body": "GetLevelingUnit(${0:nothing})",
           "description": "fnGetLevelingUnit",
           "scope": "source.vjass"
       },
        "fnGetLearningUnit": {
           "prefix": "fnGetLearningUnit",
           "body": "GetLearningUnit(${0:nothing})",
           "description": "fnGetLearningUnit",
           "scope": "source.vjass"
       },
        "fnGetLearnedSkill": {
           "prefix": "fnGetLearnedSkill",
           "body": "GetLearnedSkill(${0:nothing})",
           "description": "fnGetLearnedSkill",
           "scope": "source.vjass"
       },
        "fnGetLearnedSkillLevel": {
           "prefix": "fnGetLearnedSkillLevel",
           "body": "GetLearnedSkillLevel(${0:nothing})",
           "description": "fnGetLearnedSkillLevel",
           "scope": "source.vjass"
       },
        "fnGetRevivableUnit": {
           "prefix": "fnGetRevivableUnit",
           "body": "GetRevivableUnit(${0:nothing})",
           "description": "fnGetRevivableUnit",
           "scope": "source.vjass"
       },
        "fnGetRevivingUnit": {
           "prefix": "fnGetRevivingUnit",
           "body": "GetRevivingUnit(${0:nothing})",
           "description": "fnGetRevivingUnit",
           "scope": "source.vjass"
       },
        "fnGetAttacker": {
           "prefix": "fnGetAttacker",
           "body": "GetAttacker(${0:nothing})",
           "description": "fnGetAttacker",
           "scope": "source.vjass"
       },
        "fnGetRescuer": {
           "prefix": "fnGetRescuer",
           "body": "GetRescuer(${0:nothing})",
           "description": "fnGetRescuer",
           "scope": "source.vjass"
       },
        "fnGetDyingUnit": {
           "prefix": "fnGetDyingUnit",
           "body": "GetDyingUnit(${0:nothing})",
           "description": "fnGetDyingUnit",
           "scope": "source.vjass"
       },
        "fnGetKillingUnit": {
           "prefix": "fnGetKillingUnit",
           "body": "GetKillingUnit(${0:nothing})",
           "description": "fnGetKillingUnit",
           "scope": "source.vjass"
       },
        "fnGetDecayingUnit": {
           "prefix": "fnGetDecayingUnit",
           "body": "GetDecayingUnit(${0:nothing})",
           "description": "fnGetDecayingUnit",
           "scope": "source.vjass"
       },
        "fnGetConstructingStructure": {
           "prefix": "fnGetConstructingStructure",
           "body": "GetConstructingStructure(${0:nothing})",
           "description": "fnGetConstructingStructure",
           "scope": "source.vjass"
       },
        "fnGetCancelledStructure": {
           "prefix": "fnGetCancelledStructure",
           "body": "GetCancelledStructure(${0:nothing})",
           "description": "fnGetCancelledStructure",
           "scope": "source.vjass"
       },
        "fnGetConstructedStructure": {
           "prefix": "fnGetConstructedStructure",
           "body": "GetConstructedStructure(${0:nothing})",
           "description": "fnGetConstructedStructure",
           "scope": "source.vjass"
       },
        "fnGetResearchingUnit": {
           "prefix": "fnGetResearchingUnit",
           "body": "GetResearchingUnit(${0:nothing})",
           "description": "fnGetResearchingUnit",
           "scope": "source.vjass"
       },
        "fnGetResearched": {
           "prefix": "fnGetResearched",
           "body": "GetResearched(${0:nothing})",
           "description": "fnGetResearched",
           "scope": "source.vjass"
       },
        "fnGetTrainedUnitType": {
           "prefix": "fnGetTrainedUnitType",
           "body": "GetTrainedUnitType(${0:nothing})",
           "description": "fnGetTrainedUnitType",
           "scope": "source.vjass"
       },
        "fnGetTrainedUnit": {
           "prefix": "fnGetTrainedUnit",
           "body": "GetTrainedUnit(${0:nothing})",
           "description": "fnGetTrainedUnit",
           "scope": "source.vjass"
       },
        "fnGetDetectedUnit": {
           "prefix": "fnGetDetectedUnit",
           "body": "GetDetectedUnit(${0:nothing})",
           "description": "fnGetDetectedUnit",
           "scope": "source.vjass"
       },
        "fnGetSummoningUnit": {
           "prefix": "fnGetSummoningUnit",
           "body": "GetSummoningUnit(${0:nothing})",
           "description": "fnGetSummoningUnit",
           "scope": "source.vjass"
       },
        "fnGetSummonedUnit": {
           "prefix": "fnGetSummonedUnit",
           "body": "GetSummonedUnit(${0:nothing})",
           "description": "fnGetSummonedUnit",
           "scope": "source.vjass"
       },
        "fnGetTransportUnit": {
           "prefix": "fnGetTransportUnit",
           "body": "GetTransportUnit(${0:nothing})",
           "description": "fnGetTransportUnit",
           "scope": "source.vjass"
       },
        "fnGetLoadedUnit": {
           "prefix": "fnGetLoadedUnit",
           "body": "GetLoadedUnit(${0:nothing})",
           "description": "fnGetLoadedUnit",
           "scope": "source.vjass"
       },
        "fnGetSellingUnit": {
           "prefix": "fnGetSellingUnit",
           "body": "GetSellingUnit(${0:nothing})",
           "description": "fnGetSellingUnit",
           "scope": "source.vjass"
       },
        "fnGetSoldUnit": {
           "prefix": "fnGetSoldUnit",
           "body": "GetSoldUnit(${0:nothing})",
           "description": "fnGetSoldUnit",
           "scope": "source.vjass"
       },
        "fnGetBuyingUnit": {
           "prefix": "fnGetBuyingUnit",
           "body": "GetBuyingUnit(${0:nothing})",
           "description": "fnGetBuyingUnit",
           "scope": "source.vjass"
       },
        "fnGetSoldItem": {
           "prefix": "fnGetSoldItem",
           "body": "GetSoldItem(${0:nothing})",
           "description": "fnGetSoldItem",
           "scope": "source.vjass"
       },
        "fnGetChangingUnit": {
           "prefix": "fnGetChangingUnit",
           "body": "GetChangingUnit(${0:nothing})",
           "description": "fnGetChangingUnit",
           "scope": "source.vjass"
       },
        "fnGetChangingUnitPrevOwner": {
           "prefix": "fnGetChangingUnitPrevOwner",
           "body": "GetChangingUnitPrevOwner(${0:nothing})",
           "description": "fnGetChangingUnitPrevOwner",
           "scope": "source.vjass"
       },
        "fnGetManipulatingUnit": {
           "prefix": "fnGetManipulatingUnit",
           "body": "GetManipulatingUnit(${0:nothing})",
           "description": "fnGetManipulatingUnit",
           "scope": "source.vjass"
       },
        "fnGetManipulatedItem": {
           "prefix": "fnGetManipulatedItem",
           "body": "GetManipulatedItem(${0:nothing})",
           "description": "fnGetManipulatedItem",
           "scope": "source.vjass"
       },
        "fnGetOrderedUnit": {
           "prefix": "fnGetOrderedUnit",
           "body": "GetOrderedUnit(${0:nothing})",
           "description": "fnGetOrderedUnit",
           "scope": "source.vjass"
       },
        "fnGetIssuedOrderId": {
           "prefix": "fnGetIssuedOrderId",
           "body": "GetIssuedOrderId(${0:nothing})",
           "description": "fnGetIssuedOrderId",
           "scope": "source.vjass"
       },
        "fnGetOrderPointX": {
           "prefix": "fnGetOrderPointX",
           "body": "GetOrderPointX(${0:nothing})",
           "description": "fnGetOrderPointX",
           "scope": "source.vjass"
       },
        "fnGetOrderPointY": {
           "prefix": "fnGetOrderPointY",
           "body": "GetOrderPointY(${0:nothing})",
           "description": "fnGetOrderPointY",
           "scope": "source.vjass"
       },
        "fnGetOrderPointLoc": {
           "prefix": "fnGetOrderPointLoc",
           "body": "GetOrderPointLoc(${0:nothing})",
           "description": "fnGetOrderPointLoc",
           "scope": "source.vjass"
       },
        "fnGetOrderTarget": {
           "prefix": "fnGetOrderTarget",
           "body": "GetOrderTarget(${0:nothing})",
           "description": "fnGetOrderTarget",
           "scope": "source.vjass"
       },
        "fnGetOrderTargetDestructable": {
           "prefix": "fnGetOrderTargetDestructable",
           "body": "GetOrderTargetDestructable(${0:nothing})",
           "description": "fnGetOrderTargetDestructable",
           "scope": "source.vjass"
       },
        "fnGetOrderTargetItem": {
           "prefix": "fnGetOrderTargetItem",
           "body": "GetOrderTargetItem(${0:nothing})",
           "description": "fnGetOrderTargetItem",
           "scope": "source.vjass"
       },
        "fnGetOrderTargetUnit": {
           "prefix": "fnGetOrderTargetUnit",
           "body": "GetOrderTargetUnit(${0:nothing})",
           "description": "fnGetOrderTargetUnit",
           "scope": "source.vjass"
       },
        "fnGetSpellAbilityUnit": {
           "prefix": "fnGetSpellAbilityUnit",
           "body": "GetSpellAbilityUnit(${0:nothing})",
           "description": "fnGetSpellAbilityUnit",
           "scope": "source.vjass"
       },
        "fnGetSpellAbilityId": {
           "prefix": "fnGetSpellAbilityId",
           "body": "GetSpellAbilityId(${0:nothing})",
           "description": "fnGetSpellAbilityId",
           "scope": "source.vjass"
       },
        "fnGetSpellAbility": {
           "prefix": "fnGetSpellAbility",
           "body": "GetSpellAbility(${0:nothing})",
           "description": "fnGetSpellAbility",
           "scope": "source.vjass"
       },
        "fnGetSpellTargetLoc": {
           "prefix": "fnGetSpellTargetLoc",
           "body": "GetSpellTargetLoc(${0:nothing})",
           "description": "fnGetSpellTargetLoc",
           "scope": "source.vjass"
       },
        "fnGetSpellTargetDestructable": {
           "prefix": "fnGetSpellTargetDestructable",
           "body": "GetSpellTargetDestructable(${0:nothing})",
           "description": "fnGetSpellTargetDestructable",
           "scope": "source.vjass"
       },
        "fnGetSpellTargetItem": {
           "prefix": "fnGetSpellTargetItem",
           "body": "GetSpellTargetItem(${0:nothing})",
           "description": "fnGetSpellTargetItem",
           "scope": "source.vjass"
       },
        "fnGetSpellTargetUnit": {
           "prefix": "fnGetSpellTargetUnit",
           "body": "GetSpellTargetUnit(${0:nothing})",
           "description": "fnGetSpellTargetUnit",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerAllianceChange": {
           "prefix": "fnTriggerRegisterPlayerAllianceChange",
           "body": "TriggerRegisterPlayerAllianceChange(${0:player whichPlayer},${1:trigger whichTrigger},${2:alliancetype whichAlliance})",
           "description": "fnTriggerRegisterPlayerAllianceChange",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerStateEvent": {
           "prefix": "fnTriggerRegisterPlayerStateEvent",
           "body": "TriggerRegisterPlayerStateEvent(${0:real limitval},${1:player whichPlayer},${2:trigger whichTrigger},${3:limitop opcode},${4:playerstate whichState})",
           "description": "fnTriggerRegisterPlayerStateEvent",
           "scope": "source.vjass"
       },
        "fnGetEventPlayerState": {
           "prefix": "fnGetEventPlayerState",
           "body": "GetEventPlayerState(${0:nothing})",
           "description": "fnGetEventPlayerState",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerChatEvent": {
           "prefix": "fnTriggerRegisterPlayerChatEvent",
           "body": "TriggerRegisterPlayerChatEvent(${0:boolean exactMatchOnly},${1:player whichPlayer},${2:trigger whichTrigger},${3:string chatMessageToDetect})",
           "description": "fnTriggerRegisterPlayerChatEvent",
           "scope": "source.vjass"
       },
        "fnGetEventPlayerChatString": {
           "prefix": "fnGetEventPlayerChatString",
           "body": "GetEventPlayerChatString(${0:nothing})",
           "description": "fnGetEventPlayerChatString",
           "scope": "source.vjass"
       },
        "fnGetEventPlayerChatStringMatched": {
           "prefix": "fnGetEventPlayerChatStringMatched",
           "body": "GetEventPlayerChatStringMatched(${0:nothing})",
           "description": "fnGetEventPlayerChatStringMatched",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterDeathEvent": {
           "prefix": "fnTriggerRegisterDeathEvent",
           "body": "TriggerRegisterDeathEvent(${0:widget whichWidget},${1:trigger whichTrigger})",
           "description": "fnTriggerRegisterDeathEvent",
           "scope": "source.vjass"
       },
        "fnGetTriggerUnit": {
           "prefix": "fnGetTriggerUnit",
           "body": "GetTriggerUnit(${0:nothing})",
           "description": "fnGetTriggerUnit",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterUnitStateEvent": {
           "prefix": "fnTriggerRegisterUnitStateEvent",
           "body": "TriggerRegisterUnitStateEvent(${0:unitstate whichState},${1:real limitval},${2:trigger whichTrigger},${3:limitop opcode},${4:unit whichUnit})",
           "description": "fnTriggerRegisterUnitStateEvent",
           "scope": "source.vjass"
       },
        "fnGetEventUnitState": {
           "prefix": "fnGetEventUnitState",
           "body": "GetEventUnitState(${0:nothing})",
           "description": "fnGetEventUnitState",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterUnitEvent": {
           "prefix": "fnTriggerRegisterUnitEvent",
           "body": "TriggerRegisterUnitEvent(${0:trigger whichTrigger},${1:unit whichUnit},${2:unitevent whichEvent})",
           "description": "fnTriggerRegisterUnitEvent",
           "scope": "source.vjass"
       },
        "fnGetEventDamage": {
           "prefix": "fnGetEventDamage",
           "body": "GetEventDamage(${0:nothing})",
           "description": "fnGetEventDamage",
           "scope": "source.vjass"
       },
        "fnGetEventDamageSource": {
           "prefix": "fnGetEventDamageSource",
           "body": "GetEventDamageSource(${0:nothing})",
           "description": "fnGetEventDamageSource",
           "scope": "source.vjass"
       },
        "fnGetEventDetectingPlayer": {
           "prefix": "fnGetEventDetectingPlayer",
           "body": "GetEventDetectingPlayer(${0:nothing})",
           "description": "fnGetEventDetectingPlayer",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterFilterUnitEvent": {
           "prefix": "fnTriggerRegisterFilterUnitEvent",
           "body": "TriggerRegisterFilterUnitEvent(${0:trigger whichTrigger},${1:boolexpr filter},${2:unit whichUnit},${3:unitevent whichEvent})",
           "description": "fnTriggerRegisterFilterUnitEvent",
           "scope": "source.vjass"
       },
        "fnGetEventTargetUnit": {
           "prefix": "fnGetEventTargetUnit",
           "body": "GetEventTargetUnit(${0:nothing})",
           "description": "fnGetEventTargetUnit",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterUnitInRange": {
           "prefix": "fnTriggerRegisterUnitInRange",
           "body": "TriggerRegisterUnitInRange(${0:real range},${1:trigger whichTrigger},${2:boolexpr filter},${3:unit whichUnit})",
           "description": "fnTriggerRegisterUnitInRange",
           "scope": "source.vjass"
       },
        "fnTriggerAddCondition": {
           "prefix": "fnTriggerAddCondition",
           "body": "TriggerAddCondition(${0:trigger whichTrigger},${1:boolexpr condition})",
           "description": "fnTriggerAddCondition",
           "scope": "source.vjass"
       },
        "fnTriggerRemoveCondition": {
           "prefix": "fnTriggerRemoveCondition",
           "body": "TriggerRemoveCondition(${0:trigger whichTrigger},${1:triggercondition whichCondition})",
           "description": "fnTriggerRemoveCondition",
           "scope": "source.vjass"
       },
        "fnTriggerClearConditions": {
           "prefix": "fnTriggerClearConditions",
           "body": "TriggerClearConditions(${0:trigger whichTrigger})",
           "description": "fnTriggerClearConditions",
           "scope": "source.vjass"
       },
        "fnTriggerAddAction": {
           "prefix": "fnTriggerAddAction",
           "body": "TriggerAddAction(${0:code actionFunc},${1:trigger whichTrigger})",
           "description": "fnTriggerAddAction",
           "scope": "source.vjass"
       },
        "fnTriggerRemoveAction": {
           "prefix": "fnTriggerRemoveAction",
           "body": "TriggerRemoveAction(${0:trigger whichTrigger},${1:triggeraction whichAction})",
           "description": "fnTriggerRemoveAction",
           "scope": "source.vjass"
       },
        "fnTriggerClearActions": {
           "prefix": "fnTriggerClearActions",
           "body": "TriggerClearActions(${0:trigger whichTrigger})",
           "description": "fnTriggerClearActions",
           "scope": "source.vjass"
       },
        "fnTriggerSleepAction": {
           "prefix": "fnTriggerSleepAction",
           "body": "TriggerSleepAction(${0:real timeout})",
           "description": "fnTriggerSleepAction",
           "scope": "source.vjass"
       },
        "fnTriggerWaitForSound": {
           "prefix": "fnTriggerWaitForSound",
           "body": "TriggerWaitForSound(${0:sound s},${1:real offset})",
           "description": "fnTriggerWaitForSound",
           "scope": "source.vjass"
       },
        "fnTriggerEvaluate": {
           "prefix": "fnTriggerEvaluate",
           "body": "TriggerEvaluate(${0:trigger whichTrigger})",
           "description": "fnTriggerEvaluate",
           "scope": "source.vjass"
       },
        "fnTriggerExecute": {
           "prefix": "fnTriggerExecute",
           "body": "TriggerExecute(${0:trigger whichTrigger})",
           "description": "fnTriggerExecute",
           "scope": "source.vjass"
       },
        "fnTriggerExecuteWait": {
           "prefix": "fnTriggerExecuteWait",
           "body": "TriggerExecuteWait(${0:trigger whichTrigger})",
           "description": "fnTriggerExecuteWait",
           "scope": "source.vjass"
       },
        "fnTriggerSyncStart": {
           "prefix": "fnTriggerSyncStart",
           "body": "TriggerSyncStart(${0:nothing})",
           "description": "fnTriggerSyncStart",
           "scope": "source.vjass"
       },
        "fnTriggerSyncReady": {
           "prefix": "fnTriggerSyncReady",
           "body": "TriggerSyncReady(${0:nothing})",
           "description": "fnTriggerSyncReady",
           "scope": "source.vjass"
       },
        "fnGetWidgetLife": {
           "prefix": "fnGetWidgetLife",
           "body": "GetWidgetLife(${0:widget whichWidget})",
           "description": "fnGetWidgetLife",
           "scope": "source.vjass"
       },
        "fnSetWidgetLife": {
           "prefix": "fnSetWidgetLife",
           "body": "SetWidgetLife(${0:real newLife},${1:widget whichWidget})",
           "description": "fnSetWidgetLife",
           "scope": "source.vjass"
       },
        "fnGetWidgetX": {
           "prefix": "fnGetWidgetX",
           "body": "GetWidgetX(${0:widget whichWidget})",
           "description": "fnGetWidgetX",
           "scope": "source.vjass"
       },
        "fnGetWidgetY": {
           "prefix": "fnGetWidgetY",
           "body": "GetWidgetY(${0:widget whichWidget})",
           "description": "fnGetWidgetY",
           "scope": "source.vjass"
       },
        "fnGetTriggerWidget": {
           "prefix": "fnGetTriggerWidget",
           "body": "GetTriggerWidget(${0:nothing})",
           "description": "fnGetTriggerWidget",
           "scope": "source.vjass"
       },
        "fnCreateDestructable": {
           "prefix": "fnCreateDestructable",
           "body": "CreateDestructable(${0:real scale},${1:integer variation})",
           "description": "fnCreateDestructable",
           "scope": "source.vjass"
       },
        "fnCreateDestructableZ": {
           "prefix": "fnCreateDestructableZ",
           "body": "CreateDestructableZ(${0:real scale},${1:integer variation})",
           "description": "fnCreateDestructableZ",
           "scope": "source.vjass"
       },
        "fnCreateDeadDestructable": {
           "prefix": "fnCreateDeadDestructable",
           "body": "CreateDeadDestructable(${0:real scale},${1:integer variation})",
           "description": "fnCreateDeadDestructable",
           "scope": "source.vjass"
       },
        "fnCreateDeadDestructableZ": {
           "prefix": "fnCreateDeadDestructableZ",
           "body": "CreateDeadDestructableZ(${0:real scale},${1:integer variation})",
           "description": "fnCreateDeadDestructableZ",
           "scope": "source.vjass"
       },
        "fnRemoveDestructable": {
           "prefix": "fnRemoveDestructable",
           "body": "RemoveDestructable(${0:destructable d})",
           "description": "fnRemoveDestructable",
           "scope": "source.vjass"
       },
        "fnKillDestructable": {
           "prefix": "fnKillDestructable",
           "body": "KillDestructable(${0:destructable d})",
           "description": "fnKillDestructable",
           "scope": "source.vjass"
       },
        "fnSetDestructableInvulnerable": {
           "prefix": "fnSetDestructableInvulnerable",
           "body": "SetDestructableInvulnerable(${0:boolean flag},${1:destructable d})",
           "description": "fnSetDestructableInvulnerable",
           "scope": "source.vjass"
       },
        "fnIsDestructableInvulnerable": {
           "prefix": "fnIsDestructableInvulnerable",
           "body": "IsDestructableInvulnerable(${0:destructable d})",
           "description": "fnIsDestructableInvulnerable",
           "scope": "source.vjass"
       },
        "fnEnumDestructablesInRect": {
           "prefix": "fnEnumDestructablesInRect",
           "body": "EnumDestructablesInRect(${0:code actionFunc},${1:boolexpr filter},${2:rect r})",
           "description": "fnEnumDestructablesInRect",
           "scope": "source.vjass"
       },
        "fnGetDestructableTypeId": {
           "prefix": "fnGetDestructableTypeId",
           "body": "GetDestructableTypeId(${0:destructable d})",
           "description": "fnGetDestructableTypeId",
           "scope": "source.vjass"
       },
        "fnGetDestructableX": {
           "prefix": "fnGetDestructableX",
           "body": "GetDestructableX(${0:destructable d})",
           "description": "fnGetDestructableX",
           "scope": "source.vjass"
       },
        "fnGetDestructableY": {
           "prefix": "fnGetDestructableY",
           "body": "GetDestructableY(${0:destructable d})",
           "description": "fnGetDestructableY",
           "scope": "source.vjass"
       },
        "fnSetDestructableLife": {
           "prefix": "fnSetDestructableLife",
           "body": "SetDestructableLife(${0:real life},${1:destructable d})",
           "description": "fnSetDestructableLife",
           "scope": "source.vjass"
       },
        "fnGetDestructableLife": {
           "prefix": "fnGetDestructableLife",
           "body": "GetDestructableLife(${0:destructable d})",
           "description": "fnGetDestructableLife",
           "scope": "source.vjass"
       },
        "fnSetDestructableMaxLife": {
           "prefix": "fnSetDestructableMaxLife",
           "body": "SetDestructableMaxLife(${0:real max},${1:destructable d})",
           "description": "fnSetDestructableMaxLife",
           "scope": "source.vjass"
       },
        "fnGetDestructableMaxLife": {
           "prefix": "fnGetDestructableMaxLife",
           "body": "GetDestructableMaxLife(${0:destructable d})",
           "description": "fnGetDestructableMaxLife",
           "scope": "source.vjass"
       },
        "fnDestructableRestoreLife": {
           "prefix": "fnDestructableRestoreLife",
           "body": "DestructableRestoreLife(${0:real life},${1:boolean birth},${2:destructable d})",
           "description": "fnDestructableRestoreLife",
           "scope": "source.vjass"
       },
        "fnQueueDestructableAnimation": {
           "prefix": "fnQueueDestructableAnimation",
           "body": "QueueDestructableAnimation(${0:string whichAnimation},${1:destructable d})",
           "description": "fnQueueDestructableAnimation",
           "scope": "source.vjass"
       },
        "fnSetDestructableAnimation": {
           "prefix": "fnSetDestructableAnimation",
           "body": "SetDestructableAnimation(${0:string whichAnimation},${1:destructable d})",
           "description": "fnSetDestructableAnimation",
           "scope": "source.vjass"
       },
        "fnSetDestructableAnimationSpeed": {
           "prefix": "fnSetDestructableAnimationSpeed",
           "body": "SetDestructableAnimationSpeed(${0:real speedFactor},${1:destructable d})",
           "description": "fnSetDestructableAnimationSpeed",
           "scope": "source.vjass"
       },
        "fnShowDestructable": {
           "prefix": "fnShowDestructable",
           "body": "ShowDestructable(${0:boolean flag},${1:destructable d})",
           "description": "fnShowDestructable",
           "scope": "source.vjass"
       },
        "fnGetDestructableOccluderHeight": {
           "prefix": "fnGetDestructableOccluderHeight",
           "body": "GetDestructableOccluderHeight(${0:destructable d})",
           "description": "fnGetDestructableOccluderHeight",
           "scope": "source.vjass"
       },
        "fnSetDestructableOccluderHeight": {
           "prefix": "fnSetDestructableOccluderHeight",
           "body": "SetDestructableOccluderHeight(${0:real height},${1:destructable d})",
           "description": "fnSetDestructableOccluderHeight",
           "scope": "source.vjass"
       },
        "fnGetDestructableName": {
           "prefix": "fnGetDestructableName",
           "body": "GetDestructableName(${0:destructable d})",
           "description": "fnGetDestructableName",
           "scope": "source.vjass"
       },
        "fnGetTriggerDestructable": {
           "prefix": "fnGetTriggerDestructable",
           "body": "GetTriggerDestructable(${0:nothing})",
           "description": "fnGetTriggerDestructable",
           "scope": "source.vjass"
       },
        "fnCreateItem": {
           "prefix": "fnCreateItem",
           "body": "CreateItem(${0:real y},${1:integer itemid})",
           "description": "fnCreateItem",
           "scope": "source.vjass"
       },
        "fnRemoveItem": {
           "prefix": "fnRemoveItem",
           "body": "RemoveItem(${0:item whichItem})",
           "description": "fnRemoveItem",
           "scope": "source.vjass"
       },
        "fnGetItemPlayer": {
           "prefix": "fnGetItemPlayer",
           "body": "GetItemPlayer(${0:item whichItem})",
           "description": "fnGetItemPlayer",
           "scope": "source.vjass"
       },
        "fnGetItemTypeId": {
           "prefix": "fnGetItemTypeId",
           "body": "GetItemTypeId(${0:item i})",
           "description": "fnGetItemTypeId",
           "scope": "source.vjass"
       },
        "fnGetItemX": {
           "prefix": "fnGetItemX",
           "body": "GetItemX(${0:item i})",
           "description": "fnGetItemX",
           "scope": "source.vjass"
       },
        "fnGetItemY": {
           "prefix": "fnGetItemY",
           "body": "GetItemY(${0:item i})",
           "description": "fnGetItemY",
           "scope": "source.vjass"
       },
        "fnSetItemPosition": {
           "prefix": "fnSetItemPosition",
           "body": "SetItemPosition(${0:real y},${1:item i})",
           "description": "fnSetItemPosition",
           "scope": "source.vjass"
       },
        "fnSetItemDropOnDeath": {
           "prefix": "fnSetItemDropOnDeath",
           "body": "SetItemDropOnDeath(${0:item whichItem},${1:boolean flag})",
           "description": "fnSetItemDropOnDeath",
           "scope": "source.vjass"
       },
        "fnSetItemDroppable": {
           "prefix": "fnSetItemDroppable",
           "body": "SetItemDroppable(${0:item i},${1:boolean flag})",
           "description": "fnSetItemDroppable",
           "scope": "source.vjass"
       },
        "fnSetItemPawnable": {
           "prefix": "fnSetItemPawnable",
           "body": "SetItemPawnable(${0:item i},${1:boolean flag})",
           "description": "fnSetItemPawnable",
           "scope": "source.vjass"
       },
        "fnSetItemPlayer": {
           "prefix": "fnSetItemPlayer",
           "body": "SetItemPlayer(${0:item whichItem},${1:boolean changeColor},${2:player whichPlayer})",
           "description": "fnSetItemPlayer",
           "scope": "source.vjass"
       },
        "fnSetItemInvulnerable": {
           "prefix": "fnSetItemInvulnerable",
           "body": "SetItemInvulnerable(${0:item whichItem},${1:boolean flag})",
           "description": "fnSetItemInvulnerable",
           "scope": "source.vjass"
       },
        "fnIsItemInvulnerable": {
           "prefix": "fnIsItemInvulnerable",
           "body": "IsItemInvulnerable(${0:item whichItem})",
           "description": "fnIsItemInvulnerable",
           "scope": "source.vjass"
       },
        "fnSetItemVisible": {
           "prefix": "fnSetItemVisible",
           "body": "SetItemVisible(${0:item whichItem},${1:boolean show})",
           "description": "fnSetItemVisible",
           "scope": "source.vjass"
       },
        "fnIsItemVisible": {
           "prefix": "fnIsItemVisible",
           "body": "IsItemVisible(${0:item whichItem})",
           "description": "fnIsItemVisible",
           "scope": "source.vjass"
       },
        "fnIsItemOwned": {
           "prefix": "fnIsItemOwned",
           "body": "IsItemOwned(${0:item whichItem})",
           "description": "fnIsItemOwned",
           "scope": "source.vjass"
       },
        "fnIsItemPowerup": {
           "prefix": "fnIsItemPowerup",
           "body": "IsItemPowerup(${0:item whichItem})",
           "description": "fnIsItemPowerup",
           "scope": "source.vjass"
       },
        "fnIsItemSellable": {
           "prefix": "fnIsItemSellable",
           "body": "IsItemSellable(${0:item whichItem})",
           "description": "fnIsItemSellable",
           "scope": "source.vjass"
       },
        "fnIsItemPawnable": {
           "prefix": "fnIsItemPawnable",
           "body": "IsItemPawnable(${0:item whichItem})",
           "description": "fnIsItemPawnable",
           "scope": "source.vjass"
       },
        "fnIsItemIdPowerup": {
           "prefix": "fnIsItemIdPowerup",
           "body": "IsItemIdPowerup(${0:integer itemId})",
           "description": "fnIsItemIdPowerup",
           "scope": "source.vjass"
       },
        "fnIsItemIdSellable": {
           "prefix": "fnIsItemIdSellable",
           "body": "IsItemIdSellable(${0:integer itemId})",
           "description": "fnIsItemIdSellable",
           "scope": "source.vjass"
       },
        "fnIsItemIdPawnable": {
           "prefix": "fnIsItemIdPawnable",
           "body": "IsItemIdPawnable(${0:integer itemId})",
           "description": "fnIsItemIdPawnable",
           "scope": "source.vjass"
       },
        "fnEnumItemsInRect": {
           "prefix": "fnEnumItemsInRect",
           "body": "EnumItemsInRect(${0:code actionFunc},${1:boolexpr filter},${2:rect r})",
           "description": "fnEnumItemsInRect",
           "scope": "source.vjass"
       },
        "fnGetItemLevel": {
           "prefix": "fnGetItemLevel",
           "body": "GetItemLevel(${0:item whichItem})",
           "description": "fnGetItemLevel",
           "scope": "source.vjass"
       },
        "fnGetItemType": {
           "prefix": "fnGetItemType",
           "body": "GetItemType(${0:item whichItem})",
           "description": "fnGetItemType",
           "scope": "source.vjass"
       },
        "fnSetItemDropID": {
           "prefix": "fnSetItemDropID",
           "body": "SetItemDropID(${0:item whichItem},${1:integer unitId})",
           "description": "fnSetItemDropID",
           "scope": "source.vjass"
       },
        "fnGetItemName": {
           "prefix": "fnGetItemName",
           "body": "GetItemName(${0:item whichItem})",
           "description": "fnGetItemName",
           "scope": "source.vjass"
       },
        "fnGetItemCharges": {
           "prefix": "fnGetItemCharges",
           "body": "GetItemCharges(${0:item whichItem})",
           "description": "fnGetItemCharges",
           "scope": "source.vjass"
       },
        "fnSetItemCharges": {
           "prefix": "fnSetItemCharges",
           "body": "SetItemCharges(${0:item whichItem},${1:integer charges})",
           "description": "fnSetItemCharges",
           "scope": "source.vjass"
       },
        "fnGetItemUserData": {
           "prefix": "fnGetItemUserData",
           "body": "GetItemUserData(${0:item whichItem})",
           "description": "fnGetItemUserData",
           "scope": "source.vjass"
       },
        "fnSetItemUserData": {
           "prefix": "fnSetItemUserData",
           "body": "SetItemUserData(${0:item whichItem},${1:integer data})",
           "description": "fnSetItemUserData",
           "scope": "source.vjass"
       },
        "fnCreateUnit": {
           "prefix": "fnCreateUnit",
           "body": "CreateUnit(${0:real face},${1:player id},${2:integer unitid})",
           "description": "fnCreateUnit",
           "scope": "source.vjass"
       },
        "fnCreateUnitByName": {
           "prefix": "fnCreateUnitByName",
           "body": "CreateUnitByName(${0:real face},${1:player whichPlayer},${2:string unitname})",
           "description": "fnCreateUnitByName",
           "scope": "source.vjass"
       },
        "fnCreateUnitAtLoc": {
           "prefix": "fnCreateUnitAtLoc",
           "body": "CreateUnitAtLoc(${0:real face},${1:player id},${2:location whichLocation},${3:integer unitid})",
           "description": "fnCreateUnitAtLoc",
           "scope": "source.vjass"
       },
        "fnCreateUnitAtLocByName": {
           "prefix": "fnCreateUnitAtLocByName",
           "body": "CreateUnitAtLocByName(${0:real face},${1:player id},${2:string unitname},${3:location whichLocation})",
           "description": "fnCreateUnitAtLocByName",
           "scope": "source.vjass"
       },
        "fnCreateCorpse": {
           "prefix": "fnCreateCorpse",
           "body": "CreateCorpse(${0:real face},${1:player whichPlayer},${2:integer unitid})",
           "description": "fnCreateCorpse",
           "scope": "source.vjass"
       },
        "fnKillUnit": {
           "prefix": "fnKillUnit",
           "body": "KillUnit(${0:unit whichUnit})",
           "description": "fnKillUnit",
           "scope": "source.vjass"
       },
        "fnRemoveUnit": {
           "prefix": "fnRemoveUnit",
           "body": "RemoveUnit(${0:unit whichUnit})",
           "description": "fnRemoveUnit",
           "scope": "source.vjass"
       },
        "fnShowUnit": {
           "prefix": "fnShowUnit",
           "body": "ShowUnit(${0:boolean show},${1:unit whichUnit})",
           "description": "fnShowUnit",
           "scope": "source.vjass"
       },
        "fnSetUnitState": {
           "prefix": "fnSetUnitState",
           "body": "SetUnitState(${0:unitstate whichUnitState},${1:real newVal},${2:unit whichUnit})",
           "description": "fnSetUnitState",
           "scope": "source.vjass"
       },
        "fnSetUnitX": {
           "prefix": "fnSetUnitX",
           "body": "SetUnitX(${0:real newX},${1:unit whichUnit})",
           "description": "fnSetUnitX",
           "scope": "source.vjass"
       },
        "fnSetUnitY": {
           "prefix": "fnSetUnitY",
           "body": "SetUnitY(${0:real newY},${1:unit whichUnit})",
           "description": "fnSetUnitY",
           "scope": "source.vjass"
       },
        "fnSetUnitPosition": {
           "prefix": "fnSetUnitPosition",
           "body": "SetUnitPosition(${0:real newY},${1:unit whichUnit})",
           "description": "fnSetUnitPosition",
           "scope": "source.vjass"
       },
        "fnSetUnitPositionLoc": {
           "prefix": "fnSetUnitPositionLoc",
           "body": "SetUnitPositionLoc(${0:location whichLocation},${1:unit whichUnit})",
           "description": "fnSetUnitPositionLoc",
           "scope": "source.vjass"
       },
        "fnSetUnitFacing": {
           "prefix": "fnSetUnitFacing",
           "body": "SetUnitFacing(${0:real facingAngle},${1:unit whichUnit})",
           "description": "fnSetUnitFacing",
           "scope": "source.vjass"
       },
        "fnSetUnitFacingTimed": {
           "prefix": "fnSetUnitFacingTimed",
           "body": "SetUnitFacingTimed(${0:real duration},${1:unit whichUnit})",
           "description": "fnSetUnitFacingTimed",
           "scope": "source.vjass"
       },
        "fnSetUnitMoveSpeed": {
           "prefix": "fnSetUnitMoveSpeed",
           "body": "SetUnitMoveSpeed(${0:real newSpeed},${1:unit whichUnit})",
           "description": "fnSetUnitMoveSpeed",
           "scope": "source.vjass"
       },
        "fnSetUnitFlyHeight": {
           "prefix": "fnSetUnitFlyHeight",
           "body": "SetUnitFlyHeight(${0:real rate},${1:unit whichUnit})",
           "description": "fnSetUnitFlyHeight",
           "scope": "source.vjass"
       },
        "fnSetUnitTurnSpeed": {
           "prefix": "fnSetUnitTurnSpeed",
           "body": "SetUnitTurnSpeed(${0:real newTurnSpeed},${1:unit whichUnit})",
           "description": "fnSetUnitTurnSpeed",
           "scope": "source.vjass"
       },
        "fnSetUnitPropWindow": {
           "prefix": "fnSetUnitPropWindow",
           "body": "SetUnitPropWindow(${0:real newPropWindowAngle},${1:unit whichUnit})",
           "description": "fnSetUnitPropWindow",
           "scope": "source.vjass"
       },
        "fnSetUnitAcquireRange": {
           "prefix": "fnSetUnitAcquireRange",
           "body": "SetUnitAcquireRange(${0:real newAcquireRange},${1:unit whichUnit})",
           "description": "fnSetUnitAcquireRange",
           "scope": "source.vjass"
       },
        "fnSetUnitCreepGuard": {
           "prefix": "fnSetUnitCreepGuard",
           "body": "SetUnitCreepGuard(${0:boolean creepGuard},${1:unit whichUnit})",
           "description": "fnSetUnitCreepGuard",
           "scope": "source.vjass"
       },
        "fnGetUnitAcquireRange": {
           "prefix": "fnGetUnitAcquireRange",
           "body": "GetUnitAcquireRange(${0:unit whichUnit})",
           "description": "fnGetUnitAcquireRange",
           "scope": "source.vjass"
       },
        "fnGetUnitTurnSpeed": {
           "prefix": "fnGetUnitTurnSpeed",
           "body": "GetUnitTurnSpeed(${0:unit whichUnit})",
           "description": "fnGetUnitTurnSpeed",
           "scope": "source.vjass"
       },
        "fnGetUnitPropWindow": {
           "prefix": "fnGetUnitPropWindow",
           "body": "GetUnitPropWindow(${0:unit whichUnit})",
           "description": "fnGetUnitPropWindow",
           "scope": "source.vjass"
       },
        "fnGetUnitFlyHeight": {
           "prefix": "fnGetUnitFlyHeight",
           "body": "GetUnitFlyHeight(${0:unit whichUnit})",
           "description": "fnGetUnitFlyHeight",
           "scope": "source.vjass"
       },
        "fnGetUnitDefaultAcquireRange": {
           "prefix": "fnGetUnitDefaultAcquireRange",
           "body": "GetUnitDefaultAcquireRange(${0:unit whichUnit})",
           "description": "fnGetUnitDefaultAcquireRange",
           "scope": "source.vjass"
       },
        "fnGetUnitDefaultTurnSpeed": {
           "prefix": "fnGetUnitDefaultTurnSpeed",
           "body": "GetUnitDefaultTurnSpeed(${0:unit whichUnit})",
           "description": "fnGetUnitDefaultTurnSpeed",
           "scope": "source.vjass"
       },
        "fnGetUnitDefaultPropWindow": {
           "prefix": "fnGetUnitDefaultPropWindow",
           "body": "GetUnitDefaultPropWindow(${0:unit whichUnit})",
           "description": "fnGetUnitDefaultPropWindow",
           "scope": "source.vjass"
       },
        "fnGetUnitDefaultFlyHeight": {
           "prefix": "fnGetUnitDefaultFlyHeight",
           "body": "GetUnitDefaultFlyHeight(${0:unit whichUnit})",
           "description": "fnGetUnitDefaultFlyHeight",
           "scope": "source.vjass"
       },
        "fnSetUnitOwner": {
           "prefix": "fnSetUnitOwner",
           "body": "SetUnitOwner(${0:player whichPlayer},${1:boolean changeColor},${2:unit whichUnit})",
           "description": "fnSetUnitOwner",
           "scope": "source.vjass"
       },
        "fnSetUnitColor": {
           "prefix": "fnSetUnitColor",
           "body": "SetUnitColor(${0:playercolor whichColor},${1:unit whichUnit})",
           "description": "fnSetUnitColor",
           "scope": "source.vjass"
       },
        "fnSetUnitScale": {
           "prefix": "fnSetUnitScale",
           "body": "SetUnitScale(${0:real scaleZ},${1:unit whichUnit})",
           "description": "fnSetUnitScale",
           "scope": "source.vjass"
       },
        "fnSetUnitTimeScale": {
           "prefix": "fnSetUnitTimeScale",
           "body": "SetUnitTimeScale(${0:real timeScale},${1:unit whichUnit})",
           "description": "fnSetUnitTimeScale",
           "scope": "source.vjass"
       },
        "fnSetUnitBlendTime": {
           "prefix": "fnSetUnitBlendTime",
           "body": "SetUnitBlendTime(${0:real blendTime},${1:unit whichUnit})",
           "description": "fnSetUnitBlendTime",
           "scope": "source.vjass"
       },
        "fnSetUnitVertexColor": {
           "prefix": "fnSetUnitVertexColor",
           "body": "SetUnitVertexColor(${0:integer alpha},${1:unit whichUnit})",
           "description": "fnSetUnitVertexColor",
           "scope": "source.vjass"
       },
        "fnQueueUnitAnimation": {
           "prefix": "fnQueueUnitAnimation",
           "body": "QueueUnitAnimation(${0:string whichAnimation},${1:unit whichUnit})",
           "description": "fnQueueUnitAnimation",
           "scope": "source.vjass"
       },
        "fnSetUnitAnimation": {
           "prefix": "fnSetUnitAnimation",
           "body": "SetUnitAnimation(${0:string whichAnimation},${1:unit whichUnit})",
           "description": "fnSetUnitAnimation",
           "scope": "source.vjass"
       },
        "fnSetUnitAnimationByIndex": {
           "prefix": "fnSetUnitAnimationByIndex",
           "body": "SetUnitAnimationByIndex(${0:integer whichAnimation},${1:unit whichUnit})",
           "description": "fnSetUnitAnimationByIndex",
           "scope": "source.vjass"
       },
        "fnSetUnitAnimationWithRarity": {
           "prefix": "fnSetUnitAnimationWithRarity",
           "body": "SetUnitAnimationWithRarity(${0:raritycontrol rarity},${1:string whichAnimation},${2:unit whichUnit})",
           "description": "fnSetUnitAnimationWithRarity",
           "scope": "source.vjass"
       },
        "fnAddUnitAnimationProperties": {
           "prefix": "fnAddUnitAnimationProperties",
           "body": "AddUnitAnimationProperties(${0:boolean add},${1:string animProperties},${2:unit whichUnit})",
           "description": "fnAddUnitAnimationProperties",
           "scope": "source.vjass"
       },
        "fnSetUnitLookAt": {
           "prefix": "fnSetUnitLookAt",
           "body": "SetUnitLookAt(${0:real offsetZ},${1:string whichBone},${2:unit lookAtTarget})",
           "description": "fnSetUnitLookAt",
           "scope": "source.vjass"
       },
        "fnResetUnitLookAt": {
           "prefix": "fnResetUnitLookAt",
           "body": "ResetUnitLookAt(${0:unit whichUnit})",
           "description": "fnResetUnitLookAt",
           "scope": "source.vjass"
       },
        "fnSetUnitRescuable": {
           "prefix": "fnSetUnitRescuable",
           "body": "SetUnitRescuable(${0:player byWhichPlayer},${1:boolean flag},${2:unit whichUnit})",
           "description": "fnSetUnitRescuable",
           "scope": "source.vjass"
       },
        "fnSetUnitRescueRange": {
           "prefix": "fnSetUnitRescueRange",
           "body": "SetUnitRescueRange(${0:real range},${1:unit whichUnit})",
           "description": "fnSetUnitRescueRange",
           "scope": "source.vjass"
       },
        "fnSetHeroStr": {
           "prefix": "fnSetHeroStr",
           "body": "SetHeroStr(${0:integer newStr},${1:boolean permanent},${2:unit whichHero})",
           "description": "fnSetHeroStr",
           "scope": "source.vjass"
       },
        "fnSetHeroAgi": {
           "prefix": "fnSetHeroAgi",
           "body": "SetHeroAgi(${0:integer newAgi},${1:boolean permanent},${2:unit whichHero})",
           "description": "fnSetHeroAgi",
           "scope": "source.vjass"
       },
        "fnSetHeroInt": {
           "prefix": "fnSetHeroInt",
           "body": "SetHeroInt(${0:integer newInt},${1:boolean permanent},${2:unit whichHero})",
           "description": "fnSetHeroInt",
           "scope": "source.vjass"
       },
        "fnGetHeroStr": {
           "prefix": "fnGetHeroStr",
           "body": "GetHeroStr(${0:boolean includeBonuses},${1:unit whichHero})",
           "description": "fnGetHeroStr",
           "scope": "source.vjass"
       },
        "fnGetHeroAgi": {
           "prefix": "fnGetHeroAgi",
           "body": "GetHeroAgi(${0:boolean includeBonuses},${1:unit whichHero})",
           "description": "fnGetHeroAgi",
           "scope": "source.vjass"
       },
        "fnGetHeroInt": {
           "prefix": "fnGetHeroInt",
           "body": "GetHeroInt(${0:boolean includeBonuses},${1:unit whichHero})",
           "description": "fnGetHeroInt",
           "scope": "source.vjass"
       },
        "fnUnitStripHeroLevel": {
           "prefix": "fnUnitStripHeroLevel",
           "body": "UnitStripHeroLevel(${0:integer howManyLevels},${1:unit whichHero})",
           "description": "fnUnitStripHeroLevel",
           "scope": "source.vjass"
       },
        "fnGetHeroXP": {
           "prefix": "fnGetHeroXP",
           "body": "GetHeroXP(${0:unit whichHero})",
           "description": "fnGetHeroXP",
           "scope": "source.vjass"
       },
        "fnSetHeroXP": {
           "prefix": "fnSetHeroXP",
           "body": "SetHeroXP(${0:integer newXpVal},${1:boolean showEyeCandy},${2:unit whichHero})",
           "description": "fnSetHeroXP",
           "scope": "source.vjass"
       },
        "fnGetHeroSkillPoints": {
           "prefix": "fnGetHeroSkillPoints",
           "body": "GetHeroSkillPoints(${0:unit whichHero})",
           "description": "fnGetHeroSkillPoints",
           "scope": "source.vjass"
       },
        "fnUnitModifySkillPoints": {
           "prefix": "fnUnitModifySkillPoints",
           "body": "UnitModifySkillPoints(${0:integer skillPointDelta},${1:unit whichHero})",
           "description": "fnUnitModifySkillPoints",
           "scope": "source.vjass"
       },
        "fnAddHeroXP": {
           "prefix": "fnAddHeroXP",
           "body": "AddHeroXP(${0:integer xpToAdd},${1:boolean showEyeCandy},${2:unit whichHero})",
           "description": "fnAddHeroXP",
           "scope": "source.vjass"
       },
        "fnSetHeroLevel": {
           "prefix": "fnSetHeroLevel",
           "body": "SetHeroLevel(${0:integer level},${1:boolean showEyeCandy},${2:unit whichHero})",
           "description": "fnSetHeroLevel",
           "scope": "source.vjass"
       },
        "fnGetHeroLevel": {
           "prefix": "fnGetHeroLevel",
           "body": "GetHeroLevel(${0:unit whichHero})",
           "description": "fnGetHeroLevel",
           "scope": "source.vjass"
       },
        "fnGetUnitLevel": {
           "prefix": "fnGetUnitLevel",
           "body": "GetUnitLevel(${0:unit whichUnit})",
           "description": "fnGetUnitLevel",
           "scope": "source.vjass"
       },
        "fnGetHeroProperName": {
           "prefix": "fnGetHeroProperName",
           "body": "GetHeroProperName(${0:unit whichHero})",
           "description": "fnGetHeroProperName",
           "scope": "source.vjass"
       },
        "fnSuspendHeroXP": {
           "prefix": "fnSuspendHeroXP",
           "body": "SuspendHeroXP(${0:boolean flag},${1:unit whichHero})",
           "description": "fnSuspendHeroXP",
           "scope": "source.vjass"
       },
        "fnIsSuspendedXP": {
           "prefix": "fnIsSuspendedXP",
           "body": "IsSuspendedXP(${0:unit whichHero})",
           "description": "fnIsSuspendedXP",
           "scope": "source.vjass"
       },
        "fnSelectHeroSkill": {
           "prefix": "fnSelectHeroSkill",
           "body": "SelectHeroSkill(${0:integer abilcode},${1:unit whichHero})",
           "description": "fnSelectHeroSkill",
           "scope": "source.vjass"
       },
        "fnGetUnitAbilityLevel": {
           "prefix": "fnGetUnitAbilityLevel",
           "body": "GetUnitAbilityLevel(${0:integer abilcode},${1:unit whichUnit})",
           "description": "fnGetUnitAbilityLevel",
           "scope": "source.vjass"
       },
        "fnDecUnitAbilityLevel": {
           "prefix": "fnDecUnitAbilityLevel",
           "body": "DecUnitAbilityLevel(${0:integer abilcode},${1:unit whichUnit})",
           "description": "fnDecUnitAbilityLevel",
           "scope": "source.vjass"
       },
        "fnIncUnitAbilityLevel": {
           "prefix": "fnIncUnitAbilityLevel",
           "body": "IncUnitAbilityLevel(${0:integer abilcode},${1:unit whichUnit})",
           "description": "fnIncUnitAbilityLevel",
           "scope": "source.vjass"
       },
        "fnSetUnitAbilityLevel": {
           "prefix": "fnSetUnitAbilityLevel",
           "body": "SetUnitAbilityLevel(${0:integer level},${1:unit whichUnit})",
           "description": "fnSetUnitAbilityLevel",
           "scope": "source.vjass"
       },
        "fnReviveHero": {
           "prefix": "fnReviveHero",
           "body": "ReviveHero(${0:real y},${1:boolean doEyecandy},${2:unit whichHero})",
           "description": "fnReviveHero",
           "scope": "source.vjass"
       },
        "fnReviveHeroLoc": {
           "prefix": "fnReviveHeroLoc",
           "body": "ReviveHeroLoc(${0:boolean doEyecandy},${1:location loc},${2:unit whichHero})",
           "description": "fnReviveHeroLoc",
           "scope": "source.vjass"
       },
        "fnSetUnitExploded": {
           "prefix": "fnSetUnitExploded",
           "body": "SetUnitExploded(${0:boolean exploded},${1:unit whichUnit})",
           "description": "fnSetUnitExploded",
           "scope": "source.vjass"
       },
        "fnSetUnitInvulnerable": {
           "prefix": "fnSetUnitInvulnerable",
           "body": "SetUnitInvulnerable(${0:boolean flag},${1:unit whichUnit})",
           "description": "fnSetUnitInvulnerable",
           "scope": "source.vjass"
       },
        "fnPauseUnit": {
           "prefix": "fnPauseUnit",
           "body": "PauseUnit(${0:boolean flag},${1:unit whichUnit})",
           "description": "fnPauseUnit",
           "scope": "source.vjass"
       },
        "fnIsUnitPaused": {
           "prefix": "fnIsUnitPaused",
           "body": "IsUnitPaused(${0:unit whichHero})",
           "description": "fnIsUnitPaused",
           "scope": "source.vjass"
       },
        "fnSetUnitPathing": {
           "prefix": "fnSetUnitPathing",
           "body": "SetUnitPathing(${0:boolean flag},${1:unit whichUnit})",
           "description": "fnSetUnitPathing",
           "scope": "source.vjass"
       },
        "fnClearSelection": {
           "prefix": "fnClearSelection",
           "body": "ClearSelection(${0:nothing})",
           "description": "fnClearSelection",
           "scope": "source.vjass"
       },
        "fnSelectUnit": {
           "prefix": "fnSelectUnit",
           "body": "SelectUnit(${0:boolean flag},${1:unit whichUnit})",
           "description": "fnSelectUnit",
           "scope": "source.vjass"
       },
        "fnGetUnitPointValue": {
           "prefix": "fnGetUnitPointValue",
           "body": "GetUnitPointValue(${0:unit whichUnit})",
           "description": "fnGetUnitPointValue",
           "scope": "source.vjass"
       },
        "fnGetUnitPointValueByType": {
           "prefix": "fnGetUnitPointValueByType",
           "body": "GetUnitPointValueByType(${0:integer unitType})",
           "description": "fnGetUnitPointValueByType",
           "scope": "source.vjass"
       },
        "fnUnitAddItem": {
           "prefix": "fnUnitAddItem",
           "body": "UnitAddItem(${0:item whichItem},${1:unit whichUnit})",
           "description": "fnUnitAddItem",
           "scope": "source.vjass"
       },
        "fnUnitAddItemById": {
           "prefix": "fnUnitAddItemById",
           "body": "UnitAddItemById(${0:integer itemId},${1:unit whichUnit})",
           "description": "fnUnitAddItemById",
           "scope": "source.vjass"
       },
        "fnUnitAddItemToSlotById": {
           "prefix": "fnUnitAddItemToSlotById",
           "body": "UnitAddItemToSlotById(${0:integer itemSlot},${1:unit whichUnit})",
           "description": "fnUnitAddItemToSlotById",
           "scope": "source.vjass"
       },
        "fnUnitRemoveItem": {
           "prefix": "fnUnitRemoveItem",
           "body": "UnitRemoveItem(${0:item whichItem},${1:unit whichUnit})",
           "description": "fnUnitRemoveItem",
           "scope": "source.vjass"
       },
        "fnUnitRemoveItemFromSlot": {
           "prefix": "fnUnitRemoveItemFromSlot",
           "body": "UnitRemoveItemFromSlot(${0:integer itemSlot},${1:unit whichUnit})",
           "description": "fnUnitRemoveItemFromSlot",
           "scope": "source.vjass"
       },
        "fnUnitHasItem": {
           "prefix": "fnUnitHasItem",
           "body": "UnitHasItem(${0:item whichItem},${1:unit whichUnit})",
           "description": "fnUnitHasItem",
           "scope": "source.vjass"
       },
        "fnUnitItemInSlot": {
           "prefix": "fnUnitItemInSlot",
           "body": "UnitItemInSlot(${0:integer itemSlot},${1:unit whichUnit})",
           "description": "fnUnitItemInSlot",
           "scope": "source.vjass"
       },
        "fnUnitInventorySize": {
           "prefix": "fnUnitInventorySize",
           "body": "UnitInventorySize(${0:unit whichUnit})",
           "description": "fnUnitInventorySize",
           "scope": "source.vjass"
       },
        "fnUnitDropItemPoint": {
           "prefix": "fnUnitDropItemPoint",
           "body": "UnitDropItemPoint(${0:real y},${1:item whichItem},${2:unit whichUnit})",
           "description": "fnUnitDropItemPoint",
           "scope": "source.vjass"
       },
        "fnUnitDropItemSlot": {
           "prefix": "fnUnitDropItemSlot",
           "body": "UnitDropItemSlot(${0:item whichItem},${1:unit whichUnit},${2:integer slot})",
           "description": "fnUnitDropItemSlot",
           "scope": "source.vjass"
       },
        "fnUnitDropItemTarget": {
           "prefix": "fnUnitDropItemTarget",
           "body": "UnitDropItemTarget(${0:item whichItem},${1:widget target},${2:unit whichUnit})",
           "description": "fnUnitDropItemTarget",
           "scope": "source.vjass"
       },
        "fnUnitUseItem": {
           "prefix": "fnUnitUseItem",
           "body": "UnitUseItem(${0:item whichItem},${1:unit whichUnit})",
           "description": "fnUnitUseItem",
           "scope": "source.vjass"
       },
        "fnUnitUseItemPoint": {
           "prefix": "fnUnitUseItemPoint",
           "body": "UnitUseItemPoint(${0:real y},${1:item whichItem},${2:unit whichUnit})",
           "description": "fnUnitUseItemPoint",
           "scope": "source.vjass"
       },
        "fnUnitUseItemTarget": {
           "prefix": "fnUnitUseItemTarget",
           "body": "UnitUseItemTarget(${0:item whichItem},${1:widget target},${2:unit whichUnit})",
           "description": "fnUnitUseItemTarget",
           "scope": "source.vjass"
       },
        "fnGetUnitX": {
           "prefix": "fnGetUnitX",
           "body": "GetUnitX(${0:unit whichUnit})",
           "description": "fnGetUnitX",
           "scope": "source.vjass"
       },
        "fnGetUnitY": {
           "prefix": "fnGetUnitY",
           "body": "GetUnitY(${0:unit whichUnit})",
           "description": "fnGetUnitY",
           "scope": "source.vjass"
       },
        "fnGetUnitLoc": {
           "prefix": "fnGetUnitLoc",
           "body": "GetUnitLoc(${0:unit whichUnit})",
           "description": "fnGetUnitLoc",
           "scope": "source.vjass"
       },
        "fnGetUnitFacing": {
           "prefix": "fnGetUnitFacing",
           "body": "GetUnitFacing(${0:unit whichUnit})",
           "description": "fnGetUnitFacing",
           "scope": "source.vjass"
       },
        "fnGetUnitMoveSpeed": {
           "prefix": "fnGetUnitMoveSpeed",
           "body": "GetUnitMoveSpeed(${0:unit whichUnit})",
           "description": "fnGetUnitMoveSpeed",
           "scope": "source.vjass"
       },
        "fnGetUnitDefaultMoveSpeed": {
           "prefix": "fnGetUnitDefaultMoveSpeed",
           "body": "GetUnitDefaultMoveSpeed(${0:unit whichUnit})",
           "description": "fnGetUnitDefaultMoveSpeed",
           "scope": "source.vjass"
       },
        "fnGetUnitState": {
           "prefix": "fnGetUnitState",
           "body": "GetUnitState(${0:unitstate whichUnitState},${1:unit whichUnit})",
           "description": "fnGetUnitState",
           "scope": "source.vjass"
       },
        "fnGetOwningPlayer": {
           "prefix": "fnGetOwningPlayer",
           "body": "GetOwningPlayer(${0:unit whichUnit})",
           "description": "fnGetOwningPlayer",
           "scope": "source.vjass"
       },
        "fnGetUnitTypeId": {
           "prefix": "fnGetUnitTypeId",
           "body": "GetUnitTypeId(${0:unit whichUnit})",
           "description": "fnGetUnitTypeId",
           "scope": "source.vjass"
       },
        "fnGetUnitRace": {
           "prefix": "fnGetUnitRace",
           "body": "GetUnitRace(${0:unit whichUnit})",
           "description": "fnGetUnitRace",
           "scope": "source.vjass"
       },
        "fnGetUnitName": {
           "prefix": "fnGetUnitName",
           "body": "GetUnitName(${0:unit whichUnit})",
           "description": "fnGetUnitName",
           "scope": "source.vjass"
       },
        "fnGetUnitFoodUsed": {
           "prefix": "fnGetUnitFoodUsed",
           "body": "GetUnitFoodUsed(${0:unit whichUnit})",
           "description": "fnGetUnitFoodUsed",
           "scope": "source.vjass"
       },
        "fnGetUnitFoodMade": {
           "prefix": "fnGetUnitFoodMade",
           "body": "GetUnitFoodMade(${0:unit whichUnit})",
           "description": "fnGetUnitFoodMade",
           "scope": "source.vjass"
       },
        "fnGetFoodMade": {
           "prefix": "fnGetFoodMade",
           "body": "GetFoodMade(${0:integer unitId})",
           "description": "fnGetFoodMade",
           "scope": "source.vjass"
       },
        "fnGetFoodUsed": {
           "prefix": "fnGetFoodUsed",
           "body": "GetFoodUsed(${0:integer unitId})",
           "description": "fnGetFoodUsed",
           "scope": "source.vjass"
       },
        "fnSetUnitUseFood": {
           "prefix": "fnSetUnitUseFood",
           "body": "SetUnitUseFood(${0:boolean useFood},${1:unit whichUnit})",
           "description": "fnSetUnitUseFood",
           "scope": "source.vjass"
       },
        "fnGetUnitRallyPoint": {
           "prefix": "fnGetUnitRallyPoint",
           "body": "GetUnitRallyPoint(${0:unit whichUnit})",
           "description": "fnGetUnitRallyPoint",
           "scope": "source.vjass"
       },
        "fnGetUnitRallyUnit": {
           "prefix": "fnGetUnitRallyUnit",
           "body": "GetUnitRallyUnit(${0:unit whichUnit})",
           "description": "fnGetUnitRallyUnit",
           "scope": "source.vjass"
       },
        "fnGetUnitRallyDestructable": {
           "prefix": "fnGetUnitRallyDestructable",
           "body": "GetUnitRallyDestructable(${0:unit whichUnit})",
           "description": "fnGetUnitRallyDestructable",
           "scope": "source.vjass"
       },
        "fnIsUnitInGroup": {
           "prefix": "fnIsUnitInGroup",
           "body": "IsUnitInGroup(${0:group whichGroup},${1:unit whichUnit})",
           "description": "fnIsUnitInGroup",
           "scope": "source.vjass"
       },
        "fnIsUnitInForce": {
           "prefix": "fnIsUnitInForce",
           "body": "IsUnitInForce(${0:force whichForce},${1:unit whichUnit})",
           "description": "fnIsUnitInForce",
           "scope": "source.vjass"
       },
        "fnIsUnitOwnedByPlayer": {
           "prefix": "fnIsUnitOwnedByPlayer",
           "body": "IsUnitOwnedByPlayer(${0:player whichPlayer},${1:unit whichUnit})",
           "description": "fnIsUnitOwnedByPlayer",
           "scope": "source.vjass"
       },
        "fnIsUnitAlly": {
           "prefix": "fnIsUnitAlly",
           "body": "IsUnitAlly(${0:player whichPlayer},${1:unit whichUnit})",
           "description": "fnIsUnitAlly",
           "scope": "source.vjass"
       },
        "fnIsUnitEnemy": {
           "prefix": "fnIsUnitEnemy",
           "body": "IsUnitEnemy(${0:player whichPlayer},${1:unit whichUnit})",
           "description": "fnIsUnitEnemy",
           "scope": "source.vjass"
       },
        "fnIsUnitVisible": {
           "prefix": "fnIsUnitVisible",
           "body": "IsUnitVisible(${0:player whichPlayer},${1:unit whichUnit})",
           "description": "fnIsUnitVisible",
           "scope": "source.vjass"
       },
        "fnIsUnitDetected": {
           "prefix": "fnIsUnitDetected",
           "body": "IsUnitDetected(${0:player whichPlayer},${1:unit whichUnit})",
           "description": "fnIsUnitDetected",
           "scope": "source.vjass"
       },
        "fnIsUnitInvisible": {
           "prefix": "fnIsUnitInvisible",
           "body": "IsUnitInvisible(${0:player whichPlayer},${1:unit whichUnit})",
           "description": "fnIsUnitInvisible",
           "scope": "source.vjass"
       },
        "fnIsUnitFogged": {
           "prefix": "fnIsUnitFogged",
           "body": "IsUnitFogged(${0:player whichPlayer},${1:unit whichUnit})",
           "description": "fnIsUnitFogged",
           "scope": "source.vjass"
       },
        "fnIsUnitMasked": {
           "prefix": "fnIsUnitMasked",
           "body": "IsUnitMasked(${0:player whichPlayer},${1:unit whichUnit})",
           "description": "fnIsUnitMasked",
           "scope": "source.vjass"
       },
        "fnIsUnitSelected": {
           "prefix": "fnIsUnitSelected",
           "body": "IsUnitSelected(${0:player whichPlayer},${1:unit whichUnit})",
           "description": "fnIsUnitSelected",
           "scope": "source.vjass"
       },
        "fnIsUnitRace": {
           "prefix": "fnIsUnitRace",
           "body": "IsUnitRace(${0:race whichRace},${1:unit whichUnit})",
           "description": "fnIsUnitRace",
           "scope": "source.vjass"
       },
        "fnIsUnitType": {
           "prefix": "fnIsUnitType",
           "body": "IsUnitType(${0:unittype whichUnitType},${1:unit whichUnit})",
           "description": "fnIsUnitType",
           "scope": "source.vjass"
       },
        "fnIsUnit": {
           "prefix": "fnIsUnit",
           "body": "IsUnit(${0:unit whichSpecifiedUnit})",
           "description": "fnIsUnit",
           "scope": "source.vjass"
       },
        "fnIsUnitInRange": {
           "prefix": "fnIsUnitInRange",
           "body": "IsUnitInRange(${0:real distance},${1:unit otherUnit})",
           "description": "fnIsUnitInRange",
           "scope": "source.vjass"
       },
        "fnIsUnitInRangeXY": {
           "prefix": "fnIsUnitInRangeXY",
           "body": "IsUnitInRangeXY(${0:real distance},${1:unit whichUnit})",
           "description": "fnIsUnitInRangeXY",
           "scope": "source.vjass"
       },
        "fnIsUnitInRangeLoc": {
           "prefix": "fnIsUnitInRangeLoc",
           "body": "IsUnitInRangeLoc(${0:real distance},${1:location whichLocation},${2:unit whichUnit})",
           "description": "fnIsUnitInRangeLoc",
           "scope": "source.vjass"
       },
        "fnIsUnitHidden": {
           "prefix": "fnIsUnitHidden",
           "body": "IsUnitHidden(${0:unit whichUnit})",
           "description": "fnIsUnitHidden",
           "scope": "source.vjass"
       },
        "fnIsUnitIllusion": {
           "prefix": "fnIsUnitIllusion",
           "body": "IsUnitIllusion(${0:unit whichUnit})",
           "description": "fnIsUnitIllusion",
           "scope": "source.vjass"
       },
        "fnIsUnitInTransport": {
           "prefix": "fnIsUnitInTransport",
           "body": "IsUnitInTransport(${0:unit whichTransport})",
           "description": "fnIsUnitInTransport",
           "scope": "source.vjass"
       },
        "fnIsUnitLoaded": {
           "prefix": "fnIsUnitLoaded",
           "body": "IsUnitLoaded(${0:unit whichUnit})",
           "description": "fnIsUnitLoaded",
           "scope": "source.vjass"
       },
        "fnIsHeroUnitId": {
           "prefix": "fnIsHeroUnitId",
           "body": "IsHeroUnitId(${0:integer unitId})",
           "description": "fnIsHeroUnitId",
           "scope": "source.vjass"
       },
        "fnIsUnitIdType": {
           "prefix": "fnIsUnitIdType",
           "body": "IsUnitIdType(${0:integer unitId},${1:unittype whichUnitType})",
           "description": "fnIsUnitIdType",
           "scope": "source.vjass"
       },
        "fnUnitShareVision": {
           "prefix": "fnUnitShareVision",
           "body": "UnitShareVision(${0:player whichPlayer},${1:boolean share},${2:unit whichUnit})",
           "description": "fnUnitShareVision",
           "scope": "source.vjass"
       },
        "fnUnitSuspendDecay": {
           "prefix": "fnUnitSuspendDecay",
           "body": "UnitSuspendDecay(${0:boolean suspend},${1:unit whichUnit})",
           "description": "fnUnitSuspendDecay",
           "scope": "source.vjass"
       },
        "fnUnitAddType": {
           "prefix": "fnUnitAddType",
           "body": "UnitAddType(${0:unittype whichUnitType},${1:unit whichUnit})",
           "description": "fnUnitAddType",
           "scope": "source.vjass"
       },
        "fnUnitRemoveType": {
           "prefix": "fnUnitRemoveType",
           "body": "UnitRemoveType(${0:unittype whichUnitType},${1:unit whichUnit})",
           "description": "fnUnitRemoveType",
           "scope": "source.vjass"
       },
        "fnUnitAddAbility": {
           "prefix": "fnUnitAddAbility",
           "body": "UnitAddAbility(${0:integer abilityId},${1:unit whichUnit})",
           "description": "fnUnitAddAbility",
           "scope": "source.vjass"
       },
        "fnUnitRemoveAbility": {
           "prefix": "fnUnitRemoveAbility",
           "body": "UnitRemoveAbility(${0:integer abilityId},${1:unit whichUnit})",
           "description": "fnUnitRemoveAbility",
           "scope": "source.vjass"
       },
        "fnUnitMakeAbilityPermanent": {
           "prefix": "fnUnitMakeAbilityPermanent",
           "body": "UnitMakeAbilityPermanent(${0:integer abilityId},${1:boolean permanent},${2:unit whichUnit})",
           "description": "fnUnitMakeAbilityPermanent",
           "scope": "source.vjass"
       },
        "fnUnitRemoveBuffs": {
           "prefix": "fnUnitRemoveBuffs",
           "body": "UnitRemoveBuffs(${0:boolean removeNegative},${1:unit whichUnit})",
           "description": "fnUnitRemoveBuffs",
           "scope": "source.vjass"
       },
        "fnUnitRemoveBuffsEx": {
           "prefix": "fnUnitRemoveBuffsEx",
           "body": "UnitRemoveBuffsEx(${0:boolean autoDispel},${1:unit whichUnit})",
           "description": "fnUnitRemoveBuffsEx",
           "scope": "source.vjass"
       },
        "fnUnitHasBuffsEx": {
           "prefix": "fnUnitHasBuffsEx",
           "body": "UnitHasBuffsEx(${0:boolean autoDispel},${1:unit whichUnit})",
           "description": "fnUnitHasBuffsEx",
           "scope": "source.vjass"
       },
        "fnUnitCountBuffsEx": {
           "prefix": "fnUnitCountBuffsEx",
           "body": "UnitCountBuffsEx(${0:boolean autoDispel},${1:unit whichUnit})",
           "description": "fnUnitCountBuffsEx",
           "scope": "source.vjass"
       },
        "fnUnitAddSleep": {
           "prefix": "fnUnitAddSleep",
           "body": "UnitAddSleep(${0:boolean add},${1:unit whichUnit})",
           "description": "fnUnitAddSleep",
           "scope": "source.vjass"
       },
        "fnUnitCanSleep": {
           "prefix": "fnUnitCanSleep",
           "body": "UnitCanSleep(${0:unit whichUnit})",
           "description": "fnUnitCanSleep",
           "scope": "source.vjass"
       },
        "fnUnitAddSleepPerm": {
           "prefix": "fnUnitAddSleepPerm",
           "body": "UnitAddSleepPerm(${0:boolean add},${1:unit whichUnit})",
           "description": "fnUnitAddSleepPerm",
           "scope": "source.vjass"
       },
        "fnUnitCanSleepPerm": {
           "prefix": "fnUnitCanSleepPerm",
           "body": "UnitCanSleepPerm(${0:unit whichUnit})",
           "description": "fnUnitCanSleepPerm",
           "scope": "source.vjass"
       },
        "fnUnitIsSleeping": {
           "prefix": "fnUnitIsSleeping",
           "body": "UnitIsSleeping(${0:unit whichUnit})",
           "description": "fnUnitIsSleeping",
           "scope": "source.vjass"
       },
        "fnUnitWakeUp": {
           "prefix": "fnUnitWakeUp",
           "body": "UnitWakeUp(${0:unit whichUnit})",
           "description": "fnUnitWakeUp",
           "scope": "source.vjass"
       },
        "fnUnitApplyTimedLife": {
           "prefix": "fnUnitApplyTimedLife",
           "body": "UnitApplyTimedLife(${0:real duration},${1:integer buffId},${2:unit whichUnit})",
           "description": "fnUnitApplyTimedLife",
           "scope": "source.vjass"
       },
        "fnUnitIgnoreAlarm": {
           "prefix": "fnUnitIgnoreAlarm",
           "body": "UnitIgnoreAlarm(${0:boolean flag},${1:unit whichUnit})",
           "description": "fnUnitIgnoreAlarm",
           "scope": "source.vjass"
       },
        "fnUnitIgnoreAlarmToggled": {
           "prefix": "fnUnitIgnoreAlarmToggled",
           "body": "UnitIgnoreAlarmToggled(${0:unit whichUnit})",
           "description": "fnUnitIgnoreAlarmToggled",
           "scope": "source.vjass"
       },
        "fnUnitResetCooldown": {
           "prefix": "fnUnitResetCooldown",
           "body": "UnitResetCooldown(${0:unit whichUnit})",
           "description": "fnUnitResetCooldown",
           "scope": "source.vjass"
       },
        "fnUnitSetConstructionProgress": {
           "prefix": "fnUnitSetConstructionProgress",
           "body": "UnitSetConstructionProgress(${0:integer constructionPercentage},${1:unit whichUnit})",
           "description": "fnUnitSetConstructionProgress",
           "scope": "source.vjass"
       },
        "fnUnitSetUpgradeProgress": {
           "prefix": "fnUnitSetUpgradeProgress",
           "body": "UnitSetUpgradeProgress(${0:integer upgradePercentage},${1:unit whichUnit})",
           "description": "fnUnitSetUpgradeProgress",
           "scope": "source.vjass"
       },
        "fnUnitPauseTimedLife": {
           "prefix": "fnUnitPauseTimedLife",
           "body": "UnitPauseTimedLife(${0:boolean flag},${1:unit whichUnit})",
           "description": "fnUnitPauseTimedLife",
           "scope": "source.vjass"
       },
        "fnUnitSetUsesAltIcon": {
           "prefix": "fnUnitSetUsesAltIcon",
           "body": "UnitSetUsesAltIcon(${0:boolean flag},${1:unit whichUnit})",
           "description": "fnUnitSetUsesAltIcon",
           "scope": "source.vjass"
       },
        "fnUnitDamagePoint": {
           "prefix": "fnUnitDamagePoint",
           "body": "UnitDamagePoint(${0:real amount},${1:damagetype damageType},${2:weapontype weaponType},${3:boolean ranged},${4:attacktype attackType},${5:unit whichUnit})",
           "description": "fnUnitDamagePoint",
           "scope": "source.vjass"
       },
        "fnUnitDamageTarget": {
           "prefix": "fnUnitDamageTarget",
           "body": "UnitDamageTarget(${0:real amount},${1:widget target},${2:damagetype damageType},${3:weapontype weaponType},${4:boolean ranged},${5:attacktype attackType},${6:unit whichUnit})",
           "description": "fnUnitDamageTarget",
           "scope": "source.vjass"
       },
        "fnIssueImmediateOrder": {
           "prefix": "fnIssueImmediateOrder",
           "body": "IssueImmediateOrder(${0:string order},${1:unit whichUnit})",
           "description": "fnIssueImmediateOrder",
           "scope": "source.vjass"
       },
        "fnIssueImmediateOrderById": {
           "prefix": "fnIssueImmediateOrderById",
           "body": "IssueImmediateOrderById(${0:integer order},${1:unit whichUnit})",
           "description": "fnIssueImmediateOrderById",
           "scope": "source.vjass"
       },
        "fnIssuePointOrder": {
           "prefix": "fnIssuePointOrder",
           "body": "IssuePointOrder(${0:real y},${1:string order},${2:unit whichUnit})",
           "description": "fnIssuePointOrder",
           "scope": "source.vjass"
       },
        "fnIssuePointOrderLoc": {
           "prefix": "fnIssuePointOrderLoc",
           "body": "IssuePointOrderLoc(${0:string order},${1:unit whichUnit},${2:location whichLocation})",
           "description": "fnIssuePointOrderLoc",
           "scope": "source.vjass"
       },
        "fnIssuePointOrderById": {
           "prefix": "fnIssuePointOrderById",
           "body": "IssuePointOrderById(${0:real y},${1:integer order},${2:unit whichUnit})",
           "description": "fnIssuePointOrderById",
           "scope": "source.vjass"
       },
        "fnIssuePointOrderByIdLoc": {
           "prefix": "fnIssuePointOrderByIdLoc",
           "body": "IssuePointOrderByIdLoc(${0:integer order},${1:location whichLocation},${2:unit whichUnit})",
           "description": "fnIssuePointOrderByIdLoc",
           "scope": "source.vjass"
       },
        "fnIssueTargetOrder": {
           "prefix": "fnIssueTargetOrder",
           "body": "IssueTargetOrder(${0:widget targetWidget},${1:string order},${2:unit whichUnit})",
           "description": "fnIssueTargetOrder",
           "scope": "source.vjass"
       },
        "fnIssueTargetOrderById": {
           "prefix": "fnIssueTargetOrderById",
           "body": "IssueTargetOrderById(${0:integer order},${1:widget targetWidget},${2:unit whichUnit})",
           "description": "fnIssueTargetOrderById",
           "scope": "source.vjass"
       },
        "fnIssueInstantPointOrder": {
           "prefix": "fnIssueInstantPointOrder",
           "body": "IssueInstantPointOrder(${0:real y},${1:widget instantTargetWidget},${2:string order},${3:unit whichUnit})",
           "description": "fnIssueInstantPointOrder",
           "scope": "source.vjass"
       },
        "fnIssueInstantPointOrderById": {
           "prefix": "fnIssueInstantPointOrderById",
           "body": "IssueInstantPointOrderById(${0:real y},${1:integer order},${2:widget instantTargetWidget},${3:unit whichUnit})",
           "description": "fnIssueInstantPointOrderById",
           "scope": "source.vjass"
       },
        "fnIssueInstantTargetOrder": {
           "prefix": "fnIssueInstantTargetOrder",
           "body": "IssueInstantTargetOrder(${0:widget instantTargetWidget},${1:string order},${2:unit whichUnit})",
           "description": "fnIssueInstantTargetOrder",
           "scope": "source.vjass"
       },
        "fnIssueInstantTargetOrderById": {
           "prefix": "fnIssueInstantTargetOrderById",
           "body": "IssueInstantTargetOrderById(${0:integer order},${1:widget instantTargetWidget},${2:unit whichUnit})",
           "description": "fnIssueInstantTargetOrderById",
           "scope": "source.vjass"
       },
        "fnIssueBuildOrder": {
           "prefix": "fnIssueBuildOrder",
           "body": "IssueBuildOrder(${0:real y},${1:string unitToBuild},${2:unit whichPeon})",
           "description": "fnIssueBuildOrder",
           "scope": "source.vjass"
       },
        "fnIssueBuildOrderById": {
           "prefix": "fnIssueBuildOrderById",
           "body": "IssueBuildOrderById(${0:real y},${1:integer unitId},${2:unit whichPeon})",
           "description": "fnIssueBuildOrderById",
           "scope": "source.vjass"
       },
        "fnIssueNeutralImmediateOrder": {
           "prefix": "fnIssueNeutralImmediateOrder",
           "body": "IssueNeutralImmediateOrder(${0:player forWhichPlayer},${1:string unitToBuild},${2:unit neutralStructure})",
           "description": "fnIssueNeutralImmediateOrder",
           "scope": "source.vjass"
       },
        "fnIssueNeutralImmediateOrderById": {
           "prefix": "fnIssueNeutralImmediateOrderById",
           "body": "IssueNeutralImmediateOrderById(${0:player forWhichPlayerunit},${1:neutralStructure, integer})",
           "description": "fnIssueNeutralImmediateOrderById",
           "scope": "source.vjass"
       },
        "fnIssueNeutralPointOrder": {
           "prefix": "fnIssueNeutralPointOrder",
           "body": "IssueNeutralPointOrder(${0:unitToBuild, real},${1:player forWhichPlayerunit},${2:x, real},${3:neutralStructure, string})",
           "description": "fnIssueNeutralPointOrder",
           "scope": "source.vjass"
       },
        "fnIssueNeutralPointOrderById": {
           "prefix": "fnIssueNeutralPointOrderById",
           "body": "IssueNeutralPointOrderById(${0:unitId, real},${1:player forWhichPlayerunit},${2:x, real},${3:neutralStructure, integer})",
           "description": "fnIssueNeutralPointOrderById",
           "scope": "source.vjass"
       },
        "fnIssueNeutralTargetOrder": {
           "prefix": "fnIssueNeutralTargetOrder",
           "body": "IssueNeutralTargetOrder(${0:unitToBuild, widget},${1:player forWhichPlayerunit},${2:neutralStructure, string})",
           "description": "fnIssueNeutralTargetOrder",
           "scope": "source.vjass"
       },
        "fnIssueNeutralTargetOrderById": {
           "prefix": "fnIssueNeutralTargetOrderById",
           "body": "IssueNeutralTargetOrderById(${0:unitId, widget},${1:player forWhichPlayerunit},${2:neutralStructure, integer})",
           "description": "fnIssueNeutralTargetOrderById",
           "scope": "source.vjass"
       },
        "fnGetUnitCurrentOrder": {
           "prefix": "fnGetUnitCurrentOrder",
           "body": "GetUnitCurrentOrder(${0:unit whichUnit})",
           "description": "fnGetUnitCurrentOrder",
           "scope": "source.vjass"
       },
        "fnSetResourceAmount": {
           "prefix": "fnSetResourceAmount",
           "body": "SetResourceAmount(${0:integer amount},${1:unit whichUnit})",
           "description": "fnSetResourceAmount",
           "scope": "source.vjass"
       },
        "fnAddResourceAmount": {
           "prefix": "fnAddResourceAmount",
           "body": "AddResourceAmount(${0:integer amount},${1:unit whichUnit})",
           "description": "fnAddResourceAmount",
           "scope": "source.vjass"
       },
        "fnGetResourceAmount": {
           "prefix": "fnGetResourceAmount",
           "body": "GetResourceAmount(${0:unit whichUnit})",
           "description": "fnGetResourceAmount",
           "scope": "source.vjass"
       },
        "fnWaygateGetDestinationX": {
           "prefix": "fnWaygateGetDestinationX",
           "body": "WaygateGetDestinationX(${0:unit waygate})",
           "description": "fnWaygateGetDestinationX",
           "scope": "source.vjass"
       },
        "fnWaygateGetDestinationY": {
           "prefix": "fnWaygateGetDestinationY",
           "body": "WaygateGetDestinationY(${0:unit waygate})",
           "description": "fnWaygateGetDestinationY",
           "scope": "source.vjass"
       },
        "fnWaygateSetDestination": {
           "prefix": "fnWaygateSetDestination",
           "body": "WaygateSetDestination(${0:real y},${1:unit waygate})",
           "description": "fnWaygateSetDestination",
           "scope": "source.vjass"
       },
        "fnWaygateActivate": {
           "prefix": "fnWaygateActivate",
           "body": "WaygateActivate(${0:boolean activate},${1:unit waygate})",
           "description": "fnWaygateActivate",
           "scope": "source.vjass"
       },
        "fnWaygateIsActive": {
           "prefix": "fnWaygateIsActive",
           "body": "WaygateIsActive(${0:unit waygate})",
           "description": "fnWaygateIsActive",
           "scope": "source.vjass"
       },
        "fnAddItemToAllStock": {
           "prefix": "fnAddItemToAllStock",
           "body": "AddItemToAllStock(${0:integer stockMax})",
           "description": "fnAddItemToAllStock",
           "scope": "source.vjass"
       },
        "fnAddItemToStock": {
           "prefix": "fnAddItemToStock",
           "body": "AddItemToStock(${0:integer stockMax},${1:unit whichUnit})",
           "description": "fnAddItemToStock",
           "scope": "source.vjass"
       },
        "fnAddUnitToAllStock": {
           "prefix": "fnAddUnitToAllStock",
           "body": "AddUnitToAllStock(${0:integer stockMax})",
           "description": "fnAddUnitToAllStock",
           "scope": "source.vjass"
       },
        "fnAddUnitToStock": {
           "prefix": "fnAddUnitToStock",
           "body": "AddUnitToStock(${0:integer stockMax},${1:unit whichUnit})",
           "description": "fnAddUnitToStock",
           "scope": "source.vjass"
       },
        "fnRemoveItemFromAllStock": {
           "prefix": "fnRemoveItemFromAllStock",
           "body": "RemoveItemFromAllStock(${0:integer itemId})",
           "description": "fnRemoveItemFromAllStock",
           "scope": "source.vjass"
       },
        "fnRemoveItemFromStock": {
           "prefix": "fnRemoveItemFromStock",
           "body": "RemoveItemFromStock(${0:integer itemId},${1:unit whichUnit})",
           "description": "fnRemoveItemFromStock",
           "scope": "source.vjass"
       },
        "fnRemoveUnitFromAllStock": {
           "prefix": "fnRemoveUnitFromAllStock",
           "body": "RemoveUnitFromAllStock(${0:integer unitId})",
           "description": "fnRemoveUnitFromAllStock",
           "scope": "source.vjass"
       },
        "fnRemoveUnitFromStock": {
           "prefix": "fnRemoveUnitFromStock",
           "body": "RemoveUnitFromStock(${0:integer unitId},${1:unit whichUnit})",
           "description": "fnRemoveUnitFromStock",
           "scope": "source.vjass"
       },
        "fnSetAllItemTypeSlots": {
           "prefix": "fnSetAllItemTypeSlots",
           "body": "SetAllItemTypeSlots(${0:integer slots})",
           "description": "fnSetAllItemTypeSlots",
           "scope": "source.vjass"
       },
        "fnSetAllUnitTypeSlots": {
           "prefix": "fnSetAllUnitTypeSlots",
           "body": "SetAllUnitTypeSlots(${0:integer slots})",
           "description": "fnSetAllUnitTypeSlots",
           "scope": "source.vjass"
       },
        "fnSetItemTypeSlots": {
           "prefix": "fnSetItemTypeSlots",
           "body": "SetItemTypeSlots(${0:integer slots},${1:unit whichUnit})",
           "description": "fnSetItemTypeSlots",
           "scope": "source.vjass"
       },
        "fnSetUnitTypeSlots": {
           "prefix": "fnSetUnitTypeSlots",
           "body": "SetUnitTypeSlots(${0:integer slots},${1:unit whichUnit})",
           "description": "fnSetUnitTypeSlots",
           "scope": "source.vjass"
       },
        "fnGetUnitUserData": {
           "prefix": "fnGetUnitUserData",
           "body": "GetUnitUserData(${0:unit whichUnit})",
           "description": "fnGetUnitUserData",
           "scope": "source.vjass"
       },
        "fnSetUnitUserData": {
           "prefix": "fnSetUnitUserData",
           "body": "SetUnitUserData(${0:integer data},${1:unit whichUnit})",
           "description": "fnSetUnitUserData",
           "scope": "source.vjass"
       },
        "fnPlayer": {
           "prefix": "fnPlayer",
           "body": "Player(${0:integer number})",
           "description": "fnPlayer",
           "scope": "source.vjass"
       },
        "fnGetLocalPlayer": {
           "prefix": "fnGetLocalPlayer",
           "body": "GetLocalPlayer(${0:nothing})",
           "description": "fnGetLocalPlayer",
           "scope": "source.vjass"
       },
        "fnIsPlayerAlly": {
           "prefix": "fnIsPlayerAlly",
           "body": "IsPlayerAlly(${0:player otherPlayer})",
           "description": "fnIsPlayerAlly",
           "scope": "source.vjass"
       },
        "fnIsPlayerEnemy": {
           "prefix": "fnIsPlayerEnemy",
           "body": "IsPlayerEnemy(${0:player otherPlayer})",
           "description": "fnIsPlayerEnemy",
           "scope": "source.vjass"
       },
        "fnIsPlayerInForce": {
           "prefix": "fnIsPlayerInForce",
           "body": "IsPlayerInForce(${0:player whichPlayer},${1:force whichForce})",
           "description": "fnIsPlayerInForce",
           "scope": "source.vjass"
       },
        "fnIsPlayerObserver": {
           "prefix": "fnIsPlayerObserver",
           "body": "IsPlayerObserver(${0:player whichPlayer})",
           "description": "fnIsPlayerObserver",
           "scope": "source.vjass"
       },
        "fnIsVisibleToPlayer": {
           "prefix": "fnIsVisibleToPlayer",
           "body": "IsVisibleToPlayer(${0:real y},${1:player whichPlayer})",
           "description": "fnIsVisibleToPlayer",
           "scope": "source.vjass"
       },
        "fnIsLocationVisibleToPlayer": {
           "prefix": "fnIsLocationVisibleToPlayer",
           "body": "IsLocationVisibleToPlayer(${0:player whichPlayer},${1:location whichLocation})",
           "description": "fnIsLocationVisibleToPlayer",
           "scope": "source.vjass"
       },
        "fnIsFoggedToPlayer": {
           "prefix": "fnIsFoggedToPlayer",
           "body": "IsFoggedToPlayer(${0:real y},${1:player whichPlayer})",
           "description": "fnIsFoggedToPlayer",
           "scope": "source.vjass"
       },
        "fnIsLocationFoggedToPlayer": {
           "prefix": "fnIsLocationFoggedToPlayer",
           "body": "IsLocationFoggedToPlayer(${0:player whichPlayer},${1:location whichLocation})",
           "description": "fnIsLocationFoggedToPlayer",
           "scope": "source.vjass"
       },
        "fnIsMaskedToPlayer": {
           "prefix": "fnIsMaskedToPlayer",
           "body": "IsMaskedToPlayer(${0:real y},${1:player whichPlayer})",
           "description": "fnIsMaskedToPlayer",
           "scope": "source.vjass"
       },
        "fnIsLocationMaskedToPlayer": {
           "prefix": "fnIsLocationMaskedToPlayer",
           "body": "IsLocationMaskedToPlayer(${0:player whichPlayer},${1:location whichLocation})",
           "description": "fnIsLocationMaskedToPlayer",
           "scope": "source.vjass"
       },
        "fnGetPlayerRace": {
           "prefix": "fnGetPlayerRace",
           "body": "GetPlayerRace(${0:player whichPlayer})",
           "description": "fnGetPlayerRace",
           "scope": "source.vjass"
       },
        "fnGetPlayerId": {
           "prefix": "fnGetPlayerId",
           "body": "GetPlayerId(${0:player whichPlayer})",
           "description": "fnGetPlayerId",
           "scope": "source.vjass"
       },
        "fnGetPlayerUnitCount": {
           "prefix": "fnGetPlayerUnitCount",
           "body": "GetPlayerUnitCount(${0:player whichPlayer},${1:boolean includeIncomplete})",
           "description": "fnGetPlayerUnitCount",
           "scope": "source.vjass"
       },
        "fnGetPlayerTypedUnitCount": {
           "prefix": "fnGetPlayerTypedUnitCount",
           "body": "GetPlayerTypedUnitCount(${0:player whichPlayer},${1:boolean includeUpgrades},${2:string unitName})",
           "description": "fnGetPlayerTypedUnitCount",
           "scope": "source.vjass"
       },
        "fnGetPlayerStructureCount": {
           "prefix": "fnGetPlayerStructureCount",
           "body": "GetPlayerStructureCount(${0:player whichPlayer},${1:boolean includeIncomplete})",
           "description": "fnGetPlayerStructureCount",
           "scope": "source.vjass"
       },
        "fnGetPlayerState": {
           "prefix": "fnGetPlayerState",
           "body": "GetPlayerState(${0:player whichPlayer},${1:playerstate whichPlayerState})",
           "description": "fnGetPlayerState",
           "scope": "source.vjass"
       },
        "fnGetPlayerScore": {
           "prefix": "fnGetPlayerScore",
           "body": "GetPlayerScore(${0:player whichPlayer},${1:playerscore whichPlayerScore})",
           "description": "fnGetPlayerScore",
           "scope": "source.vjass"
       },
        "fnGetPlayerAlliance": {
           "prefix": "fnGetPlayerAlliance",
           "body": "GetPlayerAlliance(${0:player otherPlayer},${1:alliancetype whichAllianceSetting})",
           "description": "fnGetPlayerAlliance",
           "scope": "source.vjass"
       },
        "fnGetPlayerHandicap": {
           "prefix": "fnGetPlayerHandicap",
           "body": "GetPlayerHandicap(${0:player whichPlayer})",
           "description": "fnGetPlayerHandicap",
           "scope": "source.vjass"
       },
        "fnGetPlayerHandicapXP": {
           "prefix": "fnGetPlayerHandicapXP",
           "body": "GetPlayerHandicapXP(${0:player whichPlayer})",
           "description": "fnGetPlayerHandicapXP",
           "scope": "source.vjass"
       },
        "fnSetPlayerHandicap": {
           "prefix": "fnSetPlayerHandicap",
           "body": "SetPlayerHandicap(${0:real handicap},${1:player whichPlayer})",
           "description": "fnSetPlayerHandicap",
           "scope": "source.vjass"
       },
        "fnSetPlayerHandicapXP": {
           "prefix": "fnSetPlayerHandicapXP",
           "body": "SetPlayerHandicapXP(${0:real handicap},${1:player whichPlayer})",
           "description": "fnSetPlayerHandicapXP",
           "scope": "source.vjass"
       },
        "fnSetPlayerTechMaxAllowed": {
           "prefix": "fnSetPlayerTechMaxAllowed",
           "body": "SetPlayerTechMaxAllowed(${0:player whichPlayer},${1:integer maximum})",
           "description": "fnSetPlayerTechMaxAllowed",
           "scope": "source.vjass"
       },
        "fnGetPlayerTechMaxAllowed": {
           "prefix": "fnGetPlayerTechMaxAllowed",
           "body": "GetPlayerTechMaxAllowed(${0:player whichPlayer},${1:integer techid})",
           "description": "fnGetPlayerTechMaxAllowed",
           "scope": "source.vjass"
       },
        "fnAddPlayerTechResearched": {
           "prefix": "fnAddPlayerTechResearched",
           "body": "AddPlayerTechResearched(${0:player whichPlayer},${1:integer levels})",
           "description": "fnAddPlayerTechResearched",
           "scope": "source.vjass"
       },
        "fnSetPlayerTechResearched": {
           "prefix": "fnSetPlayerTechResearched",
           "body": "SetPlayerTechResearched(${0:player whichPlayer},${1:integer setToLevel})",
           "description": "fnSetPlayerTechResearched",
           "scope": "source.vjass"
       },
        "fnGetPlayerTechResearched": {
           "prefix": "fnGetPlayerTechResearched",
           "body": "GetPlayerTechResearched(${0:player whichPlayer},${1:boolean specificonly},${2:integer techid})",
           "description": "fnGetPlayerTechResearched",
           "scope": "source.vjass"
       },
        "fnGetPlayerTechCount": {
           "prefix": "fnGetPlayerTechCount",
           "body": "GetPlayerTechCount(${0:player whichPlayer},${1:boolean specificonly},${2:integer techid})",
           "description": "fnGetPlayerTechCount",
           "scope": "source.vjass"
       },
        "fnSetPlayerUnitsOwner": {
           "prefix": "fnSetPlayerUnitsOwner",
           "body": "SetPlayerUnitsOwner(${0:player whichPlayer},${1:integer newOwner})",
           "description": "fnSetPlayerUnitsOwner",
           "scope": "source.vjass"
       },
        "fnCripplePlayer": {
           "prefix": "fnCripplePlayer",
           "body": "CripplePlayer(${0:player whichPlayer},${1:boolean flag},${2:force toWhichPlayers})",
           "description": "fnCripplePlayer",
           "scope": "source.vjass"
       },
        "fnSetPlayerAbilityAvailable": {
           "prefix": "fnSetPlayerAbilityAvailable",
           "body": "SetPlayerAbilityAvailable(${0:player whichPlayer},${1:boolean avail},${2:integer abilid})",
           "description": "fnSetPlayerAbilityAvailable",
           "scope": "source.vjass"
       },
        "fnSetPlayerState": {
           "prefix": "fnSetPlayerState",
           "body": "SetPlayerState(${0:player whichPlayer},${1:integer value},${2:playerstate whichPlayerState})",
           "description": "fnSetPlayerState",
           "scope": "source.vjass"
       },
        "fnRemovePlayer": {
           "prefix": "fnRemovePlayer",
           "body": "RemovePlayer(${0:player whichPlayer},${1:playergameresult gameResult})",
           "description": "fnRemovePlayer",
           "scope": "source.vjass"
       },
        "fnCachePlayerHeroData": {
           "prefix": "fnCachePlayerHeroData",
           "body": "CachePlayerHeroData(${0:player whichPlayer})",
           "description": "fnCachePlayerHeroData",
           "scope": "source.vjass"
       },
        "fnSetFogStateRect": {
           "prefix": "fnSetFogStateRect",
           "body": "SetFogStateRect(${0:player forWhichPlayer},${1:boolean useSharedVision},${2:rect where},${3:fogstate whichState})",
           "description": "fnSetFogStateRect",
           "scope": "source.vjass"
       },
        "fnSetFogStateRadius": {
           "prefix": "fnSetFogStateRadius",
           "body": "SetFogStateRadius(${0:real radius},${1:player forWhichPlayer},${2:boolean useSharedVision},${3:fogstate whichState})",
           "description": "fnSetFogStateRadius",
           "scope": "source.vjass"
       },
        "fnSetFogStateRadiusLoc": {
           "prefix": "fnSetFogStateRadiusLoc",
           "body": "SetFogStateRadiusLoc(${0:real radius},${1:player forWhichPlayer},${2:boolean useSharedVision},${3:location center},${4:fogstate whichState})",
           "description": "fnSetFogStateRadiusLoc",
           "scope": "source.vjass"
       },
        "fnFogMaskEnable": {
           "prefix": "fnFogMaskEnable",
           "body": "FogMaskEnable(${0:boolean enable})",
           "description": "fnFogMaskEnable",
           "scope": "source.vjass"
       },
        "fnIsFogMaskEnabled": {
           "prefix": "fnIsFogMaskEnabled",
           "body": "IsFogMaskEnabled(${0:nothing})",
           "description": "fnIsFogMaskEnabled",
           "scope": "source.vjass"
       },
        "fnFogEnable": {
           "prefix": "fnFogEnable",
           "body": "FogEnable(${0:boolean enable})",
           "description": "fnFogEnable",
           "scope": "source.vjass"
       },
        "fnIsFogEnabled": {
           "prefix": "fnIsFogEnabled",
           "body": "IsFogEnabled(${0:nothing})",
           "description": "fnIsFogEnabled",
           "scope": "source.vjass"
       },
        "fnCreateFogModifierRect": {
           "prefix": "fnCreateFogModifierRect",
           "body": "CreateFogModifierRect(${0:player forWhichPlayer},${1:boolean afterUnits},${2:rect where},${3:fogstate whichState})",
           "description": "fnCreateFogModifierRect",
           "scope": "source.vjass"
       },
        "fnCreateFogModifierRadius": {
           "prefix": "fnCreateFogModifierRadius",
           "body": "CreateFogModifierRadius(${0:real radius},${1:player forWhichPlayer},${2:boolean afterUnits},${3:fogstate whichState})",
           "description": "fnCreateFogModifierRadius",
           "scope": "source.vjass"
       },
        "fnCreateFogModifierRadiusLoc": {
           "prefix": "fnCreateFogModifierRadiusLoc",
           "body": "CreateFogModifierRadiusLoc(${0:real radius},${1:player forWhichPlayer},${2:boolean afterUnits},${3:location center},${4:fogstate whichState})",
           "description": "fnCreateFogModifierRadiusLoc",
           "scope": "source.vjass"
       },
        "fnDestroyFogModifier": {
           "prefix": "fnDestroyFogModifier",
           "body": "DestroyFogModifier(${0:fogmodifier whichFogModifier})",
           "description": "fnDestroyFogModifier",
           "scope": "source.vjass"
       },
        "fnFogModifierStart": {
           "prefix": "fnFogModifierStart",
           "body": "FogModifierStart(${0:fogmodifier whichFogModifier})",
           "description": "fnFogModifierStart",
           "scope": "source.vjass"
       },
        "fnFogModifierStop": {
           "prefix": "fnFogModifierStop",
           "body": "FogModifierStop(${0:fogmodifier whichFogModifier})",
           "description": "fnFogModifierStop",
           "scope": "source.vjass"
       },
        "fnVersionGet": {
           "prefix": "fnVersionGet",
           "body": "VersionGet(${0:nothing})",
           "description": "fnVersionGet",
           "scope": "source.vjass"
       },
        "fnVersionCompatible": {
           "prefix": "fnVersionCompatible",
           "body": "VersionCompatible(${0:version whichVersion})",
           "description": "fnVersionCompatible",
           "scope": "source.vjass"
       },
        "fnVersionSupported": {
           "prefix": "fnVersionSupported",
           "body": "VersionSupported(${0:version whichVersion})",
           "description": "fnVersionSupported",
           "scope": "source.vjass"
       },
        "fnEndGame": {
           "prefix": "fnEndGame",
           "body": "EndGame(${0:boolean doScoreScreen})",
           "description": "fnEndGame",
           "scope": "source.vjass"
       },
        "fnChangeLevel": {
           "prefix": "fnChangeLevel",
           "body": "ChangeLevel(${0:boolean doScoreScreen},${1:string newLevel})",
           "description": "fnChangeLevel",
           "scope": "source.vjass"
       },
        "fnRestartGame": {
           "prefix": "fnRestartGame",
           "body": "RestartGame(${0:boolean doScoreScreen})",
           "description": "fnRestartGame",
           "scope": "source.vjass"
       },
        "fnReloadGame": {
           "prefix": "fnReloadGame",
           "body": "ReloadGame(${0:nothing})",
           "description": "fnReloadGame",
           "scope": "source.vjass"
       },
        "fnSetCampaignMenuRace": {
           "prefix": "fnSetCampaignMenuRace",
           "body": "SetCampaignMenuRace(${0:race r})",
           "description": "fnSetCampaignMenuRace",
           "scope": "source.vjass"
       },
        "fnSetCampaignMenuRaceEx": {
           "prefix": "fnSetCampaignMenuRaceEx",
           "body": "SetCampaignMenuRaceEx(${0:integer campaignIndex})",
           "description": "fnSetCampaignMenuRaceEx",
           "scope": "source.vjass"
       },
        "fnForceCampaignSelectScreen": {
           "prefix": "fnForceCampaignSelectScreen",
           "body": "ForceCampaignSelectScreen(${0:nothing})",
           "description": "fnForceCampaignSelectScreen",
           "scope": "source.vjass"
       },
        "fnLoadGame": {
           "prefix": "fnLoadGame",
           "body": "LoadGame(${0:boolean doScoreScreen},${1:string saveFileName})",
           "description": "fnLoadGame",
           "scope": "source.vjass"
       },
        "fnSaveGame": {
           "prefix": "fnSaveGame",
           "body": "SaveGame(${0:string saveFileName})",
           "description": "fnSaveGame",
           "scope": "source.vjass"
       },
        "fnRenameSaveDirectory": {
           "prefix": "fnRenameSaveDirectory",
           "body": "RenameSaveDirectory(${0:string destDirName})",
           "description": "fnRenameSaveDirectory",
           "scope": "source.vjass"
       },
        "fnRemoveSaveDirectory": {
           "prefix": "fnRemoveSaveDirectory",
           "body": "RemoveSaveDirectory(${0:string sourceDirName})",
           "description": "fnRemoveSaveDirectory",
           "scope": "source.vjass"
       },
        "fnCopySaveGame": {
           "prefix": "fnCopySaveGame",
           "body": "CopySaveGame(${0:string destSaveName})",
           "description": "fnCopySaveGame",
           "scope": "source.vjass"
       },
        "fnSaveGameExists": {
           "prefix": "fnSaveGameExists",
           "body": "SaveGameExists(${0:string saveName})",
           "description": "fnSaveGameExists",
           "scope": "source.vjass"
       },
        "fnSyncSelections": {
           "prefix": "fnSyncSelections",
           "body": "SyncSelections(${0:nothing})",
           "description": "fnSyncSelections",
           "scope": "source.vjass"
       },
        "fnSetFloatGameState": {
           "prefix": "fnSetFloatGameState",
           "body": "SetFloatGameState(${0:real value},${1:fgamestate whichFloatGameState})",
           "description": "fnSetFloatGameState",
           "scope": "source.vjass"
       },
        "fnGetFloatGameState": {
           "prefix": "fnGetFloatGameState",
           "body": "GetFloatGameState(${0:fgamestate whichFloatGameState})",
           "description": "fnGetFloatGameState",
           "scope": "source.vjass"
       },
        "fnSetIntegerGameState": {
           "prefix": "fnSetIntegerGameState",
           "body": "SetIntegerGameState(${0:integer value},${1:igamestate whichIntegerGameState})",
           "description": "fnSetIntegerGameState",
           "scope": "source.vjass"
       },
        "fnGetIntegerGameState": {
           "prefix": "fnGetIntegerGameState",
           "body": "GetIntegerGameState(${0:igamestate whichIntegerGameState})",
           "description": "fnGetIntegerGameState",
           "scope": "source.vjass"
       },
        "fnSetTutorialCleared": {
           "prefix": "fnSetTutorialCleared",
           "body": "SetTutorialCleared(${0:boolean cleared})",
           "description": "fnSetTutorialCleared",
           "scope": "source.vjass"
       },
        "fnSetMissionAvailable": {
           "prefix": "fnSetMissionAvailable",
           "body": "SetMissionAvailable(${0:integer missionNumber},${1:boolean available})",
           "description": "fnSetMissionAvailable",
           "scope": "source.vjass"
       },
        "fnSetCampaignAvailable": {
           "prefix": "fnSetCampaignAvailable",
           "body": "SetCampaignAvailable(${0:integer campaignNumber},${1:boolean available})",
           "description": "fnSetCampaignAvailable",
           "scope": "source.vjass"
       },
        "fnSetOpCinematicAvailable": {
           "prefix": "fnSetOpCinematicAvailable",
           "body": "SetOpCinematicAvailable(${0:integer campaignNumber},${1:boolean available})",
           "description": "fnSetOpCinematicAvailable",
           "scope": "source.vjass"
       },
        "fnSetEdCinematicAvailable": {
           "prefix": "fnSetEdCinematicAvailable",
           "body": "SetEdCinematicAvailable(${0:integer campaignNumber},${1:boolean available})",
           "description": "fnSetEdCinematicAvailable",
           "scope": "source.vjass"
       },
        "fnGetDefaultDifficulty": {
           "prefix": "fnGetDefaultDifficulty",
           "body": "GetDefaultDifficulty(${0:nothing})",
           "description": "fnGetDefaultDifficulty",
           "scope": "source.vjass"
       },
        "fnSetDefaultDifficulty": {
           "prefix": "fnSetDefaultDifficulty",
           "body": "SetDefaultDifficulty(${0:gamedifficulty g})",
           "description": "fnSetDefaultDifficulty",
           "scope": "source.vjass"
       },
        "fnSetCustomCampaignButtonVisible": {
           "prefix": "fnSetCustomCampaignButtonVisible",
           "body": "SetCustomCampaignButtonVisible(${0:integer whichButton},${1:boolean visible})",
           "description": "fnSetCustomCampaignButtonVisible",
           "scope": "source.vjass"
       },
        "fnGetCustomCampaignButtonVisible": {
           "prefix": "fnGetCustomCampaignButtonVisible",
           "body": "GetCustomCampaignButtonVisible(${0:integer whichButton})",
           "description": "fnGetCustomCampaignButtonVisible",
           "scope": "source.vjass"
       },
        "fnDoNotSaveReplay": {
           "prefix": "fnDoNotSaveReplay",
           "body": "DoNotSaveReplay(${0:nothing})",
           "description": "fnDoNotSaveReplay",
           "scope": "source.vjass"
       },
        "fnDialogCreate": {
           "prefix": "fnDialogCreate",
           "body": "DialogCreate(${0:nothing})",
           "description": "fnDialogCreate",
           "scope": "source.vjass"
       },
        "fnDialogDestroy": {
           "prefix": "fnDialogDestroy",
           "body": "DialogDestroy(${0:dialog whichDialog})",
           "description": "fnDialogDestroy",
           "scope": "source.vjass"
       },
        "fnDialogClear": {
           "prefix": "fnDialogClear",
           "body": "DialogClear(${0:dialog whichDialog})",
           "description": "fnDialogClear",
           "scope": "source.vjass"
       },
        "fnDialogSetMessage": {
           "prefix": "fnDialogSetMessage",
           "body": "DialogSetMessage(${0:string messageText},${1:dialog whichDialog})",
           "description": "fnDialogSetMessage",
           "scope": "source.vjass"
       },
        "fnDialogAddButton": {
           "prefix": "fnDialogAddButton",
           "body": "DialogAddButton(${0:integer hotkey},${1:string buttonText},${2:dialog whichDialog})",
           "description": "fnDialogAddButton",
           "scope": "source.vjass"
       },
        "fnDialogAddQuitButton": {
           "prefix": "fnDialogAddQuitButton",
           "body": "DialogAddQuitButton(${0:integer hotkey},${1:boolean doScoreScreen},${2:string buttonText},${3:dialog whichDialog})",
           "description": "fnDialogAddQuitButton",
           "scope": "source.vjass"
       },
        "fnDialogDisplay": {
           "prefix": "fnDialogDisplay",
           "body": "DialogDisplay(${0:player whichPlayer},${1:boolean flag},${2:dialog whichDialog})",
           "description": "fnDialogDisplay",
           "scope": "source.vjass"
       },
        "fnReloadGameCachesFromDisk": {
           "prefix": "fnReloadGameCachesFromDisk",
           "body": "ReloadGameCachesFromDisk(${0:nothing})",
           "description": "fnReloadGameCachesFromDisk",
           "scope": "source.vjass"
       },
        "fnInitGameCache": {
           "prefix": "fnInitGameCache",
           "body": "InitGameCache(${0:string campaignFile})",
           "description": "fnInitGameCache",
           "scope": "source.vjass"
       },
        "fnSaveGameCache": {
           "prefix": "fnSaveGameCache",
           "body": "SaveGameCache(${0:gamecache whichCache})",
           "description": "fnSaveGameCache",
           "scope": "source.vjass"
       },
        "fnSyncStoredInteger": {
           "prefix": "fnSyncStoredInteger",
           "body": "SyncStoredInteger(${0:gamecache cache},${1:string key})",
           "description": "fnSyncStoredInteger",
           "scope": "source.vjass"
       },
        "fnSyncStoredReal": {
           "prefix": "fnSyncStoredReal",
           "body": "SyncStoredReal(${0:gamecache cache},${1:string key})",
           "description": "fnSyncStoredReal",
           "scope": "source.vjass"
       },
        "fnSyncStoredBoolean": {
           "prefix": "fnSyncStoredBoolean",
           "body": "SyncStoredBoolean(${0:gamecache cache},${1:string key})",
           "description": "fnSyncStoredBoolean",
           "scope": "source.vjass"
       },
        "fnSyncStoredUnit": {
           "prefix": "fnSyncStoredUnit",
           "body": "SyncStoredUnit(${0:gamecache cache},${1:string key})",
           "description": "fnSyncStoredUnit",
           "scope": "source.vjass"
       },
        "fnSyncStoredString": {
           "prefix": "fnSyncStoredString",
           "body": "SyncStoredString(${0:gamecache cache},${1:string key})",
           "description": "fnSyncStoredString",
           "scope": "source.vjass"
       },
        "fnInitHashtable": {
           "prefix": "fnInitHashtable",
           "body": "InitHashtable(${0:nothing})",
           "description": "fnInitHashtable",
           "scope": "source.vjass"
       },
        "fnLoadBoolean": {
           "prefix": "fnLoadBoolean",
           "body": "LoadBoolean(${0:integer childKey},${1:hashtable table})",
           "description": "fnLoadBoolean",
           "scope": "source.vjass"
       },
        "fnHaveSavedString": {
           "prefix": "fnHaveSavedString",
           "body": "HaveSavedString(${0:integer childKey},${1:hashtable table})",
           "description": "fnHaveSavedString",
           "scope": "source.vjass"
       },
        "fnGetRandomInt": {
           "prefix": "fnGetRandomInt",
           "body": "GetRandomInt(${0:integer highBound})",
           "description": "fnGetRandomInt",
           "scope": "source.vjass"
       },
        "fnGetRandomReal": {
           "prefix": "fnGetRandomReal",
           "body": "GetRandomReal(${0:real highBound})",
           "description": "fnGetRandomReal",
           "scope": "source.vjass"
       },
        "fnCreateUnitPool": {
           "prefix": "fnCreateUnitPool",
           "body": "CreateUnitPool(${0:nothing})",
           "description": "fnCreateUnitPool",
           "scope": "source.vjass"
       },
        "fnDestroyUnitPool": {
           "prefix": "fnDestroyUnitPool",
           "body": "DestroyUnitPool(${0:unitpool whichPool})",
           "description": "fnDestroyUnitPool",
           "scope": "source.vjass"
       },
        "fnUnitPoolAddUnitType": {
           "prefix": "fnUnitPoolAddUnitType",
           "body": "UnitPoolAddUnitType(${0:real weight},${1:integer unitId},${2:unitpool whichPool})",
           "description": "fnUnitPoolAddUnitType",
           "scope": "source.vjass"
       },
        "fnUnitPoolRemoveUnitType": {
           "prefix": "fnUnitPoolRemoveUnitType",
           "body": "UnitPoolRemoveUnitType(${0:integer unitId},${1:unitpool whichPool})",
           "description": "fnUnitPoolRemoveUnitType",
           "scope": "source.vjass"
       },
        "fnPlaceRandomUnit": {
           "prefix": "fnPlaceRandomUnit",
           "body": "PlaceRandomUnit(${0:real facing},${1:player forWhichPlayer},${2:unitpool whichPool})",
           "description": "fnPlaceRandomUnit",
           "scope": "source.vjass"
       },
        "fnCreateItemPool": {
           "prefix": "fnCreateItemPool",
           "body": "CreateItemPool(${0:nothing})",
           "description": "fnCreateItemPool",
           "scope": "source.vjass"
       },
        "fnDestroyItemPool": {
           "prefix": "fnDestroyItemPool",
           "body": "DestroyItemPool(${0:itempool whichItemPool})",
           "description": "fnDestroyItemPool",
           "scope": "source.vjass"
       },
        "fnItemPoolAddItemType": {
           "prefix": "fnItemPoolAddItemType",
           "body": "ItemPoolAddItemType(${0:real weight},${1:integer itemId},${2:itempool whichItemPool})",
           "description": "fnItemPoolAddItemType",
           "scope": "source.vjass"
       },
        "fnItemPoolRemoveItemType": {
           "prefix": "fnItemPoolRemoveItemType",
           "body": "ItemPoolRemoveItemType(${0:integer itemId},${1:itempool whichItemPool})",
           "description": "fnItemPoolRemoveItemType",
           "scope": "source.vjass"
       },
        "fnPlaceRandomItem": {
           "prefix": "fnPlaceRandomItem",
           "body": "PlaceRandomItem(${0:real y},${1:itempool whichItemPool})",
           "description": "fnPlaceRandomItem",
           "scope": "source.vjass"
       },
        "fnChooseRandomCreep": {
           "prefix": "fnChooseRandomCreep",
           "body": "ChooseRandomCreep(${0:integer level})",
           "description": "fnChooseRandomCreep",
           "scope": "source.vjass"
       },
        "fnChooseRandomNPBuilding": {
           "prefix": "fnChooseRandomNPBuilding",
           "body": "ChooseRandomNPBuilding(${0:nothing})",
           "description": "fnChooseRandomNPBuilding",
           "scope": "source.vjass"
       },
        "fnChooseRandomItem": {
           "prefix": "fnChooseRandomItem",
           "body": "ChooseRandomItem(${0:integer level})",
           "description": "fnChooseRandomItem",
           "scope": "source.vjass"
       },
        "fnChooseRandomItemEx": {
           "prefix": "fnChooseRandomItemEx",
           "body": "ChooseRandomItemEx(${0:integer level},${1:itemtype whichType})",
           "description": "fnChooseRandomItemEx",
           "scope": "source.vjass"
       },
        "fnSetRandomSeed": {
           "prefix": "fnSetRandomSeed",
           "body": "SetRandomSeed(${0:integer seed})",
           "description": "fnSetRandomSeed",
           "scope": "source.vjass"
       },
        "fnSetTerrainFog": {
           "prefix": "fnSetTerrainFog",
           "body": "SetTerrainFog(${0:real e})",
           "description": "fnSetTerrainFog",
           "scope": "source.vjass"
       },
        "fnResetTerrainFog": {
           "prefix": "fnResetTerrainFog",
           "body": "ResetTerrainFog(${0:nothing})",
           "description": "fnResetTerrainFog",
           "scope": "source.vjass"
       },
        "fnSetUnitFog": {
           "prefix": "fnSetUnitFog",
           "body": "SetUnitFog(${0:real e})",
           "description": "fnSetUnitFog",
           "scope": "source.vjass"
       },
        "fnSetTerrainFogEx": {
           "prefix": "fnSetTerrainFogEx",
           "body": "SetTerrainFogEx(${0:real blue},${1:integer style})",
           "description": "fnSetTerrainFogEx",
           "scope": "source.vjass"
       },
        "fnDisplayTextToPlayer": {
           "prefix": "fnDisplayTextToPlayer",
           "body": "DisplayTextToPlayer(${0:real y},${1:player toPlayer},${2:string message})",
           "description": "fnDisplayTextToPlayer",
           "scope": "source.vjass"
       },
        "fnDisplayTimedTextToPlayer": {
           "prefix": "fnDisplayTimedTextToPlayer",
           "body": "DisplayTimedTextToPlayer(${0:real duration},${1:player toPlayer},${2:string message})",
           "description": "fnDisplayTimedTextToPlayer",
           "scope": "source.vjass"
       },
        "fnDisplayTimedTextFromPlayer": {
           "prefix": "fnDisplayTimedTextFromPlayer",
           "body": "DisplayTimedTextFromPlayer(${0:real duration},${1:player toPlayer},${2:string message})",
           "description": "fnDisplayTimedTextFromPlayer",
           "scope": "source.vjass"
       },
        "fnClearTextMessages": {
           "prefix": "fnClearTextMessages",
           "body": "ClearTextMessages(${0:nothing})",
           "description": "fnClearTextMessages",
           "scope": "source.vjass"
       },
        "fnSetDayNightModels": {
           "prefix": "fnSetDayNightModels",
           "body": "SetDayNightModels(${0:string unitDNCFile})",
           "description": "fnSetDayNightModels",
           "scope": "source.vjass"
       },
        "fnSetSkyModel": {
           "prefix": "fnSetSkyModel",
           "body": "SetSkyModel(${0:string skyModelFile})",
           "description": "fnSetSkyModel",
           "scope": "source.vjass"
       },
        "fnEnableUserControl": {
           "prefix": "fnEnableUserControl",
           "body": "EnableUserControl(${0:boolean b})",
           "description": "fnEnableUserControl",
           "scope": "source.vjass"
       },
        "fnEnableUserUI": {
           "prefix": "fnEnableUserUI",
           "body": "EnableUserUI(${0:boolean b})",
           "description": "fnEnableUserUI",
           "scope": "source.vjass"
       },
        "fnSuspendTimeOfDay": {
           "prefix": "fnSuspendTimeOfDay",
           "body": "SuspendTimeOfDay(${0:boolean b})",
           "description": "fnSuspendTimeOfDay",
           "scope": "source.vjass"
       },
        "fnSetTimeOfDayScale": {
           "prefix": "fnSetTimeOfDayScale",
           "body": "SetTimeOfDayScale(${0:real r})",
           "description": "fnSetTimeOfDayScale",
           "scope": "source.vjass"
       },
        "fnGetTimeOfDayScale": {
           "prefix": "fnGetTimeOfDayScale",
           "body": "GetTimeOfDayScale(${0:nothing})",
           "description": "fnGetTimeOfDayScale",
           "scope": "source.vjass"
       },
        "fnShowInterface": {
           "prefix": "fnShowInterface",
           "body": "ShowInterface(${0:real fadeDuration},${1:boolean flag})",
           "description": "fnShowInterface",
           "scope": "source.vjass"
       },
        "fnPauseGame": {
           "prefix": "fnPauseGame",
           "body": "PauseGame(${0:boolean flag})",
           "description": "fnPauseGame",
           "scope": "source.vjass"
       },
        "fnUnitAddIndicator": {
           "prefix": "fnUnitAddIndicator",
           "body": "UnitAddIndicator(${0:integer alpha},${1:unit whichUnit})",
           "description": "fnUnitAddIndicator",
           "scope": "source.vjass"
       },
        "fnAddIndicator": {
           "prefix": "fnAddIndicator",
           "body": "AddIndicator(${0:integer alpha},${1:widget whichWidget})",
           "description": "fnAddIndicator",
           "scope": "source.vjass"
       },
        "fnPingMinimap": {
           "prefix": "fnPingMinimap",
           "body": "PingMinimap(${0:real duration})",
           "description": "fnPingMinimap",
           "scope": "source.vjass"
       },
        "fnPingMinimapEx": {
           "prefix": "fnPingMinimapEx",
           "body": "PingMinimapEx(${0:real duration},${1:integer blue},${2:boolean extraEffects})",
           "description": "fnPingMinimapEx",
           "scope": "source.vjass"
       },
        "fnEnableOcclusion": {
           "prefix": "fnEnableOcclusion",
           "body": "EnableOcclusion(${0:boolean flag})",
           "description": "fnEnableOcclusion",
           "scope": "source.vjass"
       },
        "fnSetIntroShotText": {
           "prefix": "fnSetIntroShotText",
           "body": "SetIntroShotText(${0:string introText})",
           "description": "fnSetIntroShotText",
           "scope": "source.vjass"
       },
        "fnSetIntroShotModel": {
           "prefix": "fnSetIntroShotModel",
           "body": "SetIntroShotModel(${0:string introModelPath})",
           "description": "fnSetIntroShotModel",
           "scope": "source.vjass"
       },
        "fnEnableWorldFogBoundary": {
           "prefix": "fnEnableWorldFogBoundary",
           "body": "EnableWorldFogBoundary(${0:boolean b})",
           "description": "fnEnableWorldFogBoundary",
           "scope": "source.vjass"
       },
        "fnPlayModelCinematic": {
           "prefix": "fnPlayModelCinematic",
           "body": "PlayModelCinematic(${0:string modelName})",
           "description": "fnPlayModelCinematic",
           "scope": "source.vjass"
       },
        "fnPlayCinematic": {
           "prefix": "fnPlayCinematic",
           "body": "PlayCinematic(${0:string movieName})",
           "description": "fnPlayCinematic",
           "scope": "source.vjass"
       },
        "fnForceUIKey": {
           "prefix": "fnForceUIKey",
           "body": "ForceUIKey(${0:string key})",
           "description": "fnForceUIKey",
           "scope": "source.vjass"
       },
        "fnForceUICancel": {
           "prefix": "fnForceUICancel",
           "body": "ForceUICancel(${0:nothing})",
           "description": "fnForceUICancel",
           "scope": "source.vjass"
       },
        "fnDisplayLoadDialog": {
           "prefix": "fnDisplayLoadDialog",
           "body": "DisplayLoadDialog(${0:nothing})",
           "description": "fnDisplayLoadDialog",
           "scope": "source.vjass"
       },
        "fnSetAltMinimapIcon": {
           "prefix": "fnSetAltMinimapIcon",
           "body": "SetAltMinimapIcon(${0:string iconPath})",
           "description": "fnSetAltMinimapIcon",
           "scope": "source.vjass"
       },
        "fnDisableRestartMission": {
           "prefix": "fnDisableRestartMission",
           "body": "DisableRestartMission(${0:boolean flag})",
           "description": "fnDisableRestartMission",
           "scope": "source.vjass"
       },
        "fnCreateTextTag": {
           "prefix": "fnCreateTextTag",
           "body": "CreateTextTag(${0:nothing})",
           "description": "fnCreateTextTag",
           "scope": "source.vjass"
       },
        "fnDestroyTextTag": {
           "prefix": "fnDestroyTextTag",
           "body": "DestroyTextTag(${0:texttag t})",
           "description": "fnDestroyTextTag",
           "scope": "source.vjass"
       },
        "fnSetTextTagText": {
           "prefix": "fnSetTextTagText",
           "body": "SetTextTagText(${0:texttag t},${1:real height},${2:string s})",
           "description": "fnSetTextTagText",
           "scope": "source.vjass"
       },
        "fnSetTextTagPos": {
           "prefix": "fnSetTextTagPos",
           "body": "SetTextTagPos(${0:texttag t},${1:real heightOffset})",
           "description": "fnSetTextTagPos",
           "scope": "source.vjass"
       },
        "fnSetTextTagPosUnit": {
           "prefix": "fnSetTextTagPosUnit",
           "body": "SetTextTagPosUnit(${0:texttag t},${1:real heightOffset},${2:unit whichUnit})",
           "description": "fnSetTextTagPosUnit",
           "scope": "source.vjass"
       },
        "fnSetTextTagColor": {
           "prefix": "fnSetTextTagColor",
           "body": "SetTextTagColor(${0:texttag t},${1:integer alpha})",
           "description": "fnSetTextTagColor",
           "scope": "source.vjass"
       },
        "fnSetTextTagVelocity": {
           "prefix": "fnSetTextTagVelocity",
           "body": "SetTextTagVelocity(${0:texttag t},${1:real yvel})",
           "description": "fnSetTextTagVelocity",
           "scope": "source.vjass"
       },
        "fnSetTextTagVisibility": {
           "prefix": "fnSetTextTagVisibility",
           "body": "SetTextTagVisibility(${0:texttag t},${1:boolean flag})",
           "description": "fnSetTextTagVisibility",
           "scope": "source.vjass"
       },
        "fnSetTextTagSuspended": {
           "prefix": "fnSetTextTagSuspended",
           "body": "SetTextTagSuspended(${0:texttag t},${1:boolean flag})",
           "description": "fnSetTextTagSuspended",
           "scope": "source.vjass"
       },
        "fnSetTextTagPermanent": {
           "prefix": "fnSetTextTagPermanent",
           "body": "SetTextTagPermanent(${0:texttag t},${1:boolean flag})",
           "description": "fnSetTextTagPermanent",
           "scope": "source.vjass"
       },
        "fnSetTextTagAge": {
           "prefix": "fnSetTextTagAge",
           "body": "SetTextTagAge(${0:texttag t},${1:real age})",
           "description": "fnSetTextTagAge",
           "scope": "source.vjass"
       },
        "fnSetTextTagLifespan": {
           "prefix": "fnSetTextTagLifespan",
           "body": "SetTextTagLifespan(${0:texttag t},${1:real lifespan})",
           "description": "fnSetTextTagLifespan",
           "scope": "source.vjass"
       },
        "fnSetTextTagFadepoint": {
           "prefix": "fnSetTextTagFadepoint",
           "body": "SetTextTagFadepoint(${0:texttag t},${1:real fadepoint})",
           "description": "fnSetTextTagFadepoint",
           "scope": "source.vjass"
       },
        "fnSetReservedLocalHeroButtons": {
           "prefix": "fnSetReservedLocalHeroButtons",
           "body": "SetReservedLocalHeroButtons(${0:integer reserved})",
           "description": "fnSetReservedLocalHeroButtons",
           "scope": "source.vjass"
       },
        "fnGetAllyColorFilterState": {
           "prefix": "fnGetAllyColorFilterState",
           "body": "GetAllyColorFilterState(${0:nothing})",
           "description": "fnGetAllyColorFilterState",
           "scope": "source.vjass"
       },
        "fnSetAllyColorFilterState": {
           "prefix": "fnSetAllyColorFilterState",
           "body": "SetAllyColorFilterState(${0:integer state})",
           "description": "fnSetAllyColorFilterState",
           "scope": "source.vjass"
       },
        "fnGetCreepCampFilterState": {
           "prefix": "fnGetCreepCampFilterState",
           "body": "GetCreepCampFilterState(${0:nothing})",
           "description": "fnGetCreepCampFilterState",
           "scope": "source.vjass"
       },
        "fnSetCreepCampFilterState": {
           "prefix": "fnSetCreepCampFilterState",
           "body": "SetCreepCampFilterState(${0:boolean state})",
           "description": "fnSetCreepCampFilterState",
           "scope": "source.vjass"
       },
        "fnEnableMinimapFilterButtons": {
           "prefix": "fnEnableMinimapFilterButtons",
           "body": "EnableMinimapFilterButtons(${0:boolean enableCreep})",
           "description": "fnEnableMinimapFilterButtons",
           "scope": "source.vjass"
       },
        "fnEnableDragSelect": {
           "prefix": "fnEnableDragSelect",
           "body": "EnableDragSelect(${0:boolean ui})",
           "description": "fnEnableDragSelect",
           "scope": "source.vjass"
       },
        "fnEnablePreSelect": {
           "prefix": "fnEnablePreSelect",
           "body": "EnablePreSelect(${0:boolean ui})",
           "description": "fnEnablePreSelect",
           "scope": "source.vjass"
       },
        "fnEnableSelect": {
           "prefix": "fnEnableSelect",
           "body": "EnableSelect(${0:boolean ui})",
           "description": "fnEnableSelect",
           "scope": "source.vjass"
       },
        "fnCreateTrackable": {
           "prefix": "fnCreateTrackable",
           "body": "CreateTrackable(${0:real facing},${1:string trackableModelPath})",
           "description": "fnCreateTrackable",
           "scope": "source.vjass"
       },
        "fnCreateQuest": {
           "prefix": "fnCreateQuest",
           "body": "CreateQuest(${0:nothing})",
           "description": "fnCreateQuest",
           "scope": "source.vjass"
       },
        "fnDestroyQuest": {
           "prefix": "fnDestroyQuest",
           "body": "DestroyQuest(${0:quest whichQuest})",
           "description": "fnDestroyQuest",
           "scope": "source.vjass"
       },
        "fnQuestSetTitle": {
           "prefix": "fnQuestSetTitle",
           "body": "QuestSetTitle(${0:quest whichQuest},${1:string title})",
           "description": "fnQuestSetTitle",
           "scope": "source.vjass"
       },
        "fnQuestSetDescription": {
           "prefix": "fnQuestSetDescription",
           "body": "QuestSetDescription(${0:quest whichQuest},${1:string description})",
           "description": "fnQuestSetDescription",
           "scope": "source.vjass"
       },
        "fnQuestSetIconPath": {
           "prefix": "fnQuestSetIconPath",
           "body": "QuestSetIconPath(${0:quest whichQuest},${1:string iconPath})",
           "description": "fnQuestSetIconPath",
           "scope": "source.vjass"
       },
        "fnQuestSetRequired": {
           "prefix": "fnQuestSetRequired",
           "body": "QuestSetRequired(${0:boolean required},${1:quest whichQuest})",
           "description": "fnQuestSetRequired",
           "scope": "source.vjass"
       },
        "fnQuestSetCompleted": {
           "prefix": "fnQuestSetCompleted",
           "body": "QuestSetCompleted(${0:boolean completed},${1:quest whichQuest})",
           "description": "fnQuestSetCompleted",
           "scope": "source.vjass"
       },
        "fnQuestSetDiscovered": {
           "prefix": "fnQuestSetDiscovered",
           "body": "QuestSetDiscovered(${0:boolean discovered},${1:quest whichQuest})",
           "description": "fnQuestSetDiscovered",
           "scope": "source.vjass"
       },
        "fnQuestSetFailed": {
           "prefix": "fnQuestSetFailed",
           "body": "QuestSetFailed(${0:boolean failed},${1:quest whichQuest})",
           "description": "fnQuestSetFailed",
           "scope": "source.vjass"
       },
        "fnQuestSetEnabled": {
           "prefix": "fnQuestSetEnabled",
           "body": "QuestSetEnabled(${0:boolean enabled},${1:quest whichQuest})",
           "description": "fnQuestSetEnabled",
           "scope": "source.vjass"
       },
        "fnIsQuestRequired": {
           "prefix": "fnIsQuestRequired",
           "body": "IsQuestRequired(${0:quest whichQuest})",
           "description": "fnIsQuestRequired",
           "scope": "source.vjass"
       },
        "fnIsQuestCompleted": {
           "prefix": "fnIsQuestCompleted",
           "body": "IsQuestCompleted(${0:quest whichQuest})",
           "description": "fnIsQuestCompleted",
           "scope": "source.vjass"
       },
        "fnIsQuestDiscovered": {
           "prefix": "fnIsQuestDiscovered",
           "body": "IsQuestDiscovered(${0:quest whichQuest})",
           "description": "fnIsQuestDiscovered",
           "scope": "source.vjass"
       },
        "fnIsQuestFailed": {
           "prefix": "fnIsQuestFailed",
           "body": "IsQuestFailed(${0:quest whichQuest})",
           "description": "fnIsQuestFailed",
           "scope": "source.vjass"
       },
        "fnIsQuestEnabled": {
           "prefix": "fnIsQuestEnabled",
           "body": "IsQuestEnabled(${0:quest whichQuest})",
           "description": "fnIsQuestEnabled",
           "scope": "source.vjass"
       },
        "fnQuestCreateItem": {
           "prefix": "fnQuestCreateItem",
           "body": "QuestCreateItem(${0:quest whichQuest})",
           "description": "fnQuestCreateItem",
           "scope": "source.vjass"
       },
        "fnQuestItemSetDescription": {
           "prefix": "fnQuestItemSetDescription",
           "body": "QuestItemSetDescription(${0:questitem whichQuestItem},${1:string description})",
           "description": "fnQuestItemSetDescription",
           "scope": "source.vjass"
       },
        "fnQuestItemSetCompleted": {
           "prefix": "fnQuestItemSetCompleted",
           "body": "QuestItemSetCompleted(${0:questitem whichQuestItem},${1:boolean completed})",
           "description": "fnQuestItemSetCompleted",
           "scope": "source.vjass"
       },
        "fnIsQuestItemCompleted": {
           "prefix": "fnIsQuestItemCompleted",
           "body": "IsQuestItemCompleted(${0:questitem whichQuestItem})",
           "description": "fnIsQuestItemCompleted",
           "scope": "source.vjass"
       },
        "fnCreateDefeatCondition": {
           "prefix": "fnCreateDefeatCondition",
           "body": "CreateDefeatCondition(${0:nothing})",
           "description": "fnCreateDefeatCondition",
           "scope": "source.vjass"
       },
        "fnDestroyDefeatCondition": {
           "prefix": "fnDestroyDefeatCondition",
           "body": "DestroyDefeatCondition(${0:defeatcondition whichCondition})",
           "description": "fnDestroyDefeatCondition",
           "scope": "source.vjass"
       },
        "fnDefeatConditionSetDescription": {
           "prefix": "fnDefeatConditionSetDescription",
           "body": "DefeatConditionSetDescription(${0:defeatcondition whichCondition},${1:string description})",
           "description": "fnDefeatConditionSetDescription",
           "scope": "source.vjass"
       },
        "fnFlashQuestDialogButton": {
           "prefix": "fnFlashQuestDialogButton",
           "body": "FlashQuestDialogButton(${0:nothing})",
           "description": "fnFlashQuestDialogButton",
           "scope": "source.vjass"
       },
        "fnForceQuestDialogUpdate": {
           "prefix": "fnForceQuestDialogUpdate",
           "body": "ForceQuestDialogUpdate(${0:nothing})",
           "description": "fnForceQuestDialogUpdate",
           "scope": "source.vjass"
       },
        "fnCreateTimerDialog": {
           "prefix": "fnCreateTimerDialog",
           "body": "CreateTimerDialog(${0:timer t})",
           "description": "fnCreateTimerDialog",
           "scope": "source.vjass"
       },
        "fnDestroyTimerDialog": {
           "prefix": "fnDestroyTimerDialog",
           "body": "DestroyTimerDialog(${0:timerdialog whichDialog})",
           "description": "fnDestroyTimerDialog",
           "scope": "source.vjass"
       },
        "fnTimerDialogSetTitle": {
           "prefix": "fnTimerDialogSetTitle",
           "body": "TimerDialogSetTitle(${0:timerdialog whichDialog},${1:string title})",
           "description": "fnTimerDialogSetTitle",
           "scope": "source.vjass"
       },
        "fnTimerDialogSetTitleColor": {
           "prefix": "fnTimerDialogSetTitleColor",
           "body": "TimerDialogSetTitleColor(${0:integer alpha},${1:timerdialog whichDialog})",
           "description": "fnTimerDialogSetTitleColor",
           "scope": "source.vjass"
       },
        "fnTimerDialogSetTimeColor": {
           "prefix": "fnTimerDialogSetTimeColor",
           "body": "TimerDialogSetTimeColor(${0:integer alpha},${1:timerdialog whichDialog})",
           "description": "fnTimerDialogSetTimeColor",
           "scope": "source.vjass"
       },
        "fnTimerDialogSetSpeed": {
           "prefix": "fnTimerDialogSetSpeed",
           "body": "TimerDialogSetSpeed(${0:real speedMultFactor},${1:timerdialog whichDialog})",
           "description": "fnTimerDialogSetSpeed",
           "scope": "source.vjass"
       },
        "fnTimerDialogDisplay": {
           "prefix": "fnTimerDialogDisplay",
           "body": "TimerDialogDisplay(${0:boolean display},${1:timerdialog whichDialog})",
           "description": "fnTimerDialogDisplay",
           "scope": "source.vjass"
       },
        "fnIsTimerDialogDisplayed": {
           "prefix": "fnIsTimerDialogDisplayed",
           "body": "IsTimerDialogDisplayed(${0:timerdialog whichDialog})",
           "description": "fnIsTimerDialogDisplayed",
           "scope": "source.vjass"
       },
        "fnTimerDialogSetRealTimeRemaining": {
           "prefix": "fnTimerDialogSetRealTimeRemaining",
           "body": "TimerDialogSetRealTimeRemaining(${0:real timeRemaining},${1:timerdialog whichDialog})",
           "description": "fnTimerDialogSetRealTimeRemaining",
           "scope": "source.vjass"
       },
        "fnCreateLeaderboard": {
           "prefix": "fnCreateLeaderboard",
           "body": "CreateLeaderboard(${0:nothing})",
           "description": "fnCreateLeaderboard",
           "scope": "source.vjass"
       },
        "fnDestroyLeaderboard": {
           "prefix": "fnDestroyLeaderboard",
           "body": "DestroyLeaderboard(${0:leaderboard lb})",
           "description": "fnDestroyLeaderboard",
           "scope": "source.vjass"
       },
        "fnLeaderboardDisplay": {
           "prefix": "fnLeaderboardDisplay",
           "body": "LeaderboardDisplay(${0:boolean show},${1:leaderboard lb})",
           "description": "fnLeaderboardDisplay",
           "scope": "source.vjass"
       },
        "fnIsLeaderboardDisplayed": {
           "prefix": "fnIsLeaderboardDisplayed",
           "body": "IsLeaderboardDisplayed(${0:leaderboard lb})",
           "description": "fnIsLeaderboardDisplayed",
           "scope": "source.vjass"
       },
        "fnLeaderboardGetItemCount": {
           "prefix": "fnLeaderboardGetItemCount",
           "body": "LeaderboardGetItemCount(${0:leaderboard lb})",
           "description": "fnLeaderboardGetItemCount",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetSizeByItemCount": {
           "prefix": "fnLeaderboardSetSizeByItemCount",
           "body": "LeaderboardSetSizeByItemCount(${0:integer count},${1:leaderboard lb})",
           "description": "fnLeaderboardSetSizeByItemCount",
           "scope": "source.vjass"
       },
        "fnLeaderboardAddItem": {
           "prefix": "fnLeaderboardAddItem",
           "body": "LeaderboardAddItem(${0:integer value},${1:string label},${2:leaderboard lb},${3:player p})",
           "description": "fnLeaderboardAddItem",
           "scope": "source.vjass"
       },
        "fnLeaderboardRemoveItem": {
           "prefix": "fnLeaderboardRemoveItem",
           "body": "LeaderboardRemoveItem(${0:integer index},${1:leaderboard lb})",
           "description": "fnLeaderboardRemoveItem",
           "scope": "source.vjass"
       },
        "fnLeaderboardRemovePlayerItem": {
           "prefix": "fnLeaderboardRemovePlayerItem",
           "body": "LeaderboardRemovePlayerItem(${0:player p},${1:leaderboard lb})",
           "description": "fnLeaderboardRemovePlayerItem",
           "scope": "source.vjass"
       },
        "fnLeaderboardClear": {
           "prefix": "fnLeaderboardClear",
           "body": "LeaderboardClear(${0:leaderboard lb})",
           "description": "fnLeaderboardClear",
           "scope": "source.vjass"
       },
        "fnLeaderboardSortItemsByValue": {
           "prefix": "fnLeaderboardSortItemsByValue",
           "body": "LeaderboardSortItemsByValue(${0:boolean ascending},${1:leaderboard lb})",
           "description": "fnLeaderboardSortItemsByValue",
           "scope": "source.vjass"
       },
        "fnLeaderboardSortItemsByPlayer": {
           "prefix": "fnLeaderboardSortItemsByPlayer",
           "body": "LeaderboardSortItemsByPlayer(${0:boolean ascending},${1:leaderboard lb})",
           "description": "fnLeaderboardSortItemsByPlayer",
           "scope": "source.vjass"
       },
        "fnLeaderboardSortItemsByLabel": {
           "prefix": "fnLeaderboardSortItemsByLabel",
           "body": "LeaderboardSortItemsByLabel(${0:boolean ascending},${1:leaderboard lb})",
           "description": "fnLeaderboardSortItemsByLabel",
           "scope": "source.vjass"
       },
        "fnLeaderboardHasPlayerItem": {
           "prefix": "fnLeaderboardHasPlayerItem",
           "body": "LeaderboardHasPlayerItem(${0:player p},${1:leaderboard lb})",
           "description": "fnLeaderboardHasPlayerItem",
           "scope": "source.vjass"
       },
        "fnLeaderboardGetPlayerIndex": {
           "prefix": "fnLeaderboardGetPlayerIndex",
           "body": "LeaderboardGetPlayerIndex(${0:player p},${1:leaderboard lb})",
           "description": "fnLeaderboardGetPlayerIndex",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetLabel": {
           "prefix": "fnLeaderboardSetLabel",
           "body": "LeaderboardSetLabel(${0:string label},${1:leaderboard lb})",
           "description": "fnLeaderboardSetLabel",
           "scope": "source.vjass"
       },
        "fnLeaderboardGetLabelText": {
           "prefix": "fnLeaderboardGetLabelText",
           "body": "LeaderboardGetLabelText(${0:leaderboard lb})",
           "description": "fnLeaderboardGetLabelText",
           "scope": "source.vjass"
       },
        "fnPlayerSetLeaderboard": {
           "prefix": "fnPlayerSetLeaderboard",
           "body": "PlayerSetLeaderboard(${0:player toPlayer},${1:leaderboard lb})",
           "description": "fnPlayerSetLeaderboard",
           "scope": "source.vjass"
       },
        "fnPlayerGetLeaderboard": {
           "prefix": "fnPlayerGetLeaderboard",
           "body": "PlayerGetLeaderboard(${0:player toPlayer})",
           "description": "fnPlayerGetLeaderboard",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetLabelColor": {
           "prefix": "fnLeaderboardSetLabelColor",
           "body": "LeaderboardSetLabelColor(${0:integer alpha},${1:leaderboard lb})",
           "description": "fnLeaderboardSetLabelColor",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetValueColor": {
           "prefix": "fnLeaderboardSetValueColor",
           "body": "LeaderboardSetValueColor(${0:integer alpha},${1:leaderboard lb})",
           "description": "fnLeaderboardSetValueColor",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetStyle": {
           "prefix": "fnLeaderboardSetStyle",
           "body": "LeaderboardSetStyle(${0:boolean showIcons},${1:leaderboard lb})",
           "description": "fnLeaderboardSetStyle",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetItemValue": {
           "prefix": "fnLeaderboardSetItemValue",
           "body": "LeaderboardSetItemValue(${0:integer val},${1:leaderboard lb})",
           "description": "fnLeaderboardSetItemValue",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetItemLabel": {
           "prefix": "fnLeaderboardSetItemLabel",
           "body": "LeaderboardSetItemLabel(${0:integer whichItem},${1:string val},${2:leaderboard lb})",
           "description": "fnLeaderboardSetItemLabel",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetItemStyle": {
           "prefix": "fnLeaderboardSetItemStyle",
           "body": "LeaderboardSetItemStyle(${0:integer whichItem},${1:boolean showIcon},${2:leaderboard lb})",
           "description": "fnLeaderboardSetItemStyle",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetItemLabelColor": {
           "prefix": "fnLeaderboardSetItemLabelColor",
           "body": "LeaderboardSetItemLabelColor(${0:integer alpha},${1:leaderboard lb})",
           "description": "fnLeaderboardSetItemLabelColor",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetItemValueColor": {
           "prefix": "fnLeaderboardSetItemValueColor",
           "body": "LeaderboardSetItemValueColor(${0:integer alpha},${1:leaderboard lb})",
           "description": "fnLeaderboardSetItemValueColor",
           "scope": "source.vjass"
       },
        "fnCreateMultiboard": {
           "prefix": "fnCreateMultiboard",
           "body": "CreateMultiboard(${0:nothing})",
           "description": "fnCreateMultiboard",
           "scope": "source.vjass"
       },
        "fnDestroyMultiboard": {
           "prefix": "fnDestroyMultiboard",
           "body": "DestroyMultiboard(${0:multiboard lb})",
           "description": "fnDestroyMultiboard",
           "scope": "source.vjass"
       },
        "fnMultiboardDisplay": {
           "prefix": "fnMultiboardDisplay",
           "body": "MultiboardDisplay(${0:boolean show},${1:multiboard lb})",
           "description": "fnMultiboardDisplay",
           "scope": "source.vjass"
       },
        "fnIsMultiboardDisplayed": {
           "prefix": "fnIsMultiboardDisplayed",
           "body": "IsMultiboardDisplayed(${0:multiboard lb})",
           "description": "fnIsMultiboardDisplayed",
           "scope": "source.vjass"
       },
        "fnMultiboardMinimize": {
           "prefix": "fnMultiboardMinimize",
           "body": "MultiboardMinimize(${0:boolean minimize},${1:multiboard lb})",
           "description": "fnMultiboardMinimize",
           "scope": "source.vjass"
       },
        "fnIsMultiboardMinimized": {
           "prefix": "fnIsMultiboardMinimized",
           "body": "IsMultiboardMinimized(${0:multiboard lb})",
           "description": "fnIsMultiboardMinimized",
           "scope": "source.vjass"
       },
        "fnMultiboardClear": {
           "prefix": "fnMultiboardClear",
           "body": "MultiboardClear(${0:multiboard lb})",
           "description": "fnMultiboardClear",
           "scope": "source.vjass"
       },
        "fnMultiboardSetTitleText": {
           "prefix": "fnMultiboardSetTitleText",
           "body": "MultiboardSetTitleText(${0:multiboard lb},${1:string label})",
           "description": "fnMultiboardSetTitleText",
           "scope": "source.vjass"
       },
        "fnMultiboardGetTitleText": {
           "prefix": "fnMultiboardGetTitleText",
           "body": "MultiboardGetTitleText(${0:multiboard lb})",
           "description": "fnMultiboardGetTitleText",
           "scope": "source.vjass"
       },
        "fnMultiboardSetTitleTextColor": {
           "prefix": "fnMultiboardSetTitleTextColor",
           "body": "MultiboardSetTitleTextColor(${0:integer alpha},${1:multiboard lb})",
           "description": "fnMultiboardSetTitleTextColor",
           "scope": "source.vjass"
       },
        "fnMultiboardGetRowCount": {
           "prefix": "fnMultiboardGetRowCount",
           "body": "MultiboardGetRowCount(${0:multiboard lb})",
           "description": "fnMultiboardGetRowCount",
           "scope": "source.vjass"
       },
        "fnMultiboardGetColumnCount": {
           "prefix": "fnMultiboardGetColumnCount",
           "body": "MultiboardGetColumnCount(${0:multiboard lb})",
           "description": "fnMultiboardGetColumnCount",
           "scope": "source.vjass"
       },
        "fnMultiboardSetColumnCount": {
           "prefix": "fnMultiboardSetColumnCount",
           "body": "MultiboardSetColumnCount(${0:integer count},${1:multiboard lb})",
           "description": "fnMultiboardSetColumnCount",
           "scope": "source.vjass"
       },
        "fnMultiboardSetRowCount": {
           "prefix": "fnMultiboardSetRowCount",
           "body": "MultiboardSetRowCount(${0:integer count},${1:multiboard lb})",
           "description": "fnMultiboardSetRowCount",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemsStyle": {
           "prefix": "fnMultiboardSetItemsStyle",
           "body": "MultiboardSetItemsStyle(${0:boolean showIcons},${1:multiboard lb})",
           "description": "fnMultiboardSetItemsStyle",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemsValue": {
           "prefix": "fnMultiboardSetItemsValue",
           "body": "MultiboardSetItemsValue(${0:multiboard lb},${1:string value})",
           "description": "fnMultiboardSetItemsValue",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemsValueColor": {
           "prefix": "fnMultiboardSetItemsValueColor",
           "body": "MultiboardSetItemsValueColor(${0:integer alpha},${1:multiboard lb})",
           "description": "fnMultiboardSetItemsValueColor",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemsWidth": {
           "prefix": "fnMultiboardSetItemsWidth",
           "body": "MultiboardSetItemsWidth(${0:real width},${1:multiboard lb})",
           "description": "fnMultiboardSetItemsWidth",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemsIcon": {
           "prefix": "fnMultiboardSetItemsIcon",
           "body": "MultiboardSetItemsIcon(${0:multiboard lb},${1:string iconPath})",
           "description": "fnMultiboardSetItemsIcon",
           "scope": "source.vjass"
       },
        "fnMultiboardGetItem": {
           "prefix": "fnMultiboardGetItem",
           "body": "MultiboardGetItem(${0:integer column},${1:multiboard lb})",
           "description": "fnMultiboardGetItem",
           "scope": "source.vjass"
       },
        "fnMultiboardReleaseItem": {
           "prefix": "fnMultiboardReleaseItem",
           "body": "MultiboardReleaseItem(${0:multiboarditem mbi})",
           "description": "fnMultiboardReleaseItem",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemStyle": {
           "prefix": "fnMultiboardSetItemStyle",
           "body": "MultiboardSetItemStyle(${0:multiboarditem mbi},${1:boolean showIcon})",
           "description": "fnMultiboardSetItemStyle",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemValue": {
           "prefix": "fnMultiboardSetItemValue",
           "body": "MultiboardSetItemValue(${0:multiboarditem mbi},${1:string val})",
           "description": "fnMultiboardSetItemValue",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemValueColor": {
           "prefix": "fnMultiboardSetItemValueColor",
           "body": "MultiboardSetItemValueColor(${0:integer alpha},${1:multiboarditem mbi})",
           "description": "fnMultiboardSetItemValueColor",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemWidth": {
           "prefix": "fnMultiboardSetItemWidth",
           "body": "MultiboardSetItemWidth(${0:real width},${1:multiboarditem mbi})",
           "description": "fnMultiboardSetItemWidth",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemIcon": {
           "prefix": "fnMultiboardSetItemIcon",
           "body": "MultiboardSetItemIcon(${0:multiboarditem mbi},${1:string iconFileName})",
           "description": "fnMultiboardSetItemIcon",
           "scope": "source.vjass"
       },
        "fnMultiboardSuppressDisplay": {
           "prefix": "fnMultiboardSuppressDisplay",
           "body": "MultiboardSuppressDisplay(${0:boolean flag})",
           "description": "fnMultiboardSuppressDisplay",
           "scope": "source.vjass"
       },
        "fnSetCameraPosition": {
           "prefix": "fnSetCameraPosition",
           "body": "SetCameraPosition(${0:real y})",
           "description": "fnSetCameraPosition",
           "scope": "source.vjass"
       },
        "fnSetCameraQuickPosition": {
           "prefix": "fnSetCameraQuickPosition",
           "body": "SetCameraQuickPosition(${0:real y})",
           "description": "fnSetCameraQuickPosition",
           "scope": "source.vjass"
       },
        "fnSetCameraBounds": {
           "prefix": "fnSetCameraBounds",
           "body": "SetCameraBounds(${0:real y4})",
           "description": "fnSetCameraBounds",
           "scope": "source.vjass"
       },
        "fnStopCamera": {
           "prefix": "fnStopCamera",
           "body": "StopCamera(${0:nothing})",
           "description": "fnStopCamera",
           "scope": "source.vjass"
       },
        "fnResetToGameCamera": {
           "prefix": "fnResetToGameCamera",
           "body": "ResetToGameCamera(${0:real duration})",
           "description": "fnResetToGameCamera",
           "scope": "source.vjass"
       },
        "fnPanCameraTo": {
           "prefix": "fnPanCameraTo",
           "body": "PanCameraTo(${0:real y})",
           "description": "fnPanCameraTo",
           "scope": "source.vjass"
       },
        "fnPanCameraToTimed": {
           "prefix": "fnPanCameraToTimed",
           "body": "PanCameraToTimed(${0:real duration})",
           "description": "fnPanCameraToTimed",
           "scope": "source.vjass"
       },
        "fnPanCameraToWithZ": {
           "prefix": "fnPanCameraToWithZ",
           "body": "PanCameraToWithZ(${0:real zOffsetDest})",
           "description": "fnPanCameraToWithZ",
           "scope": "source.vjass"
       },
        "fnPanCameraToTimedWithZ": {
           "prefix": "fnPanCameraToTimedWithZ",
           "body": "PanCameraToTimedWithZ(${0:real duration})",
           "description": "fnPanCameraToTimedWithZ",
           "scope": "source.vjass"
       },
        "fnSetCinematicCamera": {
           "prefix": "fnSetCinematicCamera",
           "body": "SetCinematicCamera(${0:string cameraModelFile})",
           "description": "fnSetCinematicCamera",
           "scope": "source.vjass"
       },
        "fnSetCameraRotateMode": {
           "prefix": "fnSetCameraRotateMode",
           "body": "SetCameraRotateMode(${0:real duration})",
           "description": "fnSetCameraRotateMode",
           "scope": "source.vjass"
       },
        "fnSetCameraField": {
           "prefix": "fnSetCameraField",
           "body": "SetCameraField(${0:camerafield whichField},${1:real duration})",
           "description": "fnSetCameraField",
           "scope": "source.vjass"
       },
        "fnAdjustCameraField": {
           "prefix": "fnAdjustCameraField",
           "body": "AdjustCameraField(${0:camerafield whichField},${1:real duration})",
           "description": "fnAdjustCameraField",
           "scope": "source.vjass"
       },
        "fnSetCameraTargetController": {
           "prefix": "fnSetCameraTargetController",
           "body": "SetCameraTargetController(${0:real yoffset},${1:boolean inheritOrientation},${2:unit whichUnit})",
           "description": "fnSetCameraTargetController",
           "scope": "source.vjass"
       },
        "fnSetCameraOrientController": {
           "prefix": "fnSetCameraOrientController",
           "body": "SetCameraOrientController(${0:real yoffset},${1:unit whichUnit})",
           "description": "fnSetCameraOrientController",
           "scope": "source.vjass"
       },
        "fnCreateCameraSetup": {
           "prefix": "fnCreateCameraSetup",
           "body": "CreateCameraSetup(${0:nothing})",
           "description": "fnCreateCameraSetup",
           "scope": "source.vjass"
       },
        "fnCameraSetupSetField": {
           "prefix": "fnCameraSetupSetField",
           "body": "CameraSetupSetField(${0:camerafield whichField},${1:real duration},${2:camerasetup whichSetup})",
           "description": "fnCameraSetupSetField",
           "scope": "source.vjass"
       },
        "fnCameraSetupGetField": {
           "prefix": "fnCameraSetupGetField",
           "body": "CameraSetupGetField(${0:camerafield whichField},${1:camerasetup whichSetup})",
           "description": "fnCameraSetupGetField",
           "scope": "source.vjass"
       },
        "fnCameraSetupSetDestPosition": {
           "prefix": "fnCameraSetupSetDestPosition",
           "body": "CameraSetupSetDestPosition(${0:real duration},${1:camerasetup whichSetup})",
           "description": "fnCameraSetupSetDestPosition",
           "scope": "source.vjass"
       },
        "fnCameraSetupGetDestPositionLoc": {
           "prefix": "fnCameraSetupGetDestPositionLoc",
           "body": "CameraSetupGetDestPositionLoc(${0:camerasetup whichSetup})",
           "description": "fnCameraSetupGetDestPositionLoc",
           "scope": "source.vjass"
       },
        "fnCameraSetupGetDestPositionX": {
           "prefix": "fnCameraSetupGetDestPositionX",
           "body": "CameraSetupGetDestPositionX(${0:camerasetup whichSetup})",
           "description": "fnCameraSetupGetDestPositionX",
           "scope": "source.vjass"
       },
        "fnCameraSetupGetDestPositionY": {
           "prefix": "fnCameraSetupGetDestPositionY",
           "body": "CameraSetupGetDestPositionY(${0:camerasetup whichSetup})",
           "description": "fnCameraSetupGetDestPositionY",
           "scope": "source.vjass"
       },
        "fnCameraSetupApply": {
           "prefix": "fnCameraSetupApply",
           "body": "CameraSetupApply(${0:boolean panTimed},${1:camerasetup whichSetup})",
           "description": "fnCameraSetupApply",
           "scope": "source.vjass"
       },
        "fnCameraSetupApplyWithZ": {
           "prefix": "fnCameraSetupApplyWithZ",
           "body": "CameraSetupApplyWithZ(${0:real zDestOffset},${1:camerasetup whichSetup})",
           "description": "fnCameraSetupApplyWithZ",
           "scope": "source.vjass"
       },
        "fnCameraSetupApplyForceDuration": {
           "prefix": "fnCameraSetupApplyForceDuration",
           "body": "CameraSetupApplyForceDuration(${0:boolean doPan},${1:real forceDuration},${2:camerasetup whichSetup})",
           "description": "fnCameraSetupApplyForceDuration",
           "scope": "source.vjass"
       },
        "fnCameraSetupApplyForceDurationWithZ": {
           "prefix": "fnCameraSetupApplyForceDurationWithZ",
           "body": "CameraSetupApplyForceDurationWithZ(${0:real forceDuration},${1:camerasetup whichSetup})",
           "description": "fnCameraSetupApplyForceDurationWithZ",
           "scope": "source.vjass"
       },
        "fnCameraSetTargetNoise": {
           "prefix": "fnCameraSetTargetNoise",
           "body": "CameraSetTargetNoise(${0:real velocity})",
           "description": "fnCameraSetTargetNoise",
           "scope": "source.vjass"
       },
        "fnCameraSetSourceNoise": {
           "prefix": "fnCameraSetSourceNoise",
           "body": "CameraSetSourceNoise(${0:real velocity})",
           "description": "fnCameraSetSourceNoise",
           "scope": "source.vjass"
       },
        "fnCameraSetTargetNoiseEx": {
           "prefix": "fnCameraSetTargetNoiseEx",
           "body": "CameraSetTargetNoiseEx(${0:real velocity},${1:boolean vertOnly})",
           "description": "fnCameraSetTargetNoiseEx",
           "scope": "source.vjass"
       },
        "fnCameraSetSourceNoiseEx": {
           "prefix": "fnCameraSetSourceNoiseEx",
           "body": "CameraSetSourceNoiseEx(${0:real velocity},${1:boolean vertOnly})",
           "description": "fnCameraSetSourceNoiseEx",
           "scope": "source.vjass"
       },
        "fnCameraSetSmoothingFactor": {
           "prefix": "fnCameraSetSmoothingFactor",
           "body": "CameraSetSmoothingFactor(${0:real factor})",
           "description": "fnCameraSetSmoothingFactor",
           "scope": "source.vjass"
       },
        "fnSetCineFilterTexture": {
           "prefix": "fnSetCineFilterTexture",
           "body": "SetCineFilterTexture(${0:string filename})",
           "description": "fnSetCineFilterTexture",
           "scope": "source.vjass"
       },
        "fnSetCineFilterBlendMode": {
           "prefix": "fnSetCineFilterBlendMode",
           "body": "SetCineFilterBlendMode(${0:blendmode whichMode})",
           "description": "fnSetCineFilterBlendMode",
           "scope": "source.vjass"
       },
        "fnSetCineFilterTexMapFlags": {
           "prefix": "fnSetCineFilterTexMapFlags",
           "body": "SetCineFilterTexMapFlags(${0:texmapflags whichFlags})",
           "description": "fnSetCineFilterTexMapFlags",
           "scope": "source.vjass"
       },
        "fnSetCineFilterStartUV": {
           "prefix": "fnSetCineFilterStartUV",
           "body": "SetCineFilterStartUV(${0:real maxv})",
           "description": "fnSetCineFilterStartUV",
           "scope": "source.vjass"
       },
        "fnSetCineFilterEndUV": {
           "prefix": "fnSetCineFilterEndUV",
           "body": "SetCineFilterEndUV(${0:real maxv})",
           "description": "fnSetCineFilterEndUV",
           "scope": "source.vjass"
       },
        "fnSetCineFilterStartColor": {
           "prefix": "fnSetCineFilterStartColor",
           "body": "SetCineFilterStartColor(${0:integer alpha})",
           "description": "fnSetCineFilterStartColor",
           "scope": "source.vjass"
       },
        "fnSetCineFilterEndColor": {
           "prefix": "fnSetCineFilterEndColor",
           "body": "SetCineFilterEndColor(${0:integer alpha})",
           "description": "fnSetCineFilterEndColor",
           "scope": "source.vjass"
       },
        "fnSetCineFilterDuration": {
           "prefix": "fnSetCineFilterDuration",
           "body": "SetCineFilterDuration(${0:real duration})",
           "description": "fnSetCineFilterDuration",
           "scope": "source.vjass"
       },
        "fnDisplayCineFilter": {
           "prefix": "fnDisplayCineFilter",
           "body": "DisplayCineFilter(${0:boolean flag})",
           "description": "fnDisplayCineFilter",
           "scope": "source.vjass"
       },
        "fnIsCineFilterDisplayed": {
           "prefix": "fnIsCineFilterDisplayed",
           "body": "IsCineFilterDisplayed(${0:nothing})",
           "description": "fnIsCineFilterDisplayed",
           "scope": "source.vjass"
       },
        "fnSetCinematicScene": {
           "prefix": "fnSetCinematicScene",
           "body": "SetCinematicScene(${0:real voiceoverDuration},${1:integer portraitUnitId},${2:playercolor color},${3:string text})",
           "description": "fnSetCinematicScene",
           "scope": "source.vjass"
       },
        "fnEndCinematicScene": {
           "prefix": "fnEndCinematicScene",
           "body": "EndCinematicScene(${0:nothing})",
           "description": "fnEndCinematicScene",
           "scope": "source.vjass"
       },
        "fnForceCinematicSubtitles": {
           "prefix": "fnForceCinematicSubtitles",
           "body": "ForceCinematicSubtitles(${0:boolean flag})",
           "description": "fnForceCinematicSubtitles",
           "scope": "source.vjass"
       },
        "fnGetCameraMargin": {
           "prefix": "fnGetCameraMargin",
           "body": "GetCameraMargin(${0:integer whichMargin})",
           "description": "fnGetCameraMargin",
           "scope": "source.vjass"
       },
        "fnGetCameraBoundMinX": {
           "prefix": "fnGetCameraBoundMinX",
           "body": "GetCameraBoundMinX(${0:nothing})",
           "description": "fnGetCameraBoundMinX",
           "scope": "source.vjass"
       },
        "fnGetCameraBoundMinY": {
           "prefix": "fnGetCameraBoundMinY",
           "body": "GetCameraBoundMinY(${0:nothing})",
           "description": "fnGetCameraBoundMinY",
           "scope": "source.vjass"
       },
        "fnGetCameraBoundMaxX": {
           "prefix": "fnGetCameraBoundMaxX",
           "body": "GetCameraBoundMaxX(${0:nothing})",
           "description": "fnGetCameraBoundMaxX",
           "scope": "source.vjass"
       },
        "fnGetCameraBoundMaxY": {
           "prefix": "fnGetCameraBoundMaxY",
           "body": "GetCameraBoundMaxY(${0:nothing})",
           "description": "fnGetCameraBoundMaxY",
           "scope": "source.vjass"
       },
        "fnGetCameraField": {
           "prefix": "fnGetCameraField",
           "body": "GetCameraField(${0:camerafield whichField})",
           "description": "fnGetCameraField",
           "scope": "source.vjass"
       },
        "fnGetCameraTargetPositionX": {
           "prefix": "fnGetCameraTargetPositionX",
           "body": "GetCameraTargetPositionX(${0:nothing})",
           "description": "fnGetCameraTargetPositionX",
           "scope": "source.vjass"
       },
        "fnGetCameraTargetPositionY": {
           "prefix": "fnGetCameraTargetPositionY",
           "body": "GetCameraTargetPositionY(${0:nothing})",
           "description": "fnGetCameraTargetPositionY",
           "scope": "source.vjass"
       },
        "fnGetCameraTargetPositionZ": {
           "prefix": "fnGetCameraTargetPositionZ",
           "body": "GetCameraTargetPositionZ(${0:nothing})",
           "description": "fnGetCameraTargetPositionZ",
           "scope": "source.vjass"
       },
        "fnGetCameraTargetPositionLoc": {
           "prefix": "fnGetCameraTargetPositionLoc",
           "body": "GetCameraTargetPositionLoc(${0:nothing})",
           "description": "fnGetCameraTargetPositionLoc",
           "scope": "source.vjass"
       },
        "fnGetCameraEyePositionX": {
           "prefix": "fnGetCameraEyePositionX",
           "body": "GetCameraEyePositionX(${0:nothing})",
           "description": "fnGetCameraEyePositionX",
           "scope": "source.vjass"
       },
        "fnGetCameraEyePositionY": {
           "prefix": "fnGetCameraEyePositionY",
           "body": "GetCameraEyePositionY(${0:nothing})",
           "description": "fnGetCameraEyePositionY",
           "scope": "source.vjass"
       },
        "fnGetCameraEyePositionZ": {
           "prefix": "fnGetCameraEyePositionZ",
           "body": "GetCameraEyePositionZ(${0:nothing})",
           "description": "fnGetCameraEyePositionZ",
           "scope": "source.vjass"
       },
        "fnGetCameraEyePositionLoc": {
           "prefix": "fnGetCameraEyePositionLoc",
           "body": "GetCameraEyePositionLoc(${0:nothing})",
           "description": "fnGetCameraEyePositionLoc",
           "scope": "source.vjass"
       },
        "fnNewSoundEnvironment": {
           "prefix": "fnNewSoundEnvironment",
           "body": "NewSoundEnvironment(${0:string environmentName})",
           "description": "fnNewSoundEnvironment",
           "scope": "source.vjass"
       },
        "fnCreateSound": {
           "prefix": "fnCreateSound",
           "body": "CreateSound(${0:integer fadeOutRate},${1:boolean stopwhenoutofrange},${2:string eaxSetting})",
           "description": "fnCreateSound",
           "scope": "source.vjass"
       },
        "fnCreateSoundFilenameWithLabel": {
           "prefix": "fnCreateSoundFilenameWithLabel",
           "body": "CreateSoundFilenameWithLabel(${0:integer fadeOutRate},${1:boolean stopwhenoutofrange},${2:string SLKEntryName})",
           "description": "fnCreateSoundFilenameWithLabel",
           "scope": "source.vjass"
       },
        "fnCreateSoundFromLabel": {
           "prefix": "fnCreateSoundFromLabel",
           "body": "CreateSoundFromLabel(${0:integer fadeOutRate},${1:boolean stopwhenoutofrange},${2:string soundLabel})",
           "description": "fnCreateSoundFromLabel",
           "scope": "source.vjass"
       },
        "fnCreateMIDISound": {
           "prefix": "fnCreateMIDISound",
           "body": "CreateMIDISound(${0:integer fadeOutRate},${1:string soundLabel})",
           "description": "fnCreateMIDISound",
           "scope": "source.vjass"
       },
        "fnSetSoundParamsFromLabel": {
           "prefix": "fnSetSoundParamsFromLabel",
           "body": "SetSoundParamsFromLabel(${0:sound soundHandle},${1:string soundLabel})",
           "description": "fnSetSoundParamsFromLabel",
           "scope": "source.vjass"
       },
        "fnSetSoundDistanceCutoff": {
           "prefix": "fnSetSoundDistanceCutoff",
           "body": "SetSoundDistanceCutoff(${0:sound soundHandle},${1:real cutoff})",
           "description": "fnSetSoundDistanceCutoff",
           "scope": "source.vjass"
       },
        "fnSetSoundChannel": {
           "prefix": "fnSetSoundChannel",
           "body": "SetSoundChannel(${0:sound soundHandle},${1:integer channel})",
           "description": "fnSetSoundChannel",
           "scope": "source.vjass"
       },
        "fnSetSoundVolume": {
           "prefix": "fnSetSoundVolume",
           "body": "SetSoundVolume(${0:sound soundHandle},${1:integer volume})",
           "description": "fnSetSoundVolume",
           "scope": "source.vjass"
       },
        "fnSetSoundPitch": {
           "prefix": "fnSetSoundPitch",
           "body": "SetSoundPitch(${0:sound soundHandle},${1:real pitch})",
           "description": "fnSetSoundPitch",
           "scope": "source.vjass"
       },
        "fnSetSoundPlayPosition": {
           "prefix": "fnSetSoundPlayPosition",
           "body": "SetSoundPlayPosition(${0:sound soundHandle},${1:integer millisecs})",
           "description": "fnSetSoundPlayPosition",
           "scope": "source.vjass"
       },
        "fnSetSoundDistances": {
           "prefix": "fnSetSoundDistances",
           "body": "SetSoundDistances(${0:sound soundHandle},${1:real maxDist})",
           "description": "fnSetSoundDistances",
           "scope": "source.vjass"
       },
        "fnSetSoundConeAngles": {
           "prefix": "fnSetSoundConeAngles",
           "body": "SetSoundConeAngles(${0:sound soundHandle},${1:real outside},${2:integer outsideVolume})",
           "description": "fnSetSoundConeAngles",
           "scope": "source.vjass"
       },
        "fnSetSoundConeOrientation": {
           "prefix": "fnSetSoundConeOrientation",
           "body": "SetSoundConeOrientation(${0:sound soundHandle},${1:real z})",
           "description": "fnSetSoundConeOrientation",
           "scope": "source.vjass"
       },
        "fnSetSoundPosition": {
           "prefix": "fnSetSoundPosition",
           "body": "SetSoundPosition(${0:sound soundHandle},${1:real z})",
           "description": "fnSetSoundPosition",
           "scope": "source.vjass"
       },
        "fnSetSoundVelocity": {
           "prefix": "fnSetSoundVelocity",
           "body": "SetSoundVelocity(${0:sound soundHandle},${1:real z})",
           "description": "fnSetSoundVelocity",
           "scope": "source.vjass"
       },
        "fnAttachSoundToUnit": {
           "prefix": "fnAttachSoundToUnit",
           "body": "AttachSoundToUnit(${0:sound soundHandle},${1:unit whichUnit})",
           "description": "fnAttachSoundToUnit",
           "scope": "source.vjass"
       },
        "fnStartSound": {
           "prefix": "fnStartSound",
           "body": "StartSound(${0:sound soundHandle})",
           "description": "fnStartSound",
           "scope": "source.vjass"
       },
        "fnStopSound": {
           "prefix": "fnStopSound",
           "body": "StopSound(${0:sound soundHandle},${1:boolean fadeOut})",
           "description": "fnStopSound",
           "scope": "source.vjass"
       },
        "fnKillSoundWhenDone": {
           "prefix": "fnKillSoundWhenDone",
           "body": "KillSoundWhenDone(${0:sound soundHandle})",
           "description": "fnKillSoundWhenDone",
           "scope": "source.vjass"
       },
        "fnSetMapMusic": {
           "prefix": "fnSetMapMusic",
           "body": "SetMapMusic(${0:integer index},${1:boolean random},${2:string musicName})",
           "description": "fnSetMapMusic",
           "scope": "source.vjass"
       },
        "fnClearMapMusic": {
           "prefix": "fnClearMapMusic",
           "body": "ClearMapMusic(${0:nothing})",
           "description": "fnClearMapMusic",
           "scope": "source.vjass"
       },
        "fnPlayMusic": {
           "prefix": "fnPlayMusic",
           "body": "PlayMusic(${0:string musicName})",
           "description": "fnPlayMusic",
           "scope": "source.vjass"
       },
        "fnPlayMusicEx": {
           "prefix": "fnPlayMusicEx",
           "body": "PlayMusicEx(${0:integer fadeinmsecs},${1:string musicName})",
           "description": "fnPlayMusicEx",
           "scope": "source.vjass"
       },
        "fnStopMusic": {
           "prefix": "fnStopMusic",
           "body": "StopMusic(${0:boolean fadeOut})",
           "description": "fnStopMusic",
           "scope": "source.vjass"
       },
        "fnResumeMusic": {
           "prefix": "fnResumeMusic",
           "body": "ResumeMusic(${0:nothing})",
           "description": "fnResumeMusic",
           "scope": "source.vjass"
       },
        "fnPlayThematicMusic": {
           "prefix": "fnPlayThematicMusic",
           "body": "PlayThematicMusic(${0:string musicFileName})",
           "description": "fnPlayThematicMusic",
           "scope": "source.vjass"
       },
        "fnPlayThematicMusicEx": {
           "prefix": "fnPlayThematicMusicEx",
           "body": "PlayThematicMusicEx(${0:integer frommsecs},${1:string musicFileName})",
           "description": "fnPlayThematicMusicEx",
           "scope": "source.vjass"
       },
        "fnEndThematicMusic": {
           "prefix": "fnEndThematicMusic",
           "body": "EndThematicMusic(${0:nothing})",
           "description": "fnEndThematicMusic",
           "scope": "source.vjass"
       },
        "fnSetMusicVolume": {
           "prefix": "fnSetMusicVolume",
           "body": "SetMusicVolume(${0:integer volume})",
           "description": "fnSetMusicVolume",
           "scope": "source.vjass"
       },
        "fnSetMusicPlayPosition": {
           "prefix": "fnSetMusicPlayPosition",
           "body": "SetMusicPlayPosition(${0:integer millisecs})",
           "description": "fnSetMusicPlayPosition",
           "scope": "source.vjass"
       },
        "fnSetThematicMusicPlayPosition": {
           "prefix": "fnSetThematicMusicPlayPosition",
           "body": "SetThematicMusicPlayPosition(${0:integer millisecs})",
           "description": "fnSetThematicMusicPlayPosition",
           "scope": "source.vjass"
       },
        "fnSetSoundDuration": {
           "prefix": "fnSetSoundDuration",
           "body": "SetSoundDuration(${0:sound soundHandle},${1:integer duration})",
           "description": "fnSetSoundDuration",
           "scope": "source.vjass"
       },
        "fnGetSoundDuration": {
           "prefix": "fnGetSoundDuration",
           "body": "GetSoundDuration(${0:sound soundHandle})",
           "description": "fnGetSoundDuration",
           "scope": "source.vjass"
       },
        "fnGetSoundFileDuration": {
           "prefix": "fnGetSoundFileDuration",
           "body": "GetSoundFileDuration(${0:string musicFileName})",
           "description": "fnGetSoundFileDuration",
           "scope": "source.vjass"
       },
        "fnVolumeGroupSetVolume": {
           "prefix": "fnVolumeGroupSetVolume",
           "body": "VolumeGroupSetVolume(${0:real scale},${1:volumegroup vgroup})",
           "description": "fnVolumeGroupSetVolume",
           "scope": "source.vjass"
       },
        "fnVolumeGroupReset": {
           "prefix": "fnVolumeGroupReset",
           "body": "VolumeGroupReset(${0:nothing})",
           "description": "fnVolumeGroupReset",
           "scope": "source.vjass"
       },
        "fnGetSoundIsPlaying": {
           "prefix": "fnGetSoundIsPlaying",
           "body": "GetSoundIsPlaying(${0:sound soundHandle})",
           "description": "fnGetSoundIsPlaying",
           "scope": "source.vjass"
       },
        "fnGetSoundIsLoading": {
           "prefix": "fnGetSoundIsLoading",
           "body": "GetSoundIsLoading(${0:sound soundHandle})",
           "description": "fnGetSoundIsLoading",
           "scope": "source.vjass"
       },
        "fnRegisterStackedSound": {
           "prefix": "fnRegisterStackedSound",
           "body": "RegisterStackedSound(${0:sound soundHandle},${1:real rectheight},${2:boolean byPosition})",
           "description": "fnRegisterStackedSound",
           "scope": "source.vjass"
       },
        "fnUnregisterStackedSound": {
           "prefix": "fnUnregisterStackedSound",
           "body": "UnregisterStackedSound(${0:sound soundHandle},${1:real rectheight},${2:boolean byPosition})",
           "description": "fnUnregisterStackedSound",
           "scope": "source.vjass"
       },
        "fnAddWeatherEffect": {
           "prefix": "fnAddWeatherEffect",
           "body": "AddWeatherEffect(${0:integer effectID},${1:rect where})",
           "description": "fnAddWeatherEffect",
           "scope": "source.vjass"
       },
        "fnRemoveWeatherEffect": {
           "prefix": "fnRemoveWeatherEffect",
           "body": "RemoveWeatherEffect(${0:weathereffect whichEffect})",
           "description": "fnRemoveWeatherEffect",
           "scope": "source.vjass"
       },
        "fnEnableWeatherEffect": {
           "prefix": "fnEnableWeatherEffect",
           "body": "EnableWeatherEffect(${0:weathereffect whichEffect},${1:boolean enable})",
           "description": "fnEnableWeatherEffect",
           "scope": "source.vjass"
       },
        "fnTerrainDeformCrater": {
           "prefix": "fnTerrainDeformCrater",
           "body": "TerrainDeformCrater(${0:real depth},${1:integer duration},${2:boolean permanent})",
           "description": "fnTerrainDeformCrater",
           "scope": "source.vjass"
       },
        "fnTerrainDeformRipple": {
           "prefix": "fnTerrainDeformRipple",
           "body": "TerrainDeformRipple(${0:real radiusStartPct},${1:integer count},${2:boolean limitNeg})",
           "description": "fnTerrainDeformRipple",
           "scope": "source.vjass"
       },
        "fnTerrainDeformWave": {
           "prefix": "fnTerrainDeformWave",
           "body": "TerrainDeformWave(${0:real depth},${1:integer count})",
           "description": "fnTerrainDeformWave",
           "scope": "source.vjass"
       },
        "fnTerrainDeformRandom": {
           "prefix": "fnTerrainDeformRandom",
           "body": "TerrainDeformRandom(${0:real maxDelta},${1:integer updateInterval})",
           "description": "fnTerrainDeformRandom",
           "scope": "source.vjass"
       },
        "fnTerrainDeformStop": {
           "prefix": "fnTerrainDeformStop",
           "body": "TerrainDeformStop(${0:integer duration},${1:terraindeformation deformation})",
           "description": "fnTerrainDeformStop",
           "scope": "source.vjass"
       },
        "fnTerrainDeformStopAll": {
           "prefix": "fnTerrainDeformStopAll",
           "body": "TerrainDeformStopAll(${0:nothing})",
           "description": "fnTerrainDeformStopAll",
           "scope": "source.vjass"
       },
        "fnAddSpecialEffect": {
           "prefix": "fnAddSpecialEffect",
           "body": "AddSpecialEffect(${0:real y},${1:string modelName})",
           "description": "fnAddSpecialEffect",
           "scope": "source.vjass"
       },
        "fnAddSpecialEffectLoc": {
           "prefix": "fnAddSpecialEffectLoc",
           "body": "AddSpecialEffectLoc(${0:string modelName},${1:location where})",
           "description": "fnAddSpecialEffectLoc",
           "scope": "source.vjass"
       },
        "fnAddSpecialEffectTarget": {
           "prefix": "fnAddSpecialEffectTarget",
           "body": "AddSpecialEffectTarget(${0:widget targetWidget},${1:string attachPointName})",
           "description": "fnAddSpecialEffectTarget",
           "scope": "source.vjass"
       },
        "fnDestroyEffect": {
           "prefix": "fnDestroyEffect",
           "body": "DestroyEffect(${0:effect whichEffect})",
           "description": "fnDestroyEffect",
           "scope": "source.vjass"
       },
        "fnAddSpellEffect": {
           "prefix": "fnAddSpellEffect",
           "body": "AddSpellEffect(${0:real y},${1:effecttype t},${2:string abilityString})",
           "description": "fnAddSpellEffect",
           "scope": "source.vjass"
       },
        "fnAddSpellEffectLoc": {
           "prefix": "fnAddSpellEffectLoc",
           "body": "AddSpellEffectLoc(${0:effecttype tlocation},${1:string abilityString})",
           "description": "fnAddSpellEffectLoc",
           "scope": "source.vjass"
       },
        "fnAddSpellEffectById": {
           "prefix": "fnAddSpellEffectById",
           "body": "AddSpellEffectById(${0:integer abilityId},${1:x, real},${2:effecttype treal})",
           "description": "fnAddSpellEffectById",
           "scope": "source.vjass"
       },
        "fnAddSpellEffectByIdLoc": {
           "prefix": "fnAddSpellEffectByIdLoc",
           "body": "AddSpellEffectByIdLoc(${0:integer abilityId},${1:effecttype tlocation})",
           "description": "fnAddSpellEffectByIdLoc",
           "scope": "source.vjass"
       },
        "fnAddSpellEffectTarget": {
           "prefix": "fnAddSpellEffectTarget",
           "body": "AddSpellEffectTarget(${0:effecttype t},${1:widget targetWidget},${2:string attachPoint})",
           "description": "fnAddSpellEffectTarget",
           "scope": "source.vjass"
       },
        "fnAddSpellEffectTargetById": {
           "prefix": "fnAddSpellEffectTargetById",
           "body": "AddSpellEffectTargetById(${0:integer abilityId},${1:widget targetWidget},${2:string attachPoint},${3:effecttype t})",
           "description": "fnAddSpellEffectTargetById",
           "scope": "source.vjass"
       },
        "fnAddLightning": {
           "prefix": "fnAddLightning",
           "body": "AddLightning(${0:real y2},${1:boolean checkVisibility},${2:string codeName})",
           "description": "fnAddLightning",
           "scope": "source.vjass"
       },
        "fnAddLightningEx": {
           "prefix": "fnAddLightningEx",
           "body": "AddLightningEx(${0:real z2},${1:boolean checkVisibility},${2:string codeName})",
           "description": "fnAddLightningEx",
           "scope": "source.vjass"
       },
        "fnDestroyLightning": {
           "prefix": "fnDestroyLightning",
           "body": "DestroyLightning(${0:lightning whichBolt})",
           "description": "fnDestroyLightning",
           "scope": "source.vjass"
       },
        "fnMoveLightning": {
           "prefix": "fnMoveLightning",
           "body": "MoveLightning(${0:real y2},${1:boolean checkVisibility},${2:lightning whichBolt})",
           "description": "fnMoveLightning",
           "scope": "source.vjass"
       },
        "fnMoveLightningEx": {
           "prefix": "fnMoveLightningEx",
           "body": "MoveLightningEx(${0:real z2},${1:boolean checkVisibility},${2:lightning whichBolt})",
           "description": "fnMoveLightningEx",
           "scope": "source.vjass"
       },
        "fnGetLightningColorA": {
           "prefix": "fnGetLightningColorA",
           "body": "GetLightningColorA(${0:lightning whichBolt})",
           "description": "fnGetLightningColorA",
           "scope": "source.vjass"
       },
        "fnGetLightningColorR": {
           "prefix": "fnGetLightningColorR",
           "body": "GetLightningColorR(${0:lightning whichBolt})",
           "description": "fnGetLightningColorR",
           "scope": "source.vjass"
       },
        "fnGetLightningColorG": {
           "prefix": "fnGetLightningColorG",
           "body": "GetLightningColorG(${0:lightning whichBolt})",
           "description": "fnGetLightningColorG",
           "scope": "source.vjass"
       },
        "fnGetLightningColorB": {
           "prefix": "fnGetLightningColorB",
           "body": "GetLightningColorB(${0:lightning whichBolt})",
           "description": "fnGetLightningColorB",
           "scope": "source.vjass"
       },
        "fnSetLightningColor": {
           "prefix": "fnSetLightningColor",
           "body": "SetLightningColor(${0:real a},${1:lightning whichBolt})",
           "description": "fnSetLightningColor",
           "scope": "source.vjass"
       },
        "fnGetAbilityEffect": {
           "prefix": "fnGetAbilityEffect",
           "body": "GetAbilityEffect(${0:effecttype t},${1:string abilityString},${2:integer index})",
           "description": "fnGetAbilityEffect",
           "scope": "source.vjass"
       },
        "fnGetAbilityEffectById": {
           "prefix": "fnGetAbilityEffectById",
           "body": "GetAbilityEffectById(${0:integer index},${1:effecttype t})",
           "description": "fnGetAbilityEffectById",
           "scope": "source.vjass"
       },
        "fnGetAbilitySound": {
           "prefix": "fnGetAbilitySound",
           "body": "GetAbilitySound(${0:soundtype t},${1:string abilityString})",
           "description": "fnGetAbilitySound",
           "scope": "source.vjass"
       },
        "fnGetAbilitySoundById": {
           "prefix": "fnGetAbilitySoundById",
           "body": "GetAbilitySoundById(${0:integer abilityId},${1:soundtype t})",
           "description": "fnGetAbilitySoundById",
           "scope": "source.vjass"
       },
        "fnGetTerrainCliffLevel": {
           "prefix": "fnGetTerrainCliffLevel",
           "body": "GetTerrainCliffLevel(${0:real y})",
           "description": "fnGetTerrainCliffLevel",
           "scope": "source.vjass"
       },
        "fnSetWaterBaseColor": {
           "prefix": "fnSetWaterBaseColor",
           "body": "SetWaterBaseColor(${0:integer alpha})",
           "description": "fnSetWaterBaseColor",
           "scope": "source.vjass"
       },
        "fnSetWaterDeforms": {
           "prefix": "fnSetWaterDeforms",
           "body": "SetWaterDeforms(${0:boolean val})",
           "description": "fnSetWaterDeforms",
           "scope": "source.vjass"
       },
        "fnGetTerrainType": {
           "prefix": "fnGetTerrainType",
           "body": "GetTerrainType(${0:real y})",
           "description": "fnGetTerrainType",
           "scope": "source.vjass"
       },
        "fnGetTerrainVariance": {
           "prefix": "fnGetTerrainVariance",
           "body": "GetTerrainVariance(${0:real y})",
           "description": "fnGetTerrainVariance",
           "scope": "source.vjass"
       },
        "fnSetTerrainType": {
           "prefix": "fnSetTerrainType",
           "body": "SetTerrainType(${0:real y},${1:integer shape})",
           "description": "fnSetTerrainType",
           "scope": "source.vjass"
       },
        "fnIsTerrainPathable": {
           "prefix": "fnIsTerrainPathable",
           "body": "IsTerrainPathable(${0:real y},${1:pathingtype t})",
           "description": "fnIsTerrainPathable",
           "scope": "source.vjass"
       },
        "fnSetTerrainPathable": {
           "prefix": "fnSetTerrainPathable",
           "body": "SetTerrainPathable(${0:real y},${1:pathingtype t},${2:boolean flag})",
           "description": "fnSetTerrainPathable",
           "scope": "source.vjass"
       },
        "fnCreateImage": {
           "prefix": "fnCreateImage",
           "body": "CreateImage(${0:real originZ},${1:integer imageType},${2:string file})",
           "description": "fnCreateImage",
           "scope": "source.vjass"
       },
        "fnDestroyImage": {
           "prefix": "fnDestroyImage",
           "body": "DestroyImage(${0:image whichImage})",
           "description": "fnDestroyImage",
           "scope": "source.vjass"
       },
        "fnShowImage": {
           "prefix": "fnShowImage",
           "body": "ShowImage(${0:image whichImage},${1:boolean flag})",
           "description": "fnShowImage",
           "scope": "source.vjass"
       },
        "fnSetImageConstantHeight": {
           "prefix": "fnSetImageConstantHeight",
           "body": "SetImageConstantHeight(${0:real height},${1:image whichImage},${2:boolean flag})",
           "description": "fnSetImageConstantHeight",
           "scope": "source.vjass"
       },
        "fnSetImagePosition": {
           "prefix": "fnSetImagePosition",
           "body": "SetImagePosition(${0:real z},${1:image whichImage})",
           "description": "fnSetImagePosition",
           "scope": "source.vjass"
       },
        "fnSetImageColor": {
           "prefix": "fnSetImageColor",
           "body": "SetImageColor(${0:integer alpha},${1:image whichImage})",
           "description": "fnSetImageColor",
           "scope": "source.vjass"
       },
        "fnSetImageRender": {
           "prefix": "fnSetImageRender",
           "body": "SetImageRender(${0:image whichImage},${1:boolean flag})",
           "description": "fnSetImageRender",
           "scope": "source.vjass"
       },
        "fnSetImageRenderAlways": {
           "prefix": "fnSetImageRenderAlways",
           "body": "SetImageRenderAlways(${0:image whichImage},${1:boolean flag})",
           "description": "fnSetImageRenderAlways",
           "scope": "source.vjass"
       },
        "fnSetImageAboveWater": {
           "prefix": "fnSetImageAboveWater",
           "body": "SetImageAboveWater(${0:image whichImage},${1:boolean useWaterAlpha})",
           "description": "fnSetImageAboveWater",
           "scope": "source.vjass"
       },
        "fnSetImageType": {
           "prefix": "fnSetImageType",
           "body": "SetImageType(${0:integer imageType},${1:image whichImage})",
           "description": "fnSetImageType",
           "scope": "source.vjass"
       },
        "fnCreateUbersplat": {
           "prefix": "fnCreateUbersplat",
           "body": "CreateUbersplat(${0:real y},${1:integer alpha},${2:boolean noBirthTime},${3:string name})",
           "description": "fnCreateUbersplat",
           "scope": "source.vjass"
       },
        "fnDestroyUbersplat": {
           "prefix": "fnDestroyUbersplat",
           "body": "DestroyUbersplat(${0:ubersplat whichSplat})",
           "description": "fnDestroyUbersplat",
           "scope": "source.vjass"
       },
        "fnResetUbersplat": {
           "prefix": "fnResetUbersplat",
           "body": "ResetUbersplat(${0:ubersplat whichSplat})",
           "description": "fnResetUbersplat",
           "scope": "source.vjass"
       },
        "fnFinishUbersplat": {
           "prefix": "fnFinishUbersplat",
           "body": "FinishUbersplat(${0:ubersplat whichSplat})",
           "description": "fnFinishUbersplat",
           "scope": "source.vjass"
       },
        "fnShowUbersplat": {
           "prefix": "fnShowUbersplat",
           "body": "ShowUbersplat(${0:boolean flag},${1:ubersplat whichSplat})",
           "description": "fnShowUbersplat",
           "scope": "source.vjass"
       },
        "fnSetUbersplatRender": {
           "prefix": "fnSetUbersplatRender",
           "body": "SetUbersplatRender(${0:boolean flag},${1:ubersplat whichSplat})",
           "description": "fnSetUbersplatRender",
           "scope": "source.vjass"
       },
        "fnSetUbersplatRenderAlways": {
           "prefix": "fnSetUbersplatRenderAlways",
           "body": "SetUbersplatRenderAlways(${0:boolean flag},${1:ubersplat whichSplat})",
           "description": "fnSetUbersplatRenderAlways",
           "scope": "source.vjass"
       },
        "fnSetBlight": {
           "prefix": "fnSetBlight",
           "body": "SetBlight(${0:real radius},${1:player whichPlayer},${2:boolean addBlight})",
           "description": "fnSetBlight",
           "scope": "source.vjass"
       },
        "fnSetBlightRect": {
           "prefix": "fnSetBlightRect",
           "body": "SetBlightRect(${0:player whichPlayer},${1:boolean addBlight},${2:rect r})",
           "description": "fnSetBlightRect",
           "scope": "source.vjass"
       },
        "fnSetBlightPoint": {
           "prefix": "fnSetBlightPoint",
           "body": "SetBlightPoint(${0:real y},${1:player whichPlayer},${2:boolean addBlight})",
           "description": "fnSetBlightPoint",
           "scope": "source.vjass"
       },
        "fnSetBlightLoc": {
           "prefix": "fnSetBlightLoc",
           "body": "SetBlightLoc(${0:real radius},${1:player whichPlayer},${2:boolean addBlight},${3:location whichLocation})",
           "description": "fnSetBlightLoc",
           "scope": "source.vjass"
       },
        "fnCreateBlightedGoldmine": {
           "prefix": "fnCreateBlightedGoldmine",
           "body": "CreateBlightedGoldmine(${0:real face},${1:player id})",
           "description": "fnCreateBlightedGoldmine",
           "scope": "source.vjass"
       },
        "fnIsPointBlighted": {
           "prefix": "fnIsPointBlighted",
           "body": "IsPointBlighted(${0:real y})",
           "description": "fnIsPointBlighted",
           "scope": "source.vjass"
       },
        "fnSetDoodadAnimation": {
           "prefix": "fnSetDoodadAnimation",
           "body": "SetDoodadAnimation(${0:real radius},${1:integer doodadID},${2:boolean animRandom},${3:string animName})",
           "description": "fnSetDoodadAnimation",
           "scope": "source.vjass"
       },
        "fnSetDoodadAnimationRect": {
           "prefix": "fnSetDoodadAnimationRect",
           "body": "SetDoodadAnimationRect(${0:integer doodadID},${1:boolean animRandom},${2:string animName},${3:rect r})",
           "description": "fnSetDoodadAnimationRect",
           "scope": "source.vjass"
       },
        "fnStartMeleeAI": {
           "prefix": "fnStartMeleeAI",
           "body": "StartMeleeAI(${0:player num},${1:string script})",
           "description": "fnStartMeleeAI",
           "scope": "source.vjass"
       },
        "fnStartCampaignAI": {
           "prefix": "fnStartCampaignAI",
           "body": "StartCampaignAI(${0:player num},${1:string script})",
           "description": "fnStartCampaignAI",
           "scope": "source.vjass"
       },
        "fnCommandAI": {
           "prefix": "fnCommandAI",
           "body": "CommandAI(${0:player num},${1:integer data})",
           "description": "fnCommandAI",
           "scope": "source.vjass"
       },
        "fnPauseCompAI": {
           "prefix": "fnPauseCompAI",
           "body": "PauseCompAI(${0:player p},${1:boolean pause})",
           "description": "fnPauseCompAI",
           "scope": "source.vjass"
       },
        "fnGetAIDifficulty": {
           "prefix": "fnGetAIDifficulty",
           "body": "GetAIDifficulty(${0:player num})",
           "description": "fnGetAIDifficulty",
           "scope": "source.vjass"
       },
        "fnRemoveGuardPosition": {
           "prefix": "fnRemoveGuardPosition",
           "body": "RemoveGuardPosition(${0:unit hUnit})",
           "description": "fnRemoveGuardPosition",
           "scope": "source.vjass"
       },
        "fnRecycleGuardPosition": {
           "prefix": "fnRecycleGuardPosition",
           "body": "RecycleGuardPosition(${0:unit hUnit})",
           "description": "fnRecycleGuardPosition",
           "scope": "source.vjass"
       },
        "fnRemoveAllGuardPositions": {
           "prefix": "fnRemoveAllGuardPositions",
           "body": "RemoveAllGuardPositions(${0:player num})",
           "description": "fnRemoveAllGuardPositions",
           "scope": "source.vjass"
       },
        "fnCheat": {
           "prefix": "fnCheat",
           "body": "Cheat(${0:string cheatStr})",
           "description": "fnCheat",
           "scope": "source.vjass"
       },
        "fnIsNoVictoryCheat": {
           "prefix": "fnIsNoVictoryCheat",
           "body": "IsNoVictoryCheat(${0:nothing})",
           "description": "fnIsNoVictoryCheat",
           "scope": "source.vjass"
       },
        "fnIsNoDefeatCheat": {
           "prefix": "fnIsNoDefeatCheat",
           "body": "IsNoDefeatCheat(${0:nothing})",
           "description": "fnIsNoDefeatCheat",
           "scope": "source.vjass"
       },
        "fnPreload": {
           "prefix": "fnPreload",
           "body": "Preload(${0:string filename})",
           "description": "fnPreload",
           "scope": "source.vjass"
       },
        "fnPreloadEnd": {
           "prefix": "fnPreloadEnd",
           "body": "PreloadEnd(${0:real timeout})",
           "description": "fnPreloadEnd",
           "scope": "source.vjass"
       },
        "fnPreloadStart": {
           "prefix": "fnPreloadStart",
           "body": "PreloadStart(${0:nothing})",
           "description": "fnPreloadStart",
           "scope": "source.vjass"
       },
        "fnPreloadRefresh": {
           "prefix": "fnPreloadRefresh",
           "body": "PreloadRefresh(${0:nothing})",
           "description": "fnPreloadRefresh",
           "scope": "source.vjass"
       },
        "fnPreloadEndEx": {
           "prefix": "fnPreloadEndEx",
           "body": "PreloadEndEx(${0:nothing})",
           "description": "fnPreloadEndEx",
           "scope": "source.vjass"
       },
        "fnPreloadGenClear": {
           "prefix": "fnPreloadGenClear",
           "body": "PreloadGenClear(${0:nothing})",
           "description": "fnPreloadGenClear",
           "scope": "source.vjass"
       },
        "fnPreloadGenStart": {
           "prefix": "fnPreloadGenStart",
           "body": "PreloadGenStart(${0:nothing})",
           "description": "fnPreloadGenStart",
           "scope": "source.vjass"
       },
        "fnPreloadGenEnd": {
           "prefix": "fnPreloadGenEnd",
           "body": "PreloadGenEnd(${0:string filename})",
           "description": "fnPreloadGenEnd",
           "scope": "source.vjass"
       },
        "fnPreloader": {
           "prefix": "fnPreloader",
           "body": "Preloader(${0:string filename})",
           "description": "fnPreloader",
           "scope": "source.vjass"
       }
}
