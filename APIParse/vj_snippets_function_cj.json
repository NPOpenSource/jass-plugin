{
        "fnConvertRace": {
           "prefix": "fnConvertRace",
           "body": "ConvertRace(${1:integer i})",
           "description": "constant native ConvertRace takes integer i returns race",
           "scope": "source.vjass"
       },
        "fnConvertAllianceType": {
           "prefix": "fnConvertAllianceType",
           "body": "ConvertAllianceType(${1:integer i})",
           "description": "constant native ConvertAllianceType takes integer i returns alliancetype",
           "scope": "source.vjass"
       },
        "fnConvertRacePref": {
           "prefix": "fnConvertRacePref",
           "body": "ConvertRacePref(${1:integer i})",
           "description": "constant native ConvertRacePref takes integer i returns racepreference",
           "scope": "source.vjass"
       },
        "fnConvertIGameState": {
           "prefix": "fnConvertIGameState",
           "body": "ConvertIGameState(${1:integer i})",
           "description": "constant native ConvertIGameState takes integer i returns igamestate",
           "scope": "source.vjass"
       },
        "fnConvertFGameState": {
           "prefix": "fnConvertFGameState",
           "body": "ConvertFGameState(${1:integer i})",
           "description": "constant native ConvertFGameState takes integer i returns fgamestate",
           "scope": "source.vjass"
       },
        "fnConvertPlayerState": {
           "prefix": "fnConvertPlayerState",
           "body": "ConvertPlayerState(${1:integer i})",
           "description": "constant native ConvertPlayerState takes integer i returns playerstate",
           "scope": "source.vjass"
       },
        "fnConvertPlayerScore": {
           "prefix": "fnConvertPlayerScore",
           "body": "ConvertPlayerScore(${1:integer i})",
           "description": "constant native ConvertPlayerScore takes integer i returns playerscore",
           "scope": "source.vjass"
       },
        "fnConvertPlayerGameResult": {
           "prefix": "fnConvertPlayerGameResult",
           "body": "ConvertPlayerGameResult(${1:integer i})",
           "description": "constant native ConvertPlayerGameResult takes integer i returns playergameresult",
           "scope": "source.vjass"
       },
        "fnConvertUnitState": {
           "prefix": "fnConvertUnitState",
           "body": "ConvertUnitState(${1:integer i})",
           "description": "constant native ConvertUnitState takes integer i returns unitstate",
           "scope": "source.vjass"
       },
        "fnConvertAIDifficulty": {
           "prefix": "fnConvertAIDifficulty",
           "body": "ConvertAIDifficulty(${1:integer i})",
           "description": "constant native ConvertAIDifficulty takes integer i returns aidifficulty",
           "scope": "source.vjass"
       },
        "fnConvertGameEvent": {
           "prefix": "fnConvertGameEvent",
           "body": "ConvertGameEvent(${1:integer i})",
           "description": "constant native ConvertGameEvent takes integer i returns gameevent",
           "scope": "source.vjass"
       },
        "fnConvertPlayerEvent": {
           "prefix": "fnConvertPlayerEvent",
           "body": "ConvertPlayerEvent(${1:integer i})",
           "description": "constant native ConvertPlayerEvent takes integer i returns playerevent",
           "scope": "source.vjass"
       },
        "fnConvertPlayerUnitEvent": {
           "prefix": "fnConvertPlayerUnitEvent",
           "body": "ConvertPlayerUnitEvent(${1:integer i})",
           "description": "constant native ConvertPlayerUnitEvent takes integer i returns playerunitevent",
           "scope": "source.vjass"
       },
        "fnConvertWidgetEvent": {
           "prefix": "fnConvertWidgetEvent",
           "body": "ConvertWidgetEvent(${1:integer i})",
           "description": "constant native ConvertWidgetEvent takes integer i returns widgetevent",
           "scope": "source.vjass"
       },
        "fnConvertDialogEvent": {
           "prefix": "fnConvertDialogEvent",
           "body": "ConvertDialogEvent(${1:integer i})",
           "description": "constant native ConvertDialogEvent takes integer i returns dialogevent",
           "scope": "source.vjass"
       },
        "fnConvertUnitEvent": {
           "prefix": "fnConvertUnitEvent",
           "body": "ConvertUnitEvent(${1:integer i})",
           "description": "constant native ConvertUnitEvent takes integer i returns unitevent",
           "scope": "source.vjass"
       },
        "fnConvertLimitOp": {
           "prefix": "fnConvertLimitOp",
           "body": "ConvertLimitOp(${1:integer i})",
           "description": "constant native ConvertLimitOp takes integer i returns limitop",
           "scope": "source.vjass"
       },
        "fnConvertUnitType": {
           "prefix": "fnConvertUnitType",
           "body": "ConvertUnitType(${1:integer i})",
           "description": "constant native ConvertUnitType takes integer i returns unittype",
           "scope": "source.vjass"
       },
        "fnConvertGameSpeed": {
           "prefix": "fnConvertGameSpeed",
           "body": "ConvertGameSpeed(${1:integer i})",
           "description": "constant native ConvertGameSpeed takes integer i returns gamespeed",
           "scope": "source.vjass"
       },
        "fnConvertPlacement": {
           "prefix": "fnConvertPlacement",
           "body": "ConvertPlacement(${1:integer i})",
           "description": "constant native ConvertPlacement takes integer i returns placement",
           "scope": "source.vjass"
       },
        "fnConvertStartLocPrio": {
           "prefix": "fnConvertStartLocPrio",
           "body": "ConvertStartLocPrio(${1:integer i})",
           "description": "constant native ConvertStartLocPrio takes integer i returns startlocprio",
           "scope": "source.vjass"
       },
        "fnConvertGameDifficulty": {
           "prefix": "fnConvertGameDifficulty",
           "body": "ConvertGameDifficulty(${1:integer i})",
           "description": "constant native ConvertGameDifficulty takes integer i returns gamedifficulty",
           "scope": "source.vjass"
       },
        "fnConvertGameType": {
           "prefix": "fnConvertGameType",
           "body": "ConvertGameType(${1:integer i})",
           "description": "constant native ConvertGameType takes integer i returns gametype",
           "scope": "source.vjass"
       },
        "fnConvertMapFlag": {
           "prefix": "fnConvertMapFlag",
           "body": "ConvertMapFlag(${1:integer i})",
           "description": "constant native ConvertMapFlag takes integer i returns mapflag",
           "scope": "source.vjass"
       },
        "fnConvertMapVisibility": {
           "prefix": "fnConvertMapVisibility",
           "body": "ConvertMapVisibility(${1:integer i})",
           "description": "constant native ConvertMapVisibility takes integer i returns mapvisibility",
           "scope": "source.vjass"
       },
        "fnConvertMapSetting": {
           "prefix": "fnConvertMapSetting",
           "body": "ConvertMapSetting(${1:integer i})",
           "description": "constant native ConvertMapSetting takes integer i returns mapsetting",
           "scope": "source.vjass"
       },
        "fnConvertMapDensity": {
           "prefix": "fnConvertMapDensity",
           "body": "ConvertMapDensity(${1:integer i})",
           "description": "constant native ConvertMapDensity takes integer i returns mapdensity",
           "scope": "source.vjass"
       },
        "fnConvertMapControl": {
           "prefix": "fnConvertMapControl",
           "body": "ConvertMapControl(${1:integer i})",
           "description": "constant native ConvertMapControl takes integer i returns mapcontrol",
           "scope": "source.vjass"
       },
        "fnConvertPlayerColor": {
           "prefix": "fnConvertPlayerColor",
           "body": "ConvertPlayerColor(${1:integer i})",
           "description": "constant native ConvertPlayerColor takes integer i returns playercolor",
           "scope": "source.vjass"
       },
        "fnConvertPlayerSlotState": {
           "prefix": "fnConvertPlayerSlotState",
           "body": "ConvertPlayerSlotState(${1:integer i})",
           "description": "constant native ConvertPlayerSlotState takes integer i returns playerslotstate",
           "scope": "source.vjass"
       },
        "fnConvertVolumeGroup": {
           "prefix": "fnConvertVolumeGroup",
           "body": "ConvertVolumeGroup(${1:integer i})",
           "description": "constant native ConvertVolumeGroup takes integer i returns volumegroup",
           "scope": "source.vjass"
       },
        "fnConvertCameraField": {
           "prefix": "fnConvertCameraField",
           "body": "ConvertCameraField(${1:integer i})",
           "description": "constant native ConvertCameraField takes integer i returns camerafield",
           "scope": "source.vjass"
       },
        "fnConvertBlendMode": {
           "prefix": "fnConvertBlendMode",
           "body": "ConvertBlendMode(${1:integer i})",
           "description": "constant native ConvertBlendMode takes integer i returns blendmode",
           "scope": "source.vjass"
       },
        "fnConvertRarityControl": {
           "prefix": "fnConvertRarityControl",
           "body": "ConvertRarityControl(${1:integer i})",
           "description": "constant native ConvertRarityControl takes integer i returns raritycontrol",
           "scope": "source.vjass"
       },
        "fnConvertTexMapFlags": {
           "prefix": "fnConvertTexMapFlags",
           "body": "ConvertTexMapFlags(${1:integer i})",
           "description": "constant native ConvertTexMapFlags takes integer i returns texmapflags",
           "scope": "source.vjass"
       },
        "fnConvertFogState": {
           "prefix": "fnConvertFogState",
           "body": "ConvertFogState(${1:integer i})",
           "description": "constant native ConvertFogState takes integer i returns fogstate",
           "scope": "source.vjass"
       },
        "fnConvertEffectType": {
           "prefix": "fnConvertEffectType",
           "body": "ConvertEffectType(${1:integer i})",
           "description": "constant native ConvertEffectType takes integer i returns effecttype",
           "scope": "source.vjass"
       },
        "fnConvertVersion": {
           "prefix": "fnConvertVersion",
           "body": "ConvertVersion(${1:integer i})",
           "description": "constant native ConvertVersion takes integer i returns version",
           "scope": "source.vjass"
       },
        "fnConvertItemType": {
           "prefix": "fnConvertItemType",
           "body": "ConvertItemType(${1:integer i})",
           "description": "constant native ConvertItemType takes integer i returns itemtype",
           "scope": "source.vjass"
       },
        "fnConvertAttackType": {
           "prefix": "fnConvertAttackType",
           "body": "ConvertAttackType(${1:integer i})",
           "description": "constant native ConvertAttackType takes integer i returns attacktype",
           "scope": "source.vjass"
       },
        "fnConvertDamageType": {
           "prefix": "fnConvertDamageType",
           "body": "ConvertDamageType(${1:integer i})",
           "description": "constant native ConvertDamageType takes integer i returns damagetype",
           "scope": "source.vjass"
       },
        "fnConvertWeaponType": {
           "prefix": "fnConvertWeaponType",
           "body": "ConvertWeaponType(${1:integer i})",
           "description": "constant native ConvertWeaponType takes integer i returns weapontype",
           "scope": "source.vjass"
       },
        "fnConvertSoundType": {
           "prefix": "fnConvertSoundType",
           "body": "ConvertSoundType(${1:integer i})",
           "description": "constant native ConvertSoundType takes integer i returns soundtype",
           "scope": "source.vjass"
       },
        "fnConvertPathingType": {
           "prefix": "fnConvertPathingType",
           "body": "ConvertPathingType(${1:integer i})",
           "description": "constant native ConvertPathingType takes integer i returns pathingtype",
           "scope": "source.vjass"
       },
        "fnOrderId": {
           "prefix": "fnOrderId",
           "body": "OrderId(${1:string orderIdString})",
           "description": "constant native OrderId takes string orderIdString returns integer",
           "scope": "source.vjass"
       },
        "fnOrderId2String": {
           "prefix": "fnOrderId2String",
           "body": "OrderId2String(${1:integer orderId})",
           "description": "constant native OrderId2String takes integer orderId returns string",
           "scope": "source.vjass"
       },
        "fnUnitId": {
           "prefix": "fnUnitId",
           "body": "UnitId(${1:string unitIdString})",
           "description": "constant native UnitId takes string unitIdString returns integer",
           "scope": "source.vjass"
       },
        "fnUnitId2String": {
           "prefix": "fnUnitId2String",
           "body": "UnitId2String(${1:integer unitId})",
           "description": "constant native UnitId2String takes integer unitId returns string",
           "scope": "source.vjass"
       },
        "fnAbilityId": {
           "prefix": "fnAbilityId",
           "body": "AbilityId(${1:string abilityIdString})",
           "description": "constant native AbilityId takes string abilityIdString returns integer",
           "scope": "source.vjass"
       },
        "fnAbilityId2String": {
           "prefix": "fnAbilityId2String",
           "body": "AbilityId2String(${1:integer abilityId})",
           "description": "constant native AbilityId2String takes integer abilityId returns string",
           "scope": "source.vjass"
       },
        "fnGetObjectName": {
           "prefix": "fnGetObjectName",
           "body": "GetObjectName(${1:integer objectId})",
           "description": "constant native GetObjectName takes integer objectId returns string",
           "scope": "source.vjass"
       },
        "fnDeg2Rad": {
           "prefix": "fnDeg2Rad",
           "body": "Deg2Rad(${1:real degrees})",
           "description": "native Deg2Rad takes real degrees returns real",
           "scope": "source.vjass"
       },
        "fnRad2Deg": {
           "prefix": "fnRad2Deg",
           "body": "Rad2Deg(${1:real radians})",
           "description": "native Rad2Deg takes real radians returns real",
           "scope": "source.vjass"
       },
        "fnSin": {
           "prefix": "fnSin",
           "body": "Sin(${1:real radians})",
           "description": "native Sin takes real radians returns real",
           "scope": "source.vjass"
       },
        "fnCos": {
           "prefix": "fnCos",
           "body": "Cos(${1:real radians})",
           "description": "native Cos takes real radians returns real",
           "scope": "source.vjass"
       },
        "fnTan": {
           "prefix": "fnTan",
           "body": "Tan(${1:real radians})",
           "description": "native Tan takes real radians returns real",
           "scope": "source.vjass"
       },
        "fnAsin": {
           "prefix": "fnAsin",
           "body": "Asin(${1:real y})",
           "description": "native Asin takes real y returns real",
           "scope": "source.vjass"
       },
        "fnAcos": {
           "prefix": "fnAcos",
           "body": "Acos(${1:real x})",
           "description": "native Acos takes real x returns real",
           "scope": "source.vjass"
       },
        "fnAtan": {
           "prefix": "fnAtan",
           "body": "Atan(${1:real x})",
           "description": "native Atan takes real x returns real",
           "scope": "source.vjass"
       },
        "fnAtan2": {
           "prefix": "fnAtan2",
           "body": "Atan2(${1:real x})",
           "description": "native Atan2 takes real y, real x returns real",
           "scope": "source.vjass"
       },
        "fnSquareRoot": {
           "prefix": "fnSquareRoot",
           "body": "SquareRoot(${1:real x})",
           "description": "native SquareRoot takes real x returns real",
           "scope": "source.vjass"
       },
        "fnPow": {
           "prefix": "fnPow",
           "body": "Pow(${1:real power})",
           "description": "native Pow takes real x, real power returns real",
           "scope": "source.vjass"
       },
        "fnI2R": {
           "prefix": "fnI2R",
           "body": "I2R(${1:integer i})",
           "description": "native I2R takes integer i returns real",
           "scope": "source.vjass"
       },
        "fnR2I": {
           "prefix": "fnR2I",
           "body": "R2I(${1:real r})",
           "description": "native R2I takes real r returns integer",
           "scope": "source.vjass"
       },
        "fnI2S": {
           "prefix": "fnI2S",
           "body": "I2S(${1:integer i})",
           "description": "native I2S takes integer i returns string",
           "scope": "source.vjass"
       },
        "fnR2S": {
           "prefix": "fnR2S",
           "body": "R2S(${1:real r})",
           "description": "native R2S takes real r returns string",
           "scope": "source.vjass"
       },
        "fnR2SW": {
           "prefix": "fnR2SW",
           "body": "R2SW(${1:real r},${2:integer precision})",
           "description": "native R2SW takes real r, integer width, integer precision returns string",
           "scope": "source.vjass"
       },
        "fnS2I": {
           "prefix": "fnS2I",
           "body": "S2I(${1:string s})",
           "description": "native S2I takes string s returns integer",
           "scope": "source.vjass"
       },
        "fnS2R": {
           "prefix": "fnS2R",
           "body": "S2R(${1:string s})",
           "description": "native S2R takes string s returns real",
           "scope": "source.vjass"
       },
        "fnGetHandleId": {
           "prefix": "fnGetHandleId",
           "body": "GetHandleId(${1:handle h})",
           "description": "native GetHandleId takes handle h returns integer",
           "scope": "source.vjass"
       },
        "fnSubString": {
           "prefix": "fnSubString",
           "body": "SubString(${1:integer end},${2:string source})",
           "description": "native SubString takes string source, integer start, integer end returns string",
           "scope": "source.vjass"
       },
        "fnStringLength": {
           "prefix": "fnStringLength",
           "body": "StringLength(${1:string s})",
           "description": "native StringLength takes string s returns integer",
           "scope": "source.vjass"
       },
        "fnStringCase": {
           "prefix": "fnStringCase",
           "body": "StringCase(${1:boolean upper},${2:string source})",
           "description": "native StringCase takes string source, boolean upper returns string",
           "scope": "source.vjass"
       },
        "fnStringHash": {
           "prefix": "fnStringHash",
           "body": "StringHash(${1:string s})",
           "description": "native StringHash takes string s returns integer",
           "scope": "source.vjass"
       },
        "fnGetLocalizedString": {
           "prefix": "fnGetLocalizedString",
           "body": "GetLocalizedString(${1:string source})",
           "description": "native GetLocalizedString takes string source returns string",
           "scope": "source.vjass"
       },
        "fnGetLocalizedHotkey": {
           "prefix": "fnGetLocalizedHotkey",
           "body": "GetLocalizedHotkey(${1:string source})",
           "description": "native GetLocalizedHotkey takes string source returns integer",
           "scope": "source.vjass"
       },
        "fnSetMapName": {
           "prefix": "fnSetMapName",
           "body": "SetMapName(${1:string name})",
           "description": "native SetMapName takes string name returns nothing",
           "scope": "source.vjass"
       },
        "fnSetMapDescription": {
           "prefix": "fnSetMapDescription",
           "body": "SetMapDescription(${1:string description})",
           "description": "native SetMapDescription takes string description returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTeams": {
           "prefix": "fnSetTeams",
           "body": "SetTeams(${1:integer teamcount})",
           "description": "native SetTeams takes integer teamcount returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayers": {
           "prefix": "fnSetPlayers",
           "body": "SetPlayers(${1:integer playercount})",
           "description": "native SetPlayers takes integer playercount returns nothing",
           "scope": "source.vjass"
       },
        "fnDefineStartLocation": {
           "prefix": "fnDefineStartLocation",
           "body": "DefineStartLocation(${1:real y},${2:integer whichStartLoc})",
           "description": "native DefineStartLocation takes integer whichStartLoc, real x, real y returns nothing",
           "scope": "source.vjass"
       },
        "fnDefineStartLocationLoc": {
           "prefix": "fnDefineStartLocationLoc",
           "body": "DefineStartLocationLoc(${1:integer whichStartLoc},${2:location whichLocation})",
           "description": "native DefineStartLocationLoc takes integer whichStartLoc, location whichLocation returns nothing",
           "scope": "source.vjass"
       },
        "fnSetStartLocPrioCount": {
           "prefix": "fnSetStartLocPrioCount",
           "body": "SetStartLocPrioCount(${1:integer prioSlotCount})",
           "description": "native SetStartLocPrioCount takes integer whichStartLoc, integer prioSlotCount returns nothing",
           "scope": "source.vjass"
       },
        "fnSetStartLocPrio": {
           "prefix": "fnSetStartLocPrio",
           "body": "SetStartLocPrio(${1:integer otherStartLocIndex},${2:startlocprio priority})",
           "description": "native SetStartLocPrio takes integer whichStartLoc, integer prioSlotIndex, integer otherStartLocIndex, startlocprio priority returns nothing",
           "scope": "source.vjass"
       },
        "fnGetStartLocPrioSlot": {
           "prefix": "fnGetStartLocPrioSlot",
           "body": "GetStartLocPrioSlot(${1:integer prioSlotIndex})",
           "description": "native GetStartLocPrioSlot takes integer whichStartLoc, integer prioSlotIndex returns integer",
           "scope": "source.vjass"
       },
        "fnGetStartLocPrio": {
           "prefix": "fnGetStartLocPrio",
           "body": "GetStartLocPrio(${1:integer prioSlotIndex})",
           "description": "native GetStartLocPrio takes integer whichStartLoc, integer prioSlotIndex returns startlocprio",
           "scope": "source.vjass"
       },
        "fnSetGameTypeSupported": {
           "prefix": "fnSetGameTypeSupported",
           "body": "SetGameTypeSupported(${1:boolean value},${2:gametype whichGameType})",
           "description": "native SetGameTypeSupported takes gametype whichGameType, boolean value returns nothing",
           "scope": "source.vjass"
       },
        "fnSetMapFlag": {
           "prefix": "fnSetMapFlag",
           "body": "SetMapFlag(${1:boolean value},${2:mapflag whichMapFlag})",
           "description": "native SetMapFlag takes mapflag whichMapFlag, boolean value returns nothing",
           "scope": "source.vjass"
       },
        "fnSetGamePlacement": {
           "prefix": "fnSetGamePlacement",
           "body": "SetGamePlacement(${1:placement whichPlacementType})",
           "description": "native SetGamePlacement takes placement whichPlacementType returns nothing",
           "scope": "source.vjass"
       },
        "fnSetGameSpeed": {
           "prefix": "fnSetGameSpeed",
           "body": "SetGameSpeed(${1:gamespeed whichspeed})",
           "description": "native SetGameSpeed takes gamespeed whichspeed returns nothing",
           "scope": "source.vjass"
       },
        "fnSetGameDifficulty": {
           "prefix": "fnSetGameDifficulty",
           "body": "SetGameDifficulty(${1:gamedifficulty whichdifficulty})",
           "description": "native SetGameDifficulty takes gamedifficulty whichdifficulty returns nothing",
           "scope": "source.vjass"
       },
        "fnSetResourceDensity": {
           "prefix": "fnSetResourceDensity",
           "body": "SetResourceDensity(${1:mapdensity whichdensity})",
           "description": "native SetResourceDensity takes mapdensity whichdensity returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCreatureDensity": {
           "prefix": "fnSetCreatureDensity",
           "body": "SetCreatureDensity(${1:mapdensity whichdensity})",
           "description": "native SetCreatureDensity takes mapdensity whichdensity returns nothing",
           "scope": "source.vjass"
       },
        "fnGetTeams": {
           "prefix": "fnGetTeams",
           "body": "GetTeams(${1:nothing})",
           "description": "native GetTeams takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnGetPlayers": {
           "prefix": "fnGetPlayers",
           "body": "GetPlayers(${1:nothing})",
           "description": "native GetPlayers takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnIsGameTypeSupported": {
           "prefix": "fnIsGameTypeSupported",
           "body": "IsGameTypeSupported(${1:gametype whichGameType})",
           "description": "native IsGameTypeSupported takes gametype whichGameType returns boolean",
           "scope": "source.vjass"
       },
        "fnGetGameTypeSelected": {
           "prefix": "fnGetGameTypeSelected",
           "body": "GetGameTypeSelected(${1:nothing})",
           "description": "native GetGameTypeSelected takes nothing returns gametype",
           "scope": "source.vjass"
       },
        "fnIsMapFlagSet": {
           "prefix": "fnIsMapFlagSet",
           "body": "IsMapFlagSet(${1:mapflag whichMapFlag})",
           "description": "native IsMapFlagSet takes mapflag whichMapFlag returns boolean",
           "scope": "source.vjass"
       },
        "fnGetGamePlacement": {
           "prefix": "fnGetGamePlacement",
           "body": "GetGamePlacement(${1:nothing})",
           "description": "constant native GetGamePlacement takes nothing returns placement",
           "scope": "source.vjass"
       },
        "fnGetGameSpeed": {
           "prefix": "fnGetGameSpeed",
           "body": "GetGameSpeed(${1:nothing})",
           "description": "constant native GetGameSpeed takes nothing returns gamespeed",
           "scope": "source.vjass"
       },
        "fnGetGameDifficulty": {
           "prefix": "fnGetGameDifficulty",
           "body": "GetGameDifficulty(${1:nothing})",
           "description": "constant native GetGameDifficulty takes nothing returns gamedifficulty",
           "scope": "source.vjass"
       },
        "fnGetResourceDensity": {
           "prefix": "fnGetResourceDensity",
           "body": "GetResourceDensity(${1:nothing})",
           "description": "constant native GetResourceDensity takes nothing returns mapdensity",
           "scope": "source.vjass"
       },
        "fnGetCreatureDensity": {
           "prefix": "fnGetCreatureDensity",
           "body": "GetCreatureDensity(${1:nothing})",
           "description": "constant native GetCreatureDensity takes nothing returns mapdensity",
           "scope": "source.vjass"
       },
        "fnGetStartLocationX": {
           "prefix": "fnGetStartLocationX",
           "body": "GetStartLocationX(${1:integer whichStartLocation})",
           "description": "constant native GetStartLocationX takes integer whichStartLocation returns real",
           "scope": "source.vjass"
       },
        "fnGetStartLocationY": {
           "prefix": "fnGetStartLocationY",
           "body": "GetStartLocationY(${1:integer whichStartLocation})",
           "description": "constant native GetStartLocationY takes integer whichStartLocation returns real",
           "scope": "source.vjass"
       },
        "fnGetStartLocationLoc": {
           "prefix": "fnGetStartLocationLoc",
           "body": "GetStartLocationLoc(${1:integer whichStartLocation})",
           "description": "constant native GetStartLocationLoc takes integer whichStartLocation returns location",
           "scope": "source.vjass"
       },
        "fnSetPlayerTeam": {
           "prefix": "fnSetPlayerTeam",
           "body": "SetPlayerTeam(${1:player whichPlayer},${2:integer whichTeam})",
           "description": "native SetPlayerTeam takes player whichPlayer, integer whichTeam returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerStartLocation": {
           "prefix": "fnSetPlayerStartLocation",
           "body": "SetPlayerStartLocation(${1:player whichPlayer},${2:integer startLocIndex})",
           "description": "native SetPlayerStartLocation takes player whichPlayer, integer startLocIndex returns nothing",
           "scope": "source.vjass"
       },
        "fnForcePlayerStartLocation": {
           "prefix": "fnForcePlayerStartLocation",
           "body": "ForcePlayerStartLocation(${1:player whichPlayer},${2:integer startLocIndex})",
           "description": "native ForcePlayerStartLocation takes player whichPlayer, integer startLocIndex returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerColor": {
           "prefix": "fnSetPlayerColor",
           "body": "SetPlayerColor(${1:player whichPlayer},${2:playercolor color})",
           "description": "native SetPlayerColor takes player whichPlayer, playercolor color returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerAlliance": {
           "prefix": "fnSetPlayerAlliance",
           "body": "SetPlayerAlliance(${1:player otherPlayer},${2:boolean value},${3:alliancetype whichAllianceSetting})",
           "description": "native SetPlayerAlliance takes player sourcePlayer, player otherPlayer, alliancetype whichAllianceSetting, boolean value returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerTaxRate": {
           "prefix": "fnSetPlayerTaxRate",
           "body": "SetPlayerTaxRate(${1:player otherPlayer},${2:integer rate},${3:playerstate whichResource})",
           "description": "native SetPlayerTaxRate takes player sourcePlayer, player otherPlayer, playerstate whichResource, integer rate returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerRacePreference": {
           "prefix": "fnSetPlayerRacePreference",
           "body": "SetPlayerRacePreference(${1:player whichPlayer},${2:racepreference whichRacePreference})",
           "description": "native SetPlayerRacePreference takes player whichPlayer, racepreference whichRacePreference returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerRaceSelectable": {
           "prefix": "fnSetPlayerRaceSelectable",
           "body": "SetPlayerRaceSelectable(${1:player whichPlayer},${2:boolean value})",
           "description": "native SetPlayerRaceSelectable takes player whichPlayer, boolean value returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerController": {
           "prefix": "fnSetPlayerController",
           "body": "SetPlayerController(${1:player whichPlayer},${2:mapcontrol controlType})",
           "description": "native SetPlayerController takes player whichPlayer, mapcontrol controlType returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerName": {
           "prefix": "fnSetPlayerName",
           "body": "SetPlayerName(${1:player whichPlayer},${2:string name})",
           "description": "native SetPlayerName takes player whichPlayer, string name returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerOnScoreScreen": {
           "prefix": "fnSetPlayerOnScoreScreen",
           "body": "SetPlayerOnScoreScreen(${1:player whichPlayer},${2:boolean flag})",
           "description": "native SetPlayerOnScoreScreen takes player whichPlayer, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnGetPlayerTeam": {
           "prefix": "fnGetPlayerTeam",
           "body": "GetPlayerTeam(${1:player whichPlayer})",
           "description": "native GetPlayerTeam takes player whichPlayer returns integer",
           "scope": "source.vjass"
       },
        "fnGetPlayerStartLocation": {
           "prefix": "fnGetPlayerStartLocation",
           "body": "GetPlayerStartLocation(${1:player whichPlayer})",
           "description": "native GetPlayerStartLocation takes player whichPlayer returns integer",
           "scope": "source.vjass"
       },
        "fnGetPlayerColor": {
           "prefix": "fnGetPlayerColor",
           "body": "GetPlayerColor(${1:player whichPlayer})",
           "description": "native GetPlayerColor takes player whichPlayer returns playercolor",
           "scope": "source.vjass"
       },
        "fnGetPlayerSelectable": {
           "prefix": "fnGetPlayerSelectable",
           "body": "GetPlayerSelectable(${1:player whichPlayer})",
           "description": "native GetPlayerSelectable takes player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnGetPlayerController": {
           "prefix": "fnGetPlayerController",
           "body": "GetPlayerController(${1:player whichPlayer})",
           "description": "native GetPlayerController takes player whichPlayer returns mapcontrol",
           "scope": "source.vjass"
       },
        "fnGetPlayerSlotState": {
           "prefix": "fnGetPlayerSlotState",
           "body": "GetPlayerSlotState(${1:player whichPlayer})",
           "description": "native GetPlayerSlotState takes player whichPlayer returns playerslotstate",
           "scope": "source.vjass"
       },
        "fnGetPlayerTaxRate": {
           "prefix": "fnGetPlayerTaxRate",
           "body": "GetPlayerTaxRate(${1:player otherPlayer},${2:playerstate whichResource})",
           "description": "native GetPlayerTaxRate takes player sourcePlayer, player otherPlayer, playerstate whichResource returns integer",
           "scope": "source.vjass"
       },
        "fnIsPlayerRacePrefSet": {
           "prefix": "fnIsPlayerRacePrefSet",
           "body": "IsPlayerRacePrefSet(${1:player whichPlayer},${2:racepreference pref})",
           "description": "native IsPlayerRacePrefSet takes player whichPlayer, racepreference pref returns boolean",
           "scope": "source.vjass"
       },
        "fnGetPlayerName": {
           "prefix": "fnGetPlayerName",
           "body": "GetPlayerName(${1:player whichPlayer})",
           "description": "native GetPlayerName takes player whichPlayer returns string",
           "scope": "source.vjass"
       },
        "fnCreateTimer": {
           "prefix": "fnCreateTimer",
           "body": "CreateTimer(${1:nothing})",
           "description": "native CreateTimer takes nothing returns timer",
           "scope": "source.vjass"
       },
        "fnDestroyTimer": {
           "prefix": "fnDestroyTimer",
           "body": "DestroyTimer(${1:timer whichTimer})",
           "description": "native DestroyTimer takes timer whichTimer returns nothing",
           "scope": "source.vjass"
       },
        "fnTimerStart": {
           "prefix": "fnTimerStart",
           "body": "TimerStart(${1:real timeout},${2:boolean periodic},${3:timer whichTimer},${4:code handlerFunc})",
           "description": "native TimerStart takes timer whichTimer, real timeout, boolean periodic, code handlerFunc returns nothing",
           "scope": "source.vjass"
       },
        "fnTimerGetElapsed": {
           "prefix": "fnTimerGetElapsed",
           "body": "TimerGetElapsed(${1:timer whichTimer})",
           "description": "native TimerGetElapsed takes timer whichTimer returns real",
           "scope": "source.vjass"
       },
        "fnTimerGetRemaining": {
           "prefix": "fnTimerGetRemaining",
           "body": "TimerGetRemaining(${1:timer whichTimer})",
           "description": "native TimerGetRemaining takes timer whichTimer returns real",
           "scope": "source.vjass"
       },
        "fnTimerGetTimeout": {
           "prefix": "fnTimerGetTimeout",
           "body": "TimerGetTimeout(${1:timer whichTimer})",
           "description": "native TimerGetTimeout takes timer whichTimer returns real",
           "scope": "source.vjass"
       },
        "fnPauseTimer": {
           "prefix": "fnPauseTimer",
           "body": "PauseTimer(${1:timer whichTimer})",
           "description": "native PauseTimer takes timer whichTimer returns nothing",
           "scope": "source.vjass"
       },
        "fnResumeTimer": {
           "prefix": "fnResumeTimer",
           "body": "ResumeTimer(${1:timer whichTimer})",
           "description": "native ResumeTimer takes timer whichTimer returns nothing",
           "scope": "source.vjass"
       },
        "fnGetExpiredTimer": {
           "prefix": "fnGetExpiredTimer",
           "body": "GetExpiredTimer(${1:nothing})",
           "description": "native GetExpiredTimer takes nothing returns timer",
           "scope": "source.vjass"
       },
        "fnCreateGroup": {
           "prefix": "fnCreateGroup",
           "body": "CreateGroup(${1:nothing})",
           "description": "native CreateGroup takes nothing returns group",
           "scope": "source.vjass"
       },
        "fnDestroyGroup": {
           "prefix": "fnDestroyGroup",
           "body": "DestroyGroup(${1:group whichGroup})",
           "description": "native DestroyGroup takes group whichGroup returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupAddUnit": {
           "prefix": "fnGroupAddUnit",
           "body": "GroupAddUnit(${1:group whichGroup},${2:unit whichUnit})",
           "description": "native GroupAddUnit takes group whichGroup, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupRemoveUnit": {
           "prefix": "fnGroupRemoveUnit",
           "body": "GroupRemoveUnit(${1:group whichGroup},${2:unit whichUnit})",
           "description": "native GroupRemoveUnit takes group whichGroup, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupClear": {
           "prefix": "fnGroupClear",
           "body": "GroupClear(${1:group whichGroup})",
           "description": "native GroupClear takes group whichGroup returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupEnumUnitsOfType": {
           "prefix": "fnGroupEnumUnitsOfType",
           "body": "GroupEnumUnitsOfType(${1:group whichGroup},${2:string unitname},${3:boolexpr filter})",
           "description": "native GroupEnumUnitsOfType takes group whichGroup, string unitname, boolexpr filter returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupEnumUnitsOfPlayer": {
           "prefix": "fnGroupEnumUnitsOfPlayer",
           "body": "GroupEnumUnitsOfPlayer(${1:player whichPlayer},${2:group whichGroup},${3:boolexpr filter})",
           "description": "native GroupEnumUnitsOfPlayer takes group whichGroup, player whichPlayer, boolexpr filter returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupEnumUnitsOfTypeCounted": {
           "prefix": "fnGroupEnumUnitsOfTypeCounted",
           "body": "GroupEnumUnitsOfTypeCounted(${1:integer countLimit},${2:group whichGroup},${3:string unitname},${4:boolexpr filter})",
           "description": "native GroupEnumUnitsOfTypeCounted takes group whichGroup, string unitname, boolexpr filter, integer countLimit returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupEnumUnitsInRect": {
           "prefix": "fnGroupEnumUnitsInRect",
           "body": "GroupEnumUnitsInRect(${1:group whichGroup},${2:boolexpr filter},${3:rect r})",
           "description": "native GroupEnumUnitsInRect takes group whichGroup, rect r, boolexpr filter returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupEnumUnitsInRectCounted": {
           "prefix": "fnGroupEnumUnitsInRectCounted",
           "body": "GroupEnumUnitsInRectCounted(${1:integer countLimit},${2:group whichGroup},${3:boolexpr filter},${4:rect r})",
           "description": "native GroupEnumUnitsInRectCounted takes group whichGroup, rect r, boolexpr filter, integer countLimit returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupEnumUnitsInRange": {
           "prefix": "fnGroupEnumUnitsInRange",
           "body": "GroupEnumUnitsInRange(${1:real radius},${2:group whichGroup},${3:boolexpr filter})",
           "description": "native GroupEnumUnitsInRange takes group whichGroup, real x, real y, real radius, boolexpr filter returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupEnumUnitsInRangeOfLoc": {
           "prefix": "fnGroupEnumUnitsInRangeOfLoc",
           "body": "GroupEnumUnitsInRangeOfLoc(${1:real radius},${2:group whichGroup},${3:location whichLocation},${4:boolexpr filter})",
           "description": "native GroupEnumUnitsInRangeOfLoc takes group whichGroup, location whichLocation, real radius, boolexpr filter returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupEnumUnitsInRangeCounted": {
           "prefix": "fnGroupEnumUnitsInRangeCounted",
           "body": "GroupEnumUnitsInRangeCounted(${1:real radius},${2:integer countLimit},${3:group whichGroup},${4:boolexpr filter})",
           "description": "native GroupEnumUnitsInRangeCounted takes group whichGroup, real x, real y, real radius, boolexpr filter, integer countLimit returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupEnumUnitsInRangeOfLocCounted": {
           "prefix": "fnGroupEnumUnitsInRangeOfLocCounted",
           "body": "GroupEnumUnitsInRangeOfLocCounted(${1:real radius},${2:integer countLimit},${3:group whichGroup},${4:location whichLocation},${5:boolexpr filter})",
           "description": "native GroupEnumUnitsInRangeOfLocCounted takes group whichGroup, location whichLocation, real radius, boolexpr filter, integer countLimit returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupEnumUnitsSelected": {
           "prefix": "fnGroupEnumUnitsSelected",
           "body": "GroupEnumUnitsSelected(${1:player whichPlayer},${2:group whichGroup},${3:boolexpr filter})",
           "description": "native GroupEnumUnitsSelected takes group whichGroup, player whichPlayer, boolexpr filter returns nothing",
           "scope": "source.vjass"
       },
        "fnGroupImmediateOrder": {
           "prefix": "fnGroupImmediateOrder",
           "body": "GroupImmediateOrder(${1:group whichGroup},${2:string order})",
           "description": "native GroupImmediateOrder takes group whichGroup, string order returns boolean",
           "scope": "source.vjass"
       },
        "fnGroupImmediateOrderById": {
           "prefix": "fnGroupImmediateOrderById",
           "body": "GroupImmediateOrderById(${1:integer order},${2:group whichGroup})",
           "description": "native GroupImmediateOrderById takes group whichGroup, integer order returns boolean",
           "scope": "source.vjass"
       },
        "fnGroupPointOrder": {
           "prefix": "fnGroupPointOrder",
           "body": "GroupPointOrder(${1:real y},${2:group whichGroup},${3:string order})",
           "description": "native GroupPointOrder takes group whichGroup, string order, real x, real y returns boolean",
           "scope": "source.vjass"
       },
        "fnGroupPointOrderLoc": {
           "prefix": "fnGroupPointOrderLoc",
           "body": "GroupPointOrderLoc(${1:group whichGroup},${2:string order},${3:location whichLocation})",
           "description": "native GroupPointOrderLoc takes group whichGroup, string order, location whichLocation returns boolean",
           "scope": "source.vjass"
       },
        "fnGroupPointOrderById": {
           "prefix": "fnGroupPointOrderById",
           "body": "GroupPointOrderById(${1:real y},${2:integer order},${3:group whichGroup})",
           "description": "native GroupPointOrderById takes group whichGroup, integer order, real x, real y returns boolean",
           "scope": "source.vjass"
       },
        "fnGroupPointOrderByIdLoc": {
           "prefix": "fnGroupPointOrderByIdLoc",
           "body": "GroupPointOrderByIdLoc(${1:integer order},${2:group whichGroup},${3:location whichLocation})",
           "description": "native GroupPointOrderByIdLoc takes group whichGroup, integer order, location whichLocation returns boolean",
           "scope": "source.vjass"
       },
        "fnGroupTargetOrder": {
           "prefix": "fnGroupTargetOrder",
           "body": "GroupTargetOrder(${1:widget targetWidget},${2:group whichGroup},${3:string order})",
           "description": "native GroupTargetOrder takes group whichGroup, string order, widget targetWidget returns boolean",
           "scope": "source.vjass"
       },
        "fnGroupTargetOrderById": {
           "prefix": "fnGroupTargetOrderById",
           "body": "GroupTargetOrderById(${1:integer order},${2:widget targetWidget},${3:group whichGroup})",
           "description": "native GroupTargetOrderById takes group whichGroup, integer order, widget targetWidget returns boolean",
           "scope": "source.vjass"
       },
        "fnForGroup": {
           "prefix": "fnForGroup",
           "body": "ForGroup(${1:code callback},${2:group whichGroup})",
           "description": "native ForGroup takes group whichGroup, code callback returns nothing",
           "scope": "source.vjass"
       },
        "fnFirstOfGroup": {
           "prefix": "fnFirstOfGroup",
           "body": "FirstOfGroup(${1:group whichGroup})",
           "description": "native FirstOfGroup takes group whichGroup returns unit",
           "scope": "source.vjass"
       },
        "fnCreateForce": {
           "prefix": "fnCreateForce",
           "body": "CreateForce(${1:nothing})",
           "description": "native CreateForce takes nothing returns force",
           "scope": "source.vjass"
       },
        "fnDestroyForce": {
           "prefix": "fnDestroyForce",
           "body": "DestroyForce(${1:force whichForce})",
           "description": "native DestroyForce takes force whichForce returns nothing",
           "scope": "source.vjass"
       },
        "fnForceAddPlayer": {
           "prefix": "fnForceAddPlayer",
           "body": "ForceAddPlayer(${1:player whichPlayer},${2:force whichForce})",
           "description": "native ForceAddPlayer takes force whichForce, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnForceRemovePlayer": {
           "prefix": "fnForceRemovePlayer",
           "body": "ForceRemovePlayer(${1:player whichPlayer},${2:force whichForce})",
           "description": "native ForceRemovePlayer takes force whichForce, player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnForceClear": {
           "prefix": "fnForceClear",
           "body": "ForceClear(${1:force whichForce})",
           "description": "native ForceClear takes force whichForce returns nothing",
           "scope": "source.vjass"
       },
        "fnForceEnumPlayers": {
           "prefix": "fnForceEnumPlayers",
           "body": "ForceEnumPlayers(${1:force whichForce},${2:boolexpr filter})",
           "description": "native ForceEnumPlayers takes force whichForce, boolexpr filter returns nothing",
           "scope": "source.vjass"
       },
        "fnForceEnumPlayersCounted": {
           "prefix": "fnForceEnumPlayersCounted",
           "body": "ForceEnumPlayersCounted(${1:integer countLimit},${2:force whichForce},${3:boolexpr filter})",
           "description": "native ForceEnumPlayersCounted takes force whichForce, boolexpr filter, integer countLimit returns nothing",
           "scope": "source.vjass"
       },
        "fnForceEnumAllies": {
           "prefix": "fnForceEnumAllies",
           "body": "ForceEnumAllies(${1:player whichPlayer},${2:force whichForce},${3:boolexpr filter})",
           "description": "native ForceEnumAllies takes force whichForce, player whichPlayer, boolexpr filter returns nothing",
           "scope": "source.vjass"
       },
        "fnForceEnumEnemies": {
           "prefix": "fnForceEnumEnemies",
           "body": "ForceEnumEnemies(${1:player whichPlayer},${2:force whichForce},${3:boolexpr filter})",
           "description": "native ForceEnumEnemies takes force whichForce, player whichPlayer, boolexpr filter returns nothing",
           "scope": "source.vjass"
       },
        "fnForForce": {
           "prefix": "fnForForce",
           "body": "ForForce(${1:code callback},${2:force whichForce})",
           "description": "native ForForce takes force whichForce, code callback returns nothing",
           "scope": "source.vjass"
       },
        "fnRect": {
           "prefix": "fnRect",
           "body": "Rect(${1:real maxy})",
           "description": "native Rect takes real minx, real miny, real maxx, real maxy returns rect",
           "scope": "source.vjass"
       },
        "fnRectFromLoc": {
           "prefix": "fnRectFromLoc",
           "body": "RectFromLoc(${1:location max})",
           "description": "native RectFromLoc takes location min, location max returns rect",
           "scope": "source.vjass"
       },
        "fnRemoveRect": {
           "prefix": "fnRemoveRect",
           "body": "RemoveRect(${1:rect whichRect})",
           "description": "native RemoveRect takes rect whichRect returns nothing",
           "scope": "source.vjass"
       },
        "fnSetRect": {
           "prefix": "fnSetRect",
           "body": "SetRect(${1:real maxy},${2:rect whichRect})",
           "description": "native SetRect takes rect whichRect, real minx, real miny, real maxx, real maxy returns nothing",
           "scope": "source.vjass"
       },
        "fnSetRectFromLoc": {
           "prefix": "fnSetRectFromLoc",
           "body": "SetRectFromLoc(${1:location max},${2:rect whichRect})",
           "description": "native SetRectFromLoc takes rect whichRect, location min, location max returns nothing",
           "scope": "source.vjass"
       },
        "fnMoveRectTo": {
           "prefix": "fnMoveRectTo",
           "body": "MoveRectTo(${1:real newCenterY},${2:rect whichRect})",
           "description": "native MoveRectTo takes rect whichRect, real newCenterX, real newCenterY returns nothing",
           "scope": "source.vjass"
       },
        "fnMoveRectToLoc": {
           "prefix": "fnMoveRectToLoc",
           "body": "MoveRectToLoc(${1:location newCenterLoc},${2:rect whichRect})",
           "description": "native MoveRectToLoc takes rect whichRect, location newCenterLoc returns nothing",
           "scope": "source.vjass"
       },
        "fnGetRectCenterX": {
           "prefix": "fnGetRectCenterX",
           "body": "GetRectCenterX(${1:rect whichRect})",
           "description": "native GetRectCenterX takes rect whichRect returns real",
           "scope": "source.vjass"
       },
        "fnGetRectCenterY": {
           "prefix": "fnGetRectCenterY",
           "body": "GetRectCenterY(${1:rect whichRect})",
           "description": "native GetRectCenterY takes rect whichRect returns real",
           "scope": "source.vjass"
       },
        "fnGetRectMinX": {
           "prefix": "fnGetRectMinX",
           "body": "GetRectMinX(${1:rect whichRect})",
           "description": "native GetRectMinX takes rect whichRect returns real",
           "scope": "source.vjass"
       },
        "fnGetRectMinY": {
           "prefix": "fnGetRectMinY",
           "body": "GetRectMinY(${1:rect whichRect})",
           "description": "native GetRectMinY takes rect whichRect returns real",
           "scope": "source.vjass"
       },
        "fnGetRectMaxX": {
           "prefix": "fnGetRectMaxX",
           "body": "GetRectMaxX(${1:rect whichRect})",
           "description": "native GetRectMaxX takes rect whichRect returns real",
           "scope": "source.vjass"
       },
        "fnGetRectMaxY": {
           "prefix": "fnGetRectMaxY",
           "body": "GetRectMaxY(${1:rect whichRect})",
           "description": "native GetRectMaxY takes rect whichRect returns real",
           "scope": "source.vjass"
       },
        "fnCreateRegion": {
           "prefix": "fnCreateRegion",
           "body": "CreateRegion(${1:nothing})",
           "description": "native CreateRegion takes nothing returns region",
           "scope": "source.vjass"
       },
        "fnRemoveRegion": {
           "prefix": "fnRemoveRegion",
           "body": "RemoveRegion(${1:region whichRegion})",
           "description": "native RemoveRegion takes region whichRegion returns nothing",
           "scope": "source.vjass"
       },
        "fnRegionAddRect": {
           "prefix": "fnRegionAddRect",
           "body": "RegionAddRect(${1:region whichRegion},${2:rect r})",
           "description": "native RegionAddRect takes region whichRegion, rect r returns nothing",
           "scope": "source.vjass"
       },
        "fnRegionClearRect": {
           "prefix": "fnRegionClearRect",
           "body": "RegionClearRect(${1:region whichRegion},${2:rect r})",
           "description": "native RegionClearRect takes region whichRegion, rect r returns nothing",
           "scope": "source.vjass"
       },
        "fnRegionAddCell": {
           "prefix": "fnRegionAddCell",
           "body": "RegionAddCell(${1:real y},${2:region whichRegion})",
           "description": "native RegionAddCell takes region whichRegion, real x, real y returns nothing",
           "scope": "source.vjass"
       },
        "fnRegionAddCellAtLoc": {
           "prefix": "fnRegionAddCellAtLoc",
           "body": "RegionAddCellAtLoc(${1:region whichRegion},${2:location whichLocation})",
           "description": "native RegionAddCellAtLoc takes region whichRegion, location whichLocation returns nothing",
           "scope": "source.vjass"
       },
        "fnRegionClearCell": {
           "prefix": "fnRegionClearCell",
           "body": "RegionClearCell(${1:real y},${2:region whichRegion})",
           "description": "native RegionClearCell takes region whichRegion, real x, real y returns nothing",
           "scope": "source.vjass"
       },
        "fnRegionClearCellAtLoc": {
           "prefix": "fnRegionClearCellAtLoc",
           "body": "RegionClearCellAtLoc(${1:region whichRegion},${2:location whichLocation})",
           "description": "native RegionClearCellAtLoc takes region whichRegion, location whichLocation returns nothing",
           "scope": "source.vjass"
       },
        "fnLocation": {
           "prefix": "fnLocation",
           "body": "Location(${1:real y})",
           "description": "native Location takes real x, real y returns location",
           "scope": "source.vjass"
       },
        "fnRemoveLocation": {
           "prefix": "fnRemoveLocation",
           "body": "RemoveLocation(${1:location whichLocation})",
           "description": "native RemoveLocation takes location whichLocation returns nothing",
           "scope": "source.vjass"
       },
        "fnMoveLocation": {
           "prefix": "fnMoveLocation",
           "body": "MoveLocation(${1:real newY},${2:location whichLocation})",
           "description": "native MoveLocation takes location whichLocation, real newX, real newY returns nothing",
           "scope": "source.vjass"
       },
        "fnGetLocationX": {
           "prefix": "fnGetLocationX",
           "body": "GetLocationX(${1:location whichLocation})",
           "description": "native GetLocationX takes location whichLocation returns real",
           "scope": "source.vjass"
       },
        "fnGetLocationY": {
           "prefix": "fnGetLocationY",
           "body": "GetLocationY(${1:location whichLocation})",
           "description": "native GetLocationY takes location whichLocation returns real",
           "scope": "source.vjass"
       },
        "fnGetLocationZ": {
           "prefix": "fnGetLocationZ",
           "body": "GetLocationZ(${1:location whichLocation})",
           "description": "native GetLocationZ takes location whichLocation returns real",
           "scope": "source.vjass"
       },
        "fnIsUnitInRegion": {
           "prefix": "fnIsUnitInRegion",
           "body": "IsUnitInRegion(${1:region whichRegion},${2:unit whichUnit})",
           "description": "native IsUnitInRegion takes region whichRegion, unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnIsPointInRegion": {
           "prefix": "fnIsPointInRegion",
           "body": "IsPointInRegion(${1:real y},${2:region whichRegion})",
           "description": "native IsPointInRegion takes region whichRegion, real x, real y returns boolean",
           "scope": "source.vjass"
       },
        "fnIsLocationInRegion": {
           "prefix": "fnIsLocationInRegion",
           "body": "IsLocationInRegion(${1:region whichRegion},${2:location whichLocation})",
           "description": "native IsLocationInRegion takes region whichRegion, location whichLocation returns boolean",
           "scope": "source.vjass"
       },
        "fnGetWorldBounds": {
           "prefix": "fnGetWorldBounds",
           "body": "GetWorldBounds(${1:nothing})",
           "description": "native GetWorldBounds takes nothing returns rect",
           "scope": "source.vjass"
       },
        "fnCreateTrigger": {
           "prefix": "fnCreateTrigger",
           "body": "CreateTrigger(${1:nothing})",
           "description": "native CreateTrigger takes nothing returns trigger",
           "scope": "source.vjass"
       },
        "fnDestroyTrigger": {
           "prefix": "fnDestroyTrigger",
           "body": "DestroyTrigger(${1:trigger whichTrigger})",
           "description": "native DestroyTrigger takes trigger whichTrigger returns nothing",
           "scope": "source.vjass"
       },
        "fnResetTrigger": {
           "prefix": "fnResetTrigger",
           "body": "ResetTrigger(${1:trigger whichTrigger})",
           "description": "native ResetTrigger takes trigger whichTrigger returns nothing",
           "scope": "source.vjass"
       },
        "fnEnableTrigger": {
           "prefix": "fnEnableTrigger",
           "body": "EnableTrigger(${1:trigger whichTrigger})",
           "description": "native EnableTrigger takes trigger whichTrigger returns nothing",
           "scope": "source.vjass"
       },
        "fnDisableTrigger": {
           "prefix": "fnDisableTrigger",
           "body": "DisableTrigger(${1:trigger whichTrigger})",
           "description": "native DisableTrigger takes trigger whichTrigger returns nothing",
           "scope": "source.vjass"
       },
        "fnIsTriggerEnabled": {
           "prefix": "fnIsTriggerEnabled",
           "body": "IsTriggerEnabled(${1:trigger whichTrigger})",
           "description": "native IsTriggerEnabled takes trigger whichTrigger returns boolean",
           "scope": "source.vjass"
       },
        "fnTriggerWaitOnSleeps": {
           "prefix": "fnTriggerWaitOnSleeps",
           "body": "TriggerWaitOnSleeps(${1:boolean flag},${2:trigger whichTrigger})",
           "description": "native TriggerWaitOnSleeps takes trigger whichTrigger, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnIsTriggerWaitOnSleeps": {
           "prefix": "fnIsTriggerWaitOnSleeps",
           "body": "IsTriggerWaitOnSleeps(${1:trigger whichTrigger})",
           "description": "native IsTriggerWaitOnSleeps takes trigger whichTrigger returns boolean",
           "scope": "source.vjass"
       },
        "fnGetFilterUnit": {
           "prefix": "fnGetFilterUnit",
           "body": "GetFilterUnit(${1:nothing})",
           "description": "constant native GetFilterUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetEnumUnit": {
           "prefix": "fnGetEnumUnit",
           "body": "GetEnumUnit(${1:nothing})",
           "description": "constant native GetEnumUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetFilterDestructable": {
           "prefix": "fnGetFilterDestructable",
           "body": "GetFilterDestructable(${1:nothing})",
           "description": "constant native GetFilterDestructable takes nothing returns destructable",
           "scope": "source.vjass"
       },
        "fnGetEnumDestructable": {
           "prefix": "fnGetEnumDestructable",
           "body": "GetEnumDestructable(${1:nothing})",
           "description": "constant native GetEnumDestructable takes nothing returns destructable",
           "scope": "source.vjass"
       },
        "fnGetFilterItem": {
           "prefix": "fnGetFilterItem",
           "body": "GetFilterItem(${1:nothing})",
           "description": "constant native GetFilterItem takes nothing returns item",
           "scope": "source.vjass"
       },
        "fnGetEnumItem": {
           "prefix": "fnGetEnumItem",
           "body": "GetEnumItem(${1:nothing})",
           "description": "constant native GetEnumItem takes nothing returns item",
           "scope": "source.vjass"
       },
        "fnGetFilterPlayer": {
           "prefix": "fnGetFilterPlayer",
           "body": "GetFilterPlayer(${1:nothing})",
           "description": "constant native GetFilterPlayer takes nothing returns player",
           "scope": "source.vjass"
       },
        "fnGetEnumPlayer": {
           "prefix": "fnGetEnumPlayer",
           "body": "GetEnumPlayer(${1:nothing})",
           "description": "constant native GetEnumPlayer takes nothing returns player",
           "scope": "source.vjass"
       },
        "fnGetTriggeringTrigger": {
           "prefix": "fnGetTriggeringTrigger",
           "body": "GetTriggeringTrigger(${1:nothing})",
           "description": "constant native GetTriggeringTrigger takes nothing returns trigger",
           "scope": "source.vjass"
       },
        "fnGetTriggerEventId": {
           "prefix": "fnGetTriggerEventId",
           "body": "GetTriggerEventId(${1:nothing})",
           "description": "constant native GetTriggerEventId takes nothing returns eventid",
           "scope": "source.vjass"
       },
        "fnGetTriggerEvalCount": {
           "prefix": "fnGetTriggerEvalCount",
           "body": "GetTriggerEvalCount(${1:trigger whichTrigger})",
           "description": "constant native GetTriggerEvalCount takes trigger whichTrigger returns integer",
           "scope": "source.vjass"
       },
        "fnGetTriggerExecCount": {
           "prefix": "fnGetTriggerExecCount",
           "body": "GetTriggerExecCount(${1:trigger whichTrigger})",
           "description": "constant native GetTriggerExecCount takes trigger whichTrigger returns integer",
           "scope": "source.vjass"
       },
        "fnExecuteFunc": {
           "prefix": "fnExecuteFunc",
           "body": "ExecuteFunc(${1:string funcName})",
           "description": "native ExecuteFunc takes string funcName returns nothing",
           "scope": "source.vjass"
       },
        "fnAnd": {
           "prefix": "fnAnd",
           "body": "And(${1:boolexpr operandB})",
           "description": "native And takes boolexpr operandA, boolexpr operandB returns boolexpr",
           "scope": "source.vjass"
       },
        "fnOr": {
           "prefix": "fnOr",
           "body": "Or(${1:boolexpr operandB})",
           "description": "native Or takes boolexpr operandA, boolexpr operandB returns boolexpr",
           "scope": "source.vjass"
       },
        "fnNot": {
           "prefix": "fnNot",
           "body": "Not(${1:boolexpr operand})",
           "description": "native Not takes boolexpr operand returns boolexpr",
           "scope": "source.vjass"
       },
        "fnCondition": {
           "prefix": "fnCondition",
           "body": "Condition(${1:code func})",
           "description": "native Condition takes code func returns conditionfunc",
           "scope": "source.vjass"
       },
        "fnDestroyCondition": {
           "prefix": "fnDestroyCondition",
           "body": "DestroyCondition(${1:conditionfunc c})",
           "description": "native DestroyCondition takes conditionfunc c returns nothing",
           "scope": "source.vjass"
       },
        "fnFilter": {
           "prefix": "fnFilter",
           "body": "Filter(${1:code func})",
           "description": "native Filter takes code func returns filterfunc",
           "scope": "source.vjass"
       },
        "fnDestroyFilter": {
           "prefix": "fnDestroyFilter",
           "body": "DestroyFilter(${1:filterfunc f})",
           "description": "native DestroyFilter takes filterfunc f returns nothing",
           "scope": "source.vjass"
       },
        "fnDestroyBoolExpr": {
           "prefix": "fnDestroyBoolExpr",
           "body": "DestroyBoolExpr(${1:boolexpr e})",
           "description": "native DestroyBoolExpr takes boolexpr e returns nothing",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterVariableEvent": {
           "prefix": "fnTriggerRegisterVariableEvent",
           "body": "TriggerRegisterVariableEvent(${1:real limitval},${2:trigger whichTrigger},${3:limitop opcode},${4:string varName})",
           "description": "native TriggerRegisterVariableEvent takes trigger whichTrigger, string varName, limitop opcode, real limitval returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterTimerEvent": {
           "prefix": "fnTriggerRegisterTimerEvent",
           "body": "TriggerRegisterTimerEvent(${1:real timeout},${2:trigger whichTrigger},${3:boolean periodic})",
           "description": "native TriggerRegisterTimerEvent takes trigger whichTrigger, real timeout, boolean periodic returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterTimerExpireEvent": {
           "prefix": "fnTriggerRegisterTimerExpireEvent",
           "body": "TriggerRegisterTimerExpireEvent(${1:trigger whichTrigger},${2:timer t})",
           "description": "native TriggerRegisterTimerExpireEvent takes trigger whichTrigger, timer t returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterGameStateEvent": {
           "prefix": "fnTriggerRegisterGameStateEvent",
           "body": "TriggerRegisterGameStateEvent(${1:limitop opcode},${2:real limitval},${3:trigger whichTrigger},${4:gamestate whichState})",
           "description": "native TriggerRegisterGameStateEvent takes trigger whichTrigger, gamestate whichState, limitop opcode, real limitval returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterDialogEvent": {
           "prefix": "fnTriggerRegisterDialogEvent",
           "body": "TriggerRegisterDialogEvent(${1:trigger whichTrigger},${2:dialog whichDialog})",
           "description": "native TriggerRegisterDialogEvent takes trigger whichTrigger, dialog whichDialog returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterDialogButtonEvent": {
           "prefix": "fnTriggerRegisterDialogButtonEvent",
           "body": "TriggerRegisterDialogButtonEvent(${1:button whichButton},${2:trigger whichTrigger})",
           "description": "native TriggerRegisterDialogButtonEvent takes trigger whichTrigger, button whichButton returns event",
           "scope": "source.vjass"
       },
        "fnGetEventGameState": {
           "prefix": "fnGetEventGameState",
           "body": "GetEventGameState(${1:nothing})",
           "description": "constant native GetEventGameState takes nothing returns gamestate",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterGameEvent": {
           "prefix": "fnTriggerRegisterGameEvent",
           "body": "TriggerRegisterGameEvent(${1:trigger whichTrigger},${2:gameevent whichGameEvent})",
           "description": "native TriggerRegisterGameEvent takes trigger whichTrigger, gameevent whichGameEvent returns event",
           "scope": "source.vjass"
       },
        "fnGetWinningPlayer": {
           "prefix": "fnGetWinningPlayer",
           "body": "GetWinningPlayer(${1:nothing})",
           "description": "constant native GetWinningPlayer takes nothing returns player",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterEnterRegion": {
           "prefix": "fnTriggerRegisterEnterRegion",
           "body": "TriggerRegisterEnterRegion(${1:region whichRegion},${2:trigger whichTrigger},${3:boolexpr filter})",
           "description": "native TriggerRegisterEnterRegion takes trigger whichTrigger, region whichRegion, boolexpr filter returns event",
           "scope": "source.vjass"
       },
        "fnGetTriggeringRegion": {
           "prefix": "fnGetTriggeringRegion",
           "body": "GetTriggeringRegion(${1:nothing})",
           "description": "constant native GetTriggeringRegion takes nothing returns region",
           "scope": "source.vjass"
       },
        "fnGetEnteringUnit": {
           "prefix": "fnGetEnteringUnit",
           "body": "GetEnteringUnit(${1:nothing})",
           "description": "constant native GetEnteringUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterLeaveRegion": {
           "prefix": "fnTriggerRegisterLeaveRegion",
           "body": "TriggerRegisterLeaveRegion(${1:region whichRegion},${2:trigger whichTrigger},${3:boolexpr filter})",
           "description": "native TriggerRegisterLeaveRegion takes trigger whichTrigger, region whichRegion, boolexpr filter returns event",
           "scope": "source.vjass"
       },
        "fnGetLeavingUnit": {
           "prefix": "fnGetLeavingUnit",
           "body": "GetLeavingUnit(${1:nothing})",
           "description": "constant native GetLeavingUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterTrackableHitEvent": {
           "prefix": "fnTriggerRegisterTrackableHitEvent",
           "body": "TriggerRegisterTrackableHitEvent(${1:trackable t},${2:trigger whichTrigger})",
           "description": "native TriggerRegisterTrackableHitEvent takes trigger whichTrigger, trackable t returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterTrackableTrackEvent": {
           "prefix": "fnTriggerRegisterTrackableTrackEvent",
           "body": "TriggerRegisterTrackableTrackEvent(${1:trackable t},${2:trigger whichTrigger})",
           "description": "native TriggerRegisterTrackableTrackEvent takes trigger whichTrigger, trackable t returns event",
           "scope": "source.vjass"
       },
        "fnGetTriggeringTrackable": {
           "prefix": "fnGetTriggeringTrackable",
           "body": "GetTriggeringTrackable(${1:nothing})",
           "description": "constant native GetTriggeringTrackable takes nothing returns trackable",
           "scope": "source.vjass"
       },
        "fnGetClickedButton": {
           "prefix": "fnGetClickedButton",
           "body": "GetClickedButton(${1:nothing})",
           "description": "constant native GetClickedButton takes nothing returns button",
           "scope": "source.vjass"
       },
        "fnGetClickedDialog": {
           "prefix": "fnGetClickedDialog",
           "body": "GetClickedDialog(${1:nothing})",
           "description": "constant native GetClickedDialog takes nothing returns dialog",
           "scope": "source.vjass"
       },
        "fnGetTournamentFinishSoonTimeRemaining": {
           "prefix": "fnGetTournamentFinishSoonTimeRemaining",
           "body": "GetTournamentFinishSoonTimeRemaining(${1:nothing})",
           "description": "constant native GetTournamentFinishSoonTimeRemaining takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnGetTournamentFinishNowRule": {
           "prefix": "fnGetTournamentFinishNowRule",
           "body": "GetTournamentFinishNowRule(${1:nothing})",
           "description": "constant native GetTournamentFinishNowRule takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnGetTournamentFinishNowPlayer": {
           "prefix": "fnGetTournamentFinishNowPlayer",
           "body": "GetTournamentFinishNowPlayer(${1:nothing})",
           "description": "constant native GetTournamentFinishNowPlayer takes nothing returns player",
           "scope": "source.vjass"
       },
        "fnGetTournamentScore": {
           "prefix": "fnGetTournamentScore",
           "body": "GetTournamentScore(${1:player whichPlayer})",
           "description": "constant native GetTournamentScore takes player whichPlayer returns integer",
           "scope": "source.vjass"
       },
        "fnGetSaveBasicFilename": {
           "prefix": "fnGetSaveBasicFilename",
           "body": "GetSaveBasicFilename(${1:nothing})",
           "description": "constant native GetSaveBasicFilename takes nothing returns string",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerEvent": {
           "prefix": "fnTriggerRegisterPlayerEvent",
           "body": "TriggerRegisterPlayerEvent(${1:player whichPlayer},${2:trigger whichTrigger},${3:playerevent whichPlayerEvent})",
           "description": "native TriggerRegisterPlayerEvent takes trigger whichTrigger, player whichPlayer, playerevent whichPlayerEvent returns event",
           "scope": "source.vjass"
       },
        "fnGetTriggerPlayer": {
           "prefix": "fnGetTriggerPlayer",
           "body": "GetTriggerPlayer(${1:nothing})",
           "description": "constant native GetTriggerPlayer takes nothing returns player",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerUnitEvent": {
           "prefix": "fnTriggerRegisterPlayerUnitEvent",
           "body": "TriggerRegisterPlayerUnitEvent(${1:playerunitevent whichPlayerUnitEvent},${2:player whichPlayer},${3:trigger whichTrigger},${4:boolexpr filter})",
           "description": "native TriggerRegisterPlayerUnitEvent takes trigger whichTrigger, player whichPlayer, playerunitevent whichPlayerUnitEvent, boolexpr filter returns event",
           "scope": "source.vjass"
       },
        "fnGetLevelingUnit": {
           "prefix": "fnGetLevelingUnit",
           "body": "GetLevelingUnit(${1:nothing})",
           "description": "constant native GetLevelingUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetLearningUnit": {
           "prefix": "fnGetLearningUnit",
           "body": "GetLearningUnit(${1:nothing})",
           "description": "constant native GetLearningUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetLearnedSkill": {
           "prefix": "fnGetLearnedSkill",
           "body": "GetLearnedSkill(${1:nothing})",
           "description": "constant native GetLearnedSkill takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnGetLearnedSkillLevel": {
           "prefix": "fnGetLearnedSkillLevel",
           "body": "GetLearnedSkillLevel(${1:nothing})",
           "description": "constant native GetLearnedSkillLevel takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnGetRevivableUnit": {
           "prefix": "fnGetRevivableUnit",
           "body": "GetRevivableUnit(${1:nothing})",
           "description": "constant native GetRevivableUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetRevivingUnit": {
           "prefix": "fnGetRevivingUnit",
           "body": "GetRevivingUnit(${1:nothing})",
           "description": "constant native GetRevivingUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetAttacker": {
           "prefix": "fnGetAttacker",
           "body": "GetAttacker(${1:nothing})",
           "description": "constant native GetAttacker takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetRescuer": {
           "prefix": "fnGetRescuer",
           "body": "GetRescuer(${1:nothing})",
           "description": "constant native GetRescuer takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetDyingUnit": {
           "prefix": "fnGetDyingUnit",
           "body": "GetDyingUnit(${1:nothing})",
           "description": "constant native GetDyingUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetKillingUnit": {
           "prefix": "fnGetKillingUnit",
           "body": "GetKillingUnit(${1:nothing})",
           "description": "constant native GetKillingUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetDecayingUnit": {
           "prefix": "fnGetDecayingUnit",
           "body": "GetDecayingUnit(${1:nothing})",
           "description": "constant native GetDecayingUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetConstructingStructure": {
           "prefix": "fnGetConstructingStructure",
           "body": "GetConstructingStructure(${1:nothing})",
           "description": "constant native GetConstructingStructure takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetCancelledStructure": {
           "prefix": "fnGetCancelledStructure",
           "body": "GetCancelledStructure(${1:nothing})",
           "description": "constant native GetCancelledStructure takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetConstructedStructure": {
           "prefix": "fnGetConstructedStructure",
           "body": "GetConstructedStructure(${1:nothing})",
           "description": "constant native GetConstructedStructure takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetResearchingUnit": {
           "prefix": "fnGetResearchingUnit",
           "body": "GetResearchingUnit(${1:nothing})",
           "description": "constant native GetResearchingUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetResearched": {
           "prefix": "fnGetResearched",
           "body": "GetResearched(${1:nothing})",
           "description": "constant native GetResearched takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnGetTrainedUnitType": {
           "prefix": "fnGetTrainedUnitType",
           "body": "GetTrainedUnitType(${1:nothing})",
           "description": "constant native GetTrainedUnitType takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnGetTrainedUnit": {
           "prefix": "fnGetTrainedUnit",
           "body": "GetTrainedUnit(${1:nothing})",
           "description": "constant native GetTrainedUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetDetectedUnit": {
           "prefix": "fnGetDetectedUnit",
           "body": "GetDetectedUnit(${1:nothing})",
           "description": "constant native GetDetectedUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetSummoningUnit": {
           "prefix": "fnGetSummoningUnit",
           "body": "GetSummoningUnit(${1:nothing})",
           "description": "constant native GetSummoningUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetSummonedUnit": {
           "prefix": "fnGetSummonedUnit",
           "body": "GetSummonedUnit(${1:nothing})",
           "description": "constant native GetSummonedUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetTransportUnit": {
           "prefix": "fnGetTransportUnit",
           "body": "GetTransportUnit(${1:nothing})",
           "description": "constant native GetTransportUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetLoadedUnit": {
           "prefix": "fnGetLoadedUnit",
           "body": "GetLoadedUnit(${1:nothing})",
           "description": "constant native GetLoadedUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetSellingUnit": {
           "prefix": "fnGetSellingUnit",
           "body": "GetSellingUnit(${1:nothing})",
           "description": "constant native GetSellingUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetSoldUnit": {
           "prefix": "fnGetSoldUnit",
           "body": "GetSoldUnit(${1:nothing})",
           "description": "constant native GetSoldUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetBuyingUnit": {
           "prefix": "fnGetBuyingUnit",
           "body": "GetBuyingUnit(${1:nothing})",
           "description": "constant native GetBuyingUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetSoldItem": {
           "prefix": "fnGetSoldItem",
           "body": "GetSoldItem(${1:nothing})",
           "description": "constant native GetSoldItem takes nothing returns item",
           "scope": "source.vjass"
       },
        "fnGetChangingUnit": {
           "prefix": "fnGetChangingUnit",
           "body": "GetChangingUnit(${1:nothing})",
           "description": "constant native GetChangingUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetChangingUnitPrevOwner": {
           "prefix": "fnGetChangingUnitPrevOwner",
           "body": "GetChangingUnitPrevOwner(${1:nothing})",
           "description": "constant native GetChangingUnitPrevOwner takes nothing returns player",
           "scope": "source.vjass"
       },
        "fnGetManipulatingUnit": {
           "prefix": "fnGetManipulatingUnit",
           "body": "GetManipulatingUnit(${1:nothing})",
           "description": "constant native GetManipulatingUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetManipulatedItem": {
           "prefix": "fnGetManipulatedItem",
           "body": "GetManipulatedItem(${1:nothing})",
           "description": "constant native GetManipulatedItem takes nothing returns item",
           "scope": "source.vjass"
       },
        "fnGetOrderedUnit": {
           "prefix": "fnGetOrderedUnit",
           "body": "GetOrderedUnit(${1:nothing})",
           "description": "constant native GetOrderedUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetIssuedOrderId": {
           "prefix": "fnGetIssuedOrderId",
           "body": "GetIssuedOrderId(${1:nothing})",
           "description": "constant native GetIssuedOrderId takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnGetOrderPointX": {
           "prefix": "fnGetOrderPointX",
           "body": "GetOrderPointX(${1:nothing})",
           "description": "constant native GetOrderPointX takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnGetOrderPointY": {
           "prefix": "fnGetOrderPointY",
           "body": "GetOrderPointY(${1:nothing})",
           "description": "constant native GetOrderPointY takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnGetOrderPointLoc": {
           "prefix": "fnGetOrderPointLoc",
           "body": "GetOrderPointLoc(${1:nothing})",
           "description": "constant native GetOrderPointLoc takes nothing returns location",
           "scope": "source.vjass"
       },
        "fnGetOrderTarget": {
           "prefix": "fnGetOrderTarget",
           "body": "GetOrderTarget(${1:nothing})",
           "description": "constant native GetOrderTarget takes nothing returns widget",
           "scope": "source.vjass"
       },
        "fnGetOrderTargetDestructable": {
           "prefix": "fnGetOrderTargetDestructable",
           "body": "GetOrderTargetDestructable(${1:nothing})",
           "description": "constant native GetOrderTargetDestructable takes nothing returns destructable",
           "scope": "source.vjass"
       },
        "fnGetOrderTargetItem": {
           "prefix": "fnGetOrderTargetItem",
           "body": "GetOrderTargetItem(${1:nothing})",
           "description": "constant native GetOrderTargetItem takes nothing returns item",
           "scope": "source.vjass"
       },
        "fnGetOrderTargetUnit": {
           "prefix": "fnGetOrderTargetUnit",
           "body": "GetOrderTargetUnit(${1:nothing})",
           "description": "constant native GetOrderTargetUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetSpellAbilityUnit": {
           "prefix": "fnGetSpellAbilityUnit",
           "body": "GetSpellAbilityUnit(${1:nothing})",
           "description": "constant native GetSpellAbilityUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetSpellAbilityId": {
           "prefix": "fnGetSpellAbilityId",
           "body": "GetSpellAbilityId(${1:nothing})",
           "description": "constant native GetSpellAbilityId takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnGetSpellAbility": {
           "prefix": "fnGetSpellAbility",
           "body": "GetSpellAbility(${1:nothing})",
           "description": "constant native GetSpellAbility takes nothing returns ability",
           "scope": "source.vjass"
       },
        "fnGetSpellTargetLoc": {
           "prefix": "fnGetSpellTargetLoc",
           "body": "GetSpellTargetLoc(${1:nothing})",
           "description": "constant native GetSpellTargetLoc takes nothing returns location",
           "scope": "source.vjass"
       },
        "fnGetSpellTargetDestructable": {
           "prefix": "fnGetSpellTargetDestructable",
           "body": "GetSpellTargetDestructable(${1:nothing})",
           "description": "constant native GetSpellTargetDestructable takes nothing returns destructable",
           "scope": "source.vjass"
       },
        "fnGetSpellTargetItem": {
           "prefix": "fnGetSpellTargetItem",
           "body": "GetSpellTargetItem(${1:nothing})",
           "description": "constant native GetSpellTargetItem takes nothing returns item",
           "scope": "source.vjass"
       },
        "fnGetSpellTargetUnit": {
           "prefix": "fnGetSpellTargetUnit",
           "body": "GetSpellTargetUnit(${1:nothing})",
           "description": "constant native GetSpellTargetUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerAllianceChange": {
           "prefix": "fnTriggerRegisterPlayerAllianceChange",
           "body": "TriggerRegisterPlayerAllianceChange(${1:player whichPlayer},${2:trigger whichTrigger},${3:alliancetype whichAlliance})",
           "description": "native TriggerRegisterPlayerAllianceChange takes trigger whichTrigger, player whichPlayer, alliancetype whichAlliance returns event",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerStateEvent": {
           "prefix": "fnTriggerRegisterPlayerStateEvent",
           "body": "TriggerRegisterPlayerStateEvent(${1:real limitval},${2:player whichPlayer},${3:trigger whichTrigger},${4:limitop opcode},${5:playerstate whichState})",
           "description": "native TriggerRegisterPlayerStateEvent takes trigger whichTrigger, player whichPlayer, playerstate whichState, limitop opcode, real limitval returns event",
           "scope": "source.vjass"
       },
        "fnGetEventPlayerState": {
           "prefix": "fnGetEventPlayerState",
           "body": "GetEventPlayerState(${1:nothing})",
           "description": "constant native GetEventPlayerState takes nothing returns playerstate",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterPlayerChatEvent": {
           "prefix": "fnTriggerRegisterPlayerChatEvent",
           "body": "TriggerRegisterPlayerChatEvent(${1:boolean exactMatchOnly},${2:player whichPlayer},${3:trigger whichTrigger},${4:string chatMessageToDetect})",
           "description": "native TriggerRegisterPlayerChatEvent takes trigger whichTrigger, player whichPlayer, string chatMessageToDetect, boolean exactMatchOnly returns event",
           "scope": "source.vjass"
       },
        "fnGetEventPlayerChatString": {
           "prefix": "fnGetEventPlayerChatString",
           "body": "GetEventPlayerChatString(${1:nothing})",
           "description": "constant native GetEventPlayerChatString takes nothing returns string",
           "scope": "source.vjass"
       },
        "fnGetEventPlayerChatStringMatched": {
           "prefix": "fnGetEventPlayerChatStringMatched",
           "body": "GetEventPlayerChatStringMatched(${1:nothing})",
           "description": "constant native GetEventPlayerChatStringMatched takes nothing returns string",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterDeathEvent": {
           "prefix": "fnTriggerRegisterDeathEvent",
           "body": "TriggerRegisterDeathEvent(${1:widget whichWidget},${2:trigger whichTrigger})",
           "description": "native TriggerRegisterDeathEvent takes trigger whichTrigger, widget whichWidget returns event",
           "scope": "source.vjass"
       },
        "fnGetTriggerUnit": {
           "prefix": "fnGetTriggerUnit",
           "body": "GetTriggerUnit(${1:nothing})",
           "description": "constant native GetTriggerUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterUnitStateEvent": {
           "prefix": "fnTriggerRegisterUnitStateEvent",
           "body": "TriggerRegisterUnitStateEvent(${1:unitstate whichState},${2:real limitval},${3:trigger whichTrigger},${4:limitop opcode},${5:unit whichUnit})",
           "description": "native TriggerRegisterUnitStateEvent takes trigger whichTrigger, unit whichUnit, unitstate whichState, limitop opcode, real limitval returns event",
           "scope": "source.vjass"
       },
        "fnGetEventUnitState": {
           "prefix": "fnGetEventUnitState",
           "body": "GetEventUnitState(${1:nothing})",
           "description": "constant native GetEventUnitState takes nothing returns unitstate",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterUnitEvent": {
           "prefix": "fnTriggerRegisterUnitEvent",
           "body": "TriggerRegisterUnitEvent(${1:trigger whichTrigger},${2:unit whichUnit},${3:unitevent whichEvent})",
           "description": "native TriggerRegisterUnitEvent takes trigger whichTrigger, unit whichUnit, unitevent whichEvent returns event",
           "scope": "source.vjass"
       },
        "fnGetEventDamage": {
           "prefix": "fnGetEventDamage",
           "body": "GetEventDamage(${1:nothing})",
           "description": "constant native GetEventDamage takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnGetEventDamageSource": {
           "prefix": "fnGetEventDamageSource",
           "body": "GetEventDamageSource(${1:nothing})",
           "description": "constant native GetEventDamageSource takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnGetEventDetectingPlayer": {
           "prefix": "fnGetEventDetectingPlayer",
           "body": "GetEventDetectingPlayer(${1:nothing})",
           "description": "constant native GetEventDetectingPlayer takes nothing returns player",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterFilterUnitEvent": {
           "prefix": "fnTriggerRegisterFilterUnitEvent",
           "body": "TriggerRegisterFilterUnitEvent(${1:trigger whichTrigger},${2:boolexpr filter},${3:unit whichUnit},${4:unitevent whichEvent})",
           "description": "native TriggerRegisterFilterUnitEvent takes trigger whichTrigger, unit whichUnit, unitevent whichEvent, boolexpr filter returns event",
           "scope": "source.vjass"
       },
        "fnGetEventTargetUnit": {
           "prefix": "fnGetEventTargetUnit",
           "body": "GetEventTargetUnit(${1:nothing})",
           "description": "constant native GetEventTargetUnit takes nothing returns unit",
           "scope": "source.vjass"
       },
        "fnTriggerRegisterUnitInRange": {
           "prefix": "fnTriggerRegisterUnitInRange",
           "body": "TriggerRegisterUnitInRange(${1:real range},${2:trigger whichTrigger},${3:boolexpr filter},${4:unit whichUnit})",
           "description": "native TriggerRegisterUnitInRange takes trigger whichTrigger, unit whichUnit, real range, boolexpr filter returns event",
           "scope": "source.vjass"
       },
        "fnTriggerAddCondition": {
           "prefix": "fnTriggerAddCondition",
           "body": "TriggerAddCondition(${1:trigger whichTrigger},${2:boolexpr condition})",
           "description": "native TriggerAddCondition takes trigger whichTrigger, boolexpr condition returns triggercondition",
           "scope": "source.vjass"
       },
        "fnTriggerRemoveCondition": {
           "prefix": "fnTriggerRemoveCondition",
           "body": "TriggerRemoveCondition(${1:trigger whichTrigger},${2:triggercondition whichCondition})",
           "description": "native TriggerRemoveCondition takes trigger whichTrigger, triggercondition whichCondition returns nothing",
           "scope": "source.vjass"
       },
        "fnTriggerClearConditions": {
           "prefix": "fnTriggerClearConditions",
           "body": "TriggerClearConditions(${1:trigger whichTrigger})",
           "description": "native TriggerClearConditions takes trigger whichTrigger returns nothing",
           "scope": "source.vjass"
       },
        "fnTriggerAddAction": {
           "prefix": "fnTriggerAddAction",
           "body": "TriggerAddAction(${1:code actionFunc},${2:trigger whichTrigger})",
           "description": "native TriggerAddAction takes trigger whichTrigger, code actionFunc returns triggeraction",
           "scope": "source.vjass"
       },
        "fnTriggerRemoveAction": {
           "prefix": "fnTriggerRemoveAction",
           "body": "TriggerRemoveAction(${1:trigger whichTrigger},${2:triggeraction whichAction})",
           "description": "native TriggerRemoveAction takes trigger whichTrigger, triggeraction whichAction returns nothing",
           "scope": "source.vjass"
       },
        "fnTriggerClearActions": {
           "prefix": "fnTriggerClearActions",
           "body": "TriggerClearActions(${1:trigger whichTrigger})",
           "description": "native TriggerClearActions takes trigger whichTrigger returns nothing",
           "scope": "source.vjass"
       },
        "fnTriggerSleepAction": {
           "prefix": "fnTriggerSleepAction",
           "body": "TriggerSleepAction(${1:real timeout})",
           "description": "native TriggerSleepAction takes real timeout returns nothing",
           "scope": "source.vjass"
       },
        "fnTriggerWaitForSound": {
           "prefix": "fnTriggerWaitForSound",
           "body": "TriggerWaitForSound(${1:sound s},${2:real offset})",
           "description": "native TriggerWaitForSound takes sound s, real offset returns nothing",
           "scope": "source.vjass"
       },
        "fnTriggerEvaluate": {
           "prefix": "fnTriggerEvaluate",
           "body": "TriggerEvaluate(${1:trigger whichTrigger})",
           "description": "native TriggerEvaluate takes trigger whichTrigger returns boolean",
           "scope": "source.vjass"
       },
        "fnTriggerExecute": {
           "prefix": "fnTriggerExecute",
           "body": "TriggerExecute(${1:trigger whichTrigger})",
           "description": "native TriggerExecute takes trigger whichTrigger returns nothing",
           "scope": "source.vjass"
       },
        "fnTriggerExecuteWait": {
           "prefix": "fnTriggerExecuteWait",
           "body": "TriggerExecuteWait(${1:trigger whichTrigger})",
           "description": "native TriggerExecuteWait takes trigger whichTrigger returns nothing",
           "scope": "source.vjass"
       },
        "fnTriggerSyncStart": {
           "prefix": "fnTriggerSyncStart",
           "body": "TriggerSyncStart(${1:nothing})",
           "description": "native TriggerSyncStart takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnTriggerSyncReady": {
           "prefix": "fnTriggerSyncReady",
           "body": "TriggerSyncReady(${1:nothing})",
           "description": "native TriggerSyncReady takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnGetWidgetLife": {
           "prefix": "fnGetWidgetLife",
           "body": "GetWidgetLife(${1:widget whichWidget})",
           "description": "native GetWidgetLife takes widget whichWidget returns real",
           "scope": "source.vjass"
       },
        "fnSetWidgetLife": {
           "prefix": "fnSetWidgetLife",
           "body": "SetWidgetLife(${1:real newLife},${2:widget whichWidget})",
           "description": "native SetWidgetLife takes widget whichWidget, real newLife returns nothing",
           "scope": "source.vjass"
       },
        "fnGetWidgetX": {
           "prefix": "fnGetWidgetX",
           "body": "GetWidgetX(${1:widget whichWidget})",
           "description": "native GetWidgetX takes widget whichWidget returns real",
           "scope": "source.vjass"
       },
        "fnGetWidgetY": {
           "prefix": "fnGetWidgetY",
           "body": "GetWidgetY(${1:widget whichWidget})",
           "description": "native GetWidgetY takes widget whichWidget returns real",
           "scope": "source.vjass"
       },
        "fnGetTriggerWidget": {
           "prefix": "fnGetTriggerWidget",
           "body": "GetTriggerWidget(${1:nothing})",
           "description": "constant native GetTriggerWidget takes nothing returns widget",
           "scope": "source.vjass"
       },
        "fnCreateDestructable": {
           "prefix": "fnCreateDestructable",
           "body": "CreateDestructable(${1:real scale},${2:integer variation})",
           "description": "native CreateDestructable takes integer objectid, real x, real y, real face, real scale, integer variation returns destructable",
           "scope": "source.vjass"
       },
        "fnCreateDestructableZ": {
           "prefix": "fnCreateDestructableZ",
           "body": "CreateDestructableZ(${1:real scale},${2:integer variation})",
           "description": "native CreateDestructableZ takes integer objectid, real x, real y, real z, real face, real scale, integer variation returns destructable",
           "scope": "source.vjass"
       },
        "fnCreateDeadDestructable": {
           "prefix": "fnCreateDeadDestructable",
           "body": "CreateDeadDestructable(${1:real scale},${2:integer variation})",
           "description": "native CreateDeadDestructable takes integer objectid, real x, real y, real face, real scale, integer variation returns destructable",
           "scope": "source.vjass"
       },
        "fnCreateDeadDestructableZ": {
           "prefix": "fnCreateDeadDestructableZ",
           "body": "CreateDeadDestructableZ(${1:real scale},${2:integer variation})",
           "description": "native CreateDeadDestructableZ takes integer objectid, real x, real y, real z, real face, real scale, integer variation returns destructable",
           "scope": "source.vjass"
       },
        "fnRemoveDestructable": {
           "prefix": "fnRemoveDestructable",
           "body": "RemoveDestructable(${1:destructable d})",
           "description": "native RemoveDestructable takes destructable d returns nothing",
           "scope": "source.vjass"
       },
        "fnKillDestructable": {
           "prefix": "fnKillDestructable",
           "body": "KillDestructable(${1:destructable d})",
           "description": "native KillDestructable takes destructable d returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDestructableInvulnerable": {
           "prefix": "fnSetDestructableInvulnerable",
           "body": "SetDestructableInvulnerable(${1:boolean flag},${2:destructable d})",
           "description": "native SetDestructableInvulnerable takes destructable d, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnIsDestructableInvulnerable": {
           "prefix": "fnIsDestructableInvulnerable",
           "body": "IsDestructableInvulnerable(${1:destructable d})",
           "description": "native IsDestructableInvulnerable takes destructable d returns boolean",
           "scope": "source.vjass"
       },
        "fnEnumDestructablesInRect": {
           "prefix": "fnEnumDestructablesInRect",
           "body": "EnumDestructablesInRect(${1:code actionFunc},${2:boolexpr filter},${3:rect r})",
           "description": "native EnumDestructablesInRect takes rect r, boolexpr filter, code actionFunc returns nothing",
           "scope": "source.vjass"
       },
        "fnGetDestructableTypeId": {
           "prefix": "fnGetDestructableTypeId",
           "body": "GetDestructableTypeId(${1:destructable d})",
           "description": "native GetDestructableTypeId takes destructable d returns integer",
           "scope": "source.vjass"
       },
        "fnGetDestructableX": {
           "prefix": "fnGetDestructableX",
           "body": "GetDestructableX(${1:destructable d})",
           "description": "native GetDestructableX takes destructable d returns real",
           "scope": "source.vjass"
       },
        "fnGetDestructableY": {
           "prefix": "fnGetDestructableY",
           "body": "GetDestructableY(${1:destructable d})",
           "description": "native GetDestructableY takes destructable d returns real",
           "scope": "source.vjass"
       },
        "fnSetDestructableLife": {
           "prefix": "fnSetDestructableLife",
           "body": "SetDestructableLife(${1:real life},${2:destructable d})",
           "description": "native SetDestructableLife takes destructable d, real life returns nothing",
           "scope": "source.vjass"
       },
        "fnGetDestructableLife": {
           "prefix": "fnGetDestructableLife",
           "body": "GetDestructableLife(${1:destructable d})",
           "description": "native GetDestructableLife takes destructable d returns real",
           "scope": "source.vjass"
       },
        "fnSetDestructableMaxLife": {
           "prefix": "fnSetDestructableMaxLife",
           "body": "SetDestructableMaxLife(${1:real max},${2:destructable d})",
           "description": "native SetDestructableMaxLife takes destructable d, real max returns nothing",
           "scope": "source.vjass"
       },
        "fnGetDestructableMaxLife": {
           "prefix": "fnGetDestructableMaxLife",
           "body": "GetDestructableMaxLife(${1:destructable d})",
           "description": "native GetDestructableMaxLife takes destructable d returns real",
           "scope": "source.vjass"
       },
        "fnDestructableRestoreLife": {
           "prefix": "fnDestructableRestoreLife",
           "body": "DestructableRestoreLife(${1:real life},${2:boolean birth},${3:destructable d})",
           "description": "native DestructableRestoreLife takes destructable d, real life, boolean birth returns nothing",
           "scope": "source.vjass"
       },
        "fnQueueDestructableAnimation": {
           "prefix": "fnQueueDestructableAnimation",
           "body": "QueueDestructableAnimation(${1:string whichAnimation},${2:destructable d})",
           "description": "native QueueDestructableAnimation takes destructable d, string whichAnimation returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDestructableAnimation": {
           "prefix": "fnSetDestructableAnimation",
           "body": "SetDestructableAnimation(${1:string whichAnimation},${2:destructable d})",
           "description": "native SetDestructableAnimation takes destructable d, string whichAnimation returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDestructableAnimationSpeed": {
           "prefix": "fnSetDestructableAnimationSpeed",
           "body": "SetDestructableAnimationSpeed(${1:real speedFactor},${2:destructable d})",
           "description": "native SetDestructableAnimationSpeed takes destructable d, real speedFactor returns nothing",
           "scope": "source.vjass"
       },
        "fnShowDestructable": {
           "prefix": "fnShowDestructable",
           "body": "ShowDestructable(${1:boolean flag},${2:destructable d})",
           "description": "native ShowDestructable takes destructable d, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnGetDestructableOccluderHeight": {
           "prefix": "fnGetDestructableOccluderHeight",
           "body": "GetDestructableOccluderHeight(${1:destructable d})",
           "description": "native GetDestructableOccluderHeight takes destructable d returns real",
           "scope": "source.vjass"
       },
        "fnSetDestructableOccluderHeight": {
           "prefix": "fnSetDestructableOccluderHeight",
           "body": "SetDestructableOccluderHeight(${1:real height},${2:destructable d})",
           "description": "native SetDestructableOccluderHeight takes destructable d, real height returns nothing",
           "scope": "source.vjass"
       },
        "fnGetDestructableName": {
           "prefix": "fnGetDestructableName",
           "body": "GetDestructableName(${1:destructable d})",
           "description": "native GetDestructableName takes destructable d returns string",
           "scope": "source.vjass"
       },
        "fnGetTriggerDestructable": {
           "prefix": "fnGetTriggerDestructable",
           "body": "GetTriggerDestructable(${1:nothing})",
           "description": "constant native GetTriggerDestructable takes nothing returns destructable",
           "scope": "source.vjass"
       },
        "fnCreateItem": {
           "prefix": "fnCreateItem",
           "body": "CreateItem(${1:real y},${2:integer itemid})",
           "description": "native CreateItem takes integer itemid, real x, real y returns item",
           "scope": "source.vjass"
       },
        "fnRemoveItem": {
           "prefix": "fnRemoveItem",
           "body": "RemoveItem(${1:item whichItem})",
           "description": "native RemoveItem takes item whichItem returns nothing",
           "scope": "source.vjass"
       },
        "fnGetItemPlayer": {
           "prefix": "fnGetItemPlayer",
           "body": "GetItemPlayer(${1:item whichItem})",
           "description": "native GetItemPlayer takes item whichItem returns player",
           "scope": "source.vjass"
       },
        "fnGetItemTypeId": {
           "prefix": "fnGetItemTypeId",
           "body": "GetItemTypeId(${1:item i})",
           "description": "native GetItemTypeId takes item i returns integer",
           "scope": "source.vjass"
       },
        "fnGetItemX": {
           "prefix": "fnGetItemX",
           "body": "GetItemX(${1:item i})",
           "description": "native GetItemX takes item i returns real",
           "scope": "source.vjass"
       },
        "fnGetItemY": {
           "prefix": "fnGetItemY",
           "body": "GetItemY(${1:item i})",
           "description": "native GetItemY takes item i returns real",
           "scope": "source.vjass"
       },
        "fnSetItemPosition": {
           "prefix": "fnSetItemPosition",
           "body": "SetItemPosition(${1:real y},${2:item i})",
           "description": "native SetItemPosition takes item i, real x, real y returns nothing",
           "scope": "source.vjass"
       },
        "fnSetItemDropOnDeath": {
           "prefix": "fnSetItemDropOnDeath",
           "body": "SetItemDropOnDeath(${1:item whichItem},${2:boolean flag})",
           "description": "native SetItemDropOnDeath takes item whichItem, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetItemDroppable": {
           "prefix": "fnSetItemDroppable",
           "body": "SetItemDroppable(${1:item i},${2:boolean flag})",
           "description": "native SetItemDroppable takes item i, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetItemPawnable": {
           "prefix": "fnSetItemPawnable",
           "body": "SetItemPawnable(${1:item i},${2:boolean flag})",
           "description": "native SetItemPawnable takes item i, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetItemPlayer": {
           "prefix": "fnSetItemPlayer",
           "body": "SetItemPlayer(${1:item whichItem},${2:boolean changeColor},${3:player whichPlayer})",
           "description": "native SetItemPlayer takes item whichItem, player whichPlayer, boolean changeColor returns nothing",
           "scope": "source.vjass"
       },
        "fnSetItemInvulnerable": {
           "prefix": "fnSetItemInvulnerable",
           "body": "SetItemInvulnerable(${1:item whichItem},${2:boolean flag})",
           "description": "native SetItemInvulnerable takes item whichItem, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnIsItemInvulnerable": {
           "prefix": "fnIsItemInvulnerable",
           "body": "IsItemInvulnerable(${1:item whichItem})",
           "description": "native IsItemInvulnerable takes item whichItem returns boolean",
           "scope": "source.vjass"
       },
        "fnSetItemVisible": {
           "prefix": "fnSetItemVisible",
           "body": "SetItemVisible(${1:item whichItem},${2:boolean show})",
           "description": "native SetItemVisible takes item whichItem, boolean show returns nothing",
           "scope": "source.vjass"
       },
        "fnIsItemVisible": {
           "prefix": "fnIsItemVisible",
           "body": "IsItemVisible(${1:item whichItem})",
           "description": "native IsItemVisible takes item whichItem returns boolean",
           "scope": "source.vjass"
       },
        "fnIsItemOwned": {
           "prefix": "fnIsItemOwned",
           "body": "IsItemOwned(${1:item whichItem})",
           "description": "native IsItemOwned takes item whichItem returns boolean",
           "scope": "source.vjass"
       },
        "fnIsItemPowerup": {
           "prefix": "fnIsItemPowerup",
           "body": "IsItemPowerup(${1:item whichItem})",
           "description": "native IsItemPowerup takes item whichItem returns boolean",
           "scope": "source.vjass"
       },
        "fnIsItemSellable": {
           "prefix": "fnIsItemSellable",
           "body": "IsItemSellable(${1:item whichItem})",
           "description": "native IsItemSellable takes item whichItem returns boolean",
           "scope": "source.vjass"
       },
        "fnIsItemPawnable": {
           "prefix": "fnIsItemPawnable",
           "body": "IsItemPawnable(${1:item whichItem})",
           "description": "native IsItemPawnable takes item whichItem returns boolean",
           "scope": "source.vjass"
       },
        "fnIsItemIdPowerup": {
           "prefix": "fnIsItemIdPowerup",
           "body": "IsItemIdPowerup(${1:integer itemId})",
           "description": "native IsItemIdPowerup takes integer itemId returns boolean",
           "scope": "source.vjass"
       },
        "fnIsItemIdSellable": {
           "prefix": "fnIsItemIdSellable",
           "body": "IsItemIdSellable(${1:integer itemId})",
           "description": "native IsItemIdSellable takes integer itemId returns boolean",
           "scope": "source.vjass"
       },
        "fnIsItemIdPawnable": {
           "prefix": "fnIsItemIdPawnable",
           "body": "IsItemIdPawnable(${1:integer itemId})",
           "description": "native IsItemIdPawnable takes integer itemId returns boolean",
           "scope": "source.vjass"
       },
        "fnEnumItemsInRect": {
           "prefix": "fnEnumItemsInRect",
           "body": "EnumItemsInRect(${1:code actionFunc},${2:boolexpr filter},${3:rect r})",
           "description": "native EnumItemsInRect takes rect r, boolexpr filter, code actionFunc returns nothing",
           "scope": "source.vjass"
       },
        "fnGetItemLevel": {
           "prefix": "fnGetItemLevel",
           "body": "GetItemLevel(${1:item whichItem})",
           "description": "native GetItemLevel takes item whichItem returns integer",
           "scope": "source.vjass"
       },
        "fnGetItemType": {
           "prefix": "fnGetItemType",
           "body": "GetItemType(${1:item whichItem})",
           "description": "native GetItemType takes item whichItem returns itemtype",
           "scope": "source.vjass"
       },
        "fnSetItemDropID": {
           "prefix": "fnSetItemDropID",
           "body": "SetItemDropID(${1:item whichItem},${2:integer unitId})",
           "description": "native SetItemDropID takes item whichItem, integer unitId returns nothing",
           "scope": "source.vjass"
       },
        "fnGetItemName": {
           "prefix": "fnGetItemName",
           "body": "GetItemName(${1:item whichItem})",
           "description": "constant native GetItemName takes item whichItem returns string",
           "scope": "source.vjass"
       },
        "fnGetItemCharges": {
           "prefix": "fnGetItemCharges",
           "body": "GetItemCharges(${1:item whichItem})",
           "description": "native GetItemCharges takes item whichItem returns integer",
           "scope": "source.vjass"
       },
        "fnSetItemCharges": {
           "prefix": "fnSetItemCharges",
           "body": "SetItemCharges(${1:item whichItem},${2:integer charges})",
           "description": "native SetItemCharges takes item whichItem, integer charges returns nothing",
           "scope": "source.vjass"
       },
        "fnGetItemUserData": {
           "prefix": "fnGetItemUserData",
           "body": "GetItemUserData(${1:item whichItem})",
           "description": "native GetItemUserData takes item whichItem returns integer",
           "scope": "source.vjass"
       },
        "fnSetItemUserData": {
           "prefix": "fnSetItemUserData",
           "body": "SetItemUserData(${1:item whichItem},${2:integer data})",
           "description": "native SetItemUserData takes item whichItem, integer data returns nothing",
           "scope": "source.vjass"
       },
        "fnCreateUnit": {
           "prefix": "fnCreateUnit",
           "body": "CreateUnit(${1:real face},${2:player id},${3:integer unitid})",
           "description": "native CreateUnit takes player id, integer unitid, real x, real y, real face returns unit",
           "scope": "source.vjass"
       },
        "fnCreateUnitByName": {
           "prefix": "fnCreateUnitByName",
           "body": "CreateUnitByName(${1:real face},${2:player whichPlayer},${3:string unitname})",
           "description": "native CreateUnitByName takes player whichPlayer, string unitname, real x, real y, real face returns unit",
           "scope": "source.vjass"
       },
        "fnCreateUnitAtLoc": {
           "prefix": "fnCreateUnitAtLoc",
           "body": "CreateUnitAtLoc(${1:real face},${2:player id},${3:location whichLocation},${4:integer unitid})",
           "description": "native CreateUnitAtLoc takes player id, integer unitid, location whichLocation, real face returns unit",
           "scope": "source.vjass"
       },
        "fnCreateUnitAtLocByName": {
           "prefix": "fnCreateUnitAtLocByName",
           "body": "CreateUnitAtLocByName(${1:real face},${2:player id},${3:string unitname},${4:location whichLocation})",
           "description": "native CreateUnitAtLocByName takes player id, string unitname, location whichLocation, real face returns unit",
           "scope": "source.vjass"
       },
        "fnCreateCorpse": {
           "prefix": "fnCreateCorpse",
           "body": "CreateCorpse(${1:real face},${2:player whichPlayer},${3:integer unitid})",
           "description": "native CreateCorpse takes player whichPlayer, integer unitid, real x, real y, real face returns unit",
           "scope": "source.vjass"
       },
        "fnKillUnit": {
           "prefix": "fnKillUnit",
           "body": "KillUnit(${1:unit whichUnit})",
           "description": "native KillUnit takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnRemoveUnit": {
           "prefix": "fnRemoveUnit",
           "body": "RemoveUnit(${1:unit whichUnit})",
           "description": "native RemoveUnit takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnShowUnit": {
           "prefix": "fnShowUnit",
           "body": "ShowUnit(${1:boolean show},${2:unit whichUnit})",
           "description": "native ShowUnit takes unit whichUnit, boolean show returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitState": {
           "prefix": "fnSetUnitState",
           "body": "SetUnitState(${1:unitstate whichUnitState},${2:real newVal},${3:unit whichUnit})",
           "description": "native SetUnitState takes unit whichUnit, unitstate whichUnitState, real newVal returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitX": {
           "prefix": "fnSetUnitX",
           "body": "SetUnitX(${1:real newX},${2:unit whichUnit})",
           "description": "native SetUnitX takes unit whichUnit, real newX returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitY": {
           "prefix": "fnSetUnitY",
           "body": "SetUnitY(${1:real newY},${2:unit whichUnit})",
           "description": "native SetUnitY takes unit whichUnit, real newY returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitPosition": {
           "prefix": "fnSetUnitPosition",
           "body": "SetUnitPosition(${1:real newY},${2:unit whichUnit})",
           "description": "native SetUnitPosition takes unit whichUnit, real newX, real newY returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitPositionLoc": {
           "prefix": "fnSetUnitPositionLoc",
           "body": "SetUnitPositionLoc(${1:location whichLocation},${2:unit whichUnit})",
           "description": "native SetUnitPositionLoc takes unit whichUnit, location whichLocation returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitFacing": {
           "prefix": "fnSetUnitFacing",
           "body": "SetUnitFacing(${1:real facingAngle},${2:unit whichUnit})",
           "description": "native SetUnitFacing takes unit whichUnit, real facingAngle returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitFacingTimed": {
           "prefix": "fnSetUnitFacingTimed",
           "body": "SetUnitFacingTimed(${1:real duration},${2:unit whichUnit})",
           "description": "native SetUnitFacingTimed takes unit whichUnit, real facingAngle, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitMoveSpeed": {
           "prefix": "fnSetUnitMoveSpeed",
           "body": "SetUnitMoveSpeed(${1:real newSpeed},${2:unit whichUnit})",
           "description": "native SetUnitMoveSpeed takes unit whichUnit, real newSpeed returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitFlyHeight": {
           "prefix": "fnSetUnitFlyHeight",
           "body": "SetUnitFlyHeight(${1:real rate},${2:unit whichUnit})",
           "description": "native SetUnitFlyHeight takes unit whichUnit, real newHeight, real rate returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitTurnSpeed": {
           "prefix": "fnSetUnitTurnSpeed",
           "body": "SetUnitTurnSpeed(${1:real newTurnSpeed},${2:unit whichUnit})",
           "description": "native SetUnitTurnSpeed takes unit whichUnit, real newTurnSpeed returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitPropWindow": {
           "prefix": "fnSetUnitPropWindow",
           "body": "SetUnitPropWindow(${1:real newPropWindowAngle},${2:unit whichUnit})",
           "description": "native SetUnitPropWindow takes unit whichUnit, real newPropWindowAngle returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitAcquireRange": {
           "prefix": "fnSetUnitAcquireRange",
           "body": "SetUnitAcquireRange(${1:real newAcquireRange},${2:unit whichUnit})",
           "description": "native SetUnitAcquireRange takes unit whichUnit, real newAcquireRange returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitCreepGuard": {
           "prefix": "fnSetUnitCreepGuard",
           "body": "SetUnitCreepGuard(${1:boolean creepGuard},${2:unit whichUnit})",
           "description": "native SetUnitCreepGuard takes unit whichUnit, boolean creepGuard returns nothing",
           "scope": "source.vjass"
       },
        "fnGetUnitAcquireRange": {
           "prefix": "fnGetUnitAcquireRange",
           "body": "GetUnitAcquireRange(${1:unit whichUnit})",
           "description": "native GetUnitAcquireRange takes unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnGetUnitTurnSpeed": {
           "prefix": "fnGetUnitTurnSpeed",
           "body": "GetUnitTurnSpeed(${1:unit whichUnit})",
           "description": "native GetUnitTurnSpeed takes unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnGetUnitPropWindow": {
           "prefix": "fnGetUnitPropWindow",
           "body": "GetUnitPropWindow(${1:unit whichUnit})",
           "description": "native GetUnitPropWindow takes unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnGetUnitFlyHeight": {
           "prefix": "fnGetUnitFlyHeight",
           "body": "GetUnitFlyHeight(${1:unit whichUnit})",
           "description": "native GetUnitFlyHeight takes unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnGetUnitDefaultAcquireRange": {
           "prefix": "fnGetUnitDefaultAcquireRange",
           "body": "GetUnitDefaultAcquireRange(${1:unit whichUnit})",
           "description": "native GetUnitDefaultAcquireRange takes unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnGetUnitDefaultTurnSpeed": {
           "prefix": "fnGetUnitDefaultTurnSpeed",
           "body": "GetUnitDefaultTurnSpeed(${1:unit whichUnit})",
           "description": "native GetUnitDefaultTurnSpeed takes unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnGetUnitDefaultPropWindow": {
           "prefix": "fnGetUnitDefaultPropWindow",
           "body": "GetUnitDefaultPropWindow(${1:unit whichUnit})",
           "description": "native GetUnitDefaultPropWindow takes unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnGetUnitDefaultFlyHeight": {
           "prefix": "fnGetUnitDefaultFlyHeight",
           "body": "GetUnitDefaultFlyHeight(${1:unit whichUnit})",
           "description": "native GetUnitDefaultFlyHeight takes unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnSetUnitOwner": {
           "prefix": "fnSetUnitOwner",
           "body": "SetUnitOwner(${1:player whichPlayer},${2:boolean changeColor},${3:unit whichUnit})",
           "description": "native SetUnitOwner takes unit whichUnit, player whichPlayer, boolean changeColor returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitColor": {
           "prefix": "fnSetUnitColor",
           "body": "SetUnitColor(${1:playercolor whichColor},${2:unit whichUnit})",
           "description": "native SetUnitColor takes unit whichUnit, playercolor whichColor returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitScale": {
           "prefix": "fnSetUnitScale",
           "body": "SetUnitScale(${1:real scaleZ},${2:unit whichUnit})",
           "description": "native SetUnitScale takes unit whichUnit, real scaleX, real scaleY, real scaleZ returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitTimeScale": {
           "prefix": "fnSetUnitTimeScale",
           "body": "SetUnitTimeScale(${1:real timeScale},${2:unit whichUnit})",
           "description": "native SetUnitTimeScale takes unit whichUnit, real timeScale returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitBlendTime": {
           "prefix": "fnSetUnitBlendTime",
           "body": "SetUnitBlendTime(${1:real blendTime},${2:unit whichUnit})",
           "description": "native SetUnitBlendTime takes unit whichUnit, real blendTime returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitVertexColor": {
           "prefix": "fnSetUnitVertexColor",
           "body": "SetUnitVertexColor(${1:integer alpha},${2:unit whichUnit})",
           "description": "native SetUnitVertexColor takes unit whichUnit, integer red, integer green, integer blue, integer alpha returns nothing",
           "scope": "source.vjass"
       },
        "fnQueueUnitAnimation": {
           "prefix": "fnQueueUnitAnimation",
           "body": "QueueUnitAnimation(${1:string whichAnimation},${2:unit whichUnit})",
           "description": "native QueueUnitAnimation takes unit whichUnit, string whichAnimation returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitAnimation": {
           "prefix": "fnSetUnitAnimation",
           "body": "SetUnitAnimation(${1:string whichAnimation},${2:unit whichUnit})",
           "description": "native SetUnitAnimation takes unit whichUnit, string whichAnimation returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitAnimationByIndex": {
           "prefix": "fnSetUnitAnimationByIndex",
           "body": "SetUnitAnimationByIndex(${1:integer whichAnimation},${2:unit whichUnit})",
           "description": "native SetUnitAnimationByIndex takes unit whichUnit, integer whichAnimation returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitAnimationWithRarity": {
           "prefix": "fnSetUnitAnimationWithRarity",
           "body": "SetUnitAnimationWithRarity(${1:raritycontrol rarity},${2:string whichAnimation},${3:unit whichUnit})",
           "description": "native SetUnitAnimationWithRarity takes unit whichUnit, string whichAnimation, raritycontrol rarity returns nothing",
           "scope": "source.vjass"
       },
        "fnAddUnitAnimationProperties": {
           "prefix": "fnAddUnitAnimationProperties",
           "body": "AddUnitAnimationProperties(${1:boolean add},${2:string animProperties},${3:unit whichUnit})",
           "description": "native AddUnitAnimationProperties takes unit whichUnit, string animProperties, boolean add returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitLookAt": {
           "prefix": "fnSetUnitLookAt",
           "body": "SetUnitLookAt(${1:real offsetZ},${2:string whichBone},${3:unit lookAtTarget})",
           "description": "native SetUnitLookAt takes unit whichUnit, string whichBone, unit lookAtTarget, real offsetX, real offsetY, real offsetZ returns nothing",
           "scope": "source.vjass"
       },
        "fnResetUnitLookAt": {
           "prefix": "fnResetUnitLookAt",
           "body": "ResetUnitLookAt(${1:unit whichUnit})",
           "description": "native ResetUnitLookAt takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitRescuable": {
           "prefix": "fnSetUnitRescuable",
           "body": "SetUnitRescuable(${1:player byWhichPlayer},${2:boolean flag},${3:unit whichUnit})",
           "description": "native SetUnitRescuable takes unit whichUnit, player byWhichPlayer, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitRescueRange": {
           "prefix": "fnSetUnitRescueRange",
           "body": "SetUnitRescueRange(${1:real range},${2:unit whichUnit})",
           "description": "native SetUnitRescueRange takes unit whichUnit, real range returns nothing",
           "scope": "source.vjass"
       },
        "fnSetHeroStr": {
           "prefix": "fnSetHeroStr",
           "body": "SetHeroStr(${1:integer newStr},${2:boolean permanent},${3:unit whichHero})",
           "description": "native SetHeroStr takes unit whichHero, integer newStr, boolean permanent returns nothing",
           "scope": "source.vjass"
       },
        "fnSetHeroAgi": {
           "prefix": "fnSetHeroAgi",
           "body": "SetHeroAgi(${1:integer newAgi},${2:boolean permanent},${3:unit whichHero})",
           "description": "native SetHeroAgi takes unit whichHero, integer newAgi, boolean permanent returns nothing",
           "scope": "source.vjass"
       },
        "fnSetHeroInt": {
           "prefix": "fnSetHeroInt",
           "body": "SetHeroInt(${1:integer newInt},${2:boolean permanent},${3:unit whichHero})",
           "description": "native SetHeroInt takes unit whichHero, integer newInt, boolean permanent returns nothing",
           "scope": "source.vjass"
       },
        "fnGetHeroStr": {
           "prefix": "fnGetHeroStr",
           "body": "GetHeroStr(${1:boolean includeBonuses},${2:unit whichHero})",
           "description": "native GetHeroStr takes unit whichHero, boolean includeBonuses returns integer",
           "scope": "source.vjass"
       },
        "fnGetHeroAgi": {
           "prefix": "fnGetHeroAgi",
           "body": "GetHeroAgi(${1:boolean includeBonuses},${2:unit whichHero})",
           "description": "native GetHeroAgi takes unit whichHero, boolean includeBonuses returns integer",
           "scope": "source.vjass"
       },
        "fnGetHeroInt": {
           "prefix": "fnGetHeroInt",
           "body": "GetHeroInt(${1:boolean includeBonuses},${2:unit whichHero})",
           "description": "native GetHeroInt takes unit whichHero, boolean includeBonuses returns integer",
           "scope": "source.vjass"
       },
        "fnUnitStripHeroLevel": {
           "prefix": "fnUnitStripHeroLevel",
           "body": "UnitStripHeroLevel(${1:integer howManyLevels},${2:unit whichHero})",
           "description": "native UnitStripHeroLevel takes unit whichHero, integer howManyLevels returns boolean",
           "scope": "source.vjass"
       },
        "fnGetHeroXP": {
           "prefix": "fnGetHeroXP",
           "body": "GetHeroXP(${1:unit whichHero})",
           "description": "native GetHeroXP takes unit whichHero returns integer",
           "scope": "source.vjass"
       },
        "fnSetHeroXP": {
           "prefix": "fnSetHeroXP",
           "body": "SetHeroXP(${1:integer newXpVal},${2:boolean showEyeCandy},${3:unit whichHero})",
           "description": "native SetHeroXP takes unit whichHero, integer newXpVal, boolean showEyeCandy returns nothing",
           "scope": "source.vjass"
       },
        "fnGetHeroSkillPoints": {
           "prefix": "fnGetHeroSkillPoints",
           "body": "GetHeroSkillPoints(${1:unit whichHero})",
           "description": "native GetHeroSkillPoints takes unit whichHero returns integer",
           "scope": "source.vjass"
       },
        "fnUnitModifySkillPoints": {
           "prefix": "fnUnitModifySkillPoints",
           "body": "UnitModifySkillPoints(${1:integer skillPointDelta},${2:unit whichHero})",
           "description": "native UnitModifySkillPoints takes unit whichHero, integer skillPointDelta returns boolean",
           "scope": "source.vjass"
       },
        "fnAddHeroXP": {
           "prefix": "fnAddHeroXP",
           "body": "AddHeroXP(${1:integer xpToAdd},${2:boolean showEyeCandy},${3:unit whichHero})",
           "description": "native AddHeroXP takes unit whichHero, integer xpToAdd, boolean showEyeCandy returns nothing",
           "scope": "source.vjass"
       },
        "fnSetHeroLevel": {
           "prefix": "fnSetHeroLevel",
           "body": "SetHeroLevel(${1:integer level},${2:boolean showEyeCandy},${3:unit whichHero})",
           "description": "native SetHeroLevel takes unit whichHero, integer level, boolean showEyeCandy returns nothing",
           "scope": "source.vjass"
       },
        "fnGetHeroLevel": {
           "prefix": "fnGetHeroLevel",
           "body": "GetHeroLevel(${1:unit whichHero})",
           "description": "constant native GetHeroLevel takes unit whichHero returns integer",
           "scope": "source.vjass"
       },
        "fnGetUnitLevel": {
           "prefix": "fnGetUnitLevel",
           "body": "GetUnitLevel(${1:unit whichUnit})",
           "description": "constant native GetUnitLevel takes unit whichUnit returns integer",
           "scope": "source.vjass"
       },
        "fnGetHeroProperName": {
           "prefix": "fnGetHeroProperName",
           "body": "GetHeroProperName(${1:unit whichHero})",
           "description": "native GetHeroProperName takes unit whichHero returns string",
           "scope": "source.vjass"
       },
        "fnSuspendHeroXP": {
           "prefix": "fnSuspendHeroXP",
           "body": "SuspendHeroXP(${1:boolean flag},${2:unit whichHero})",
           "description": "native SuspendHeroXP takes unit whichHero, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnIsSuspendedXP": {
           "prefix": "fnIsSuspendedXP",
           "body": "IsSuspendedXP(${1:unit whichHero})",
           "description": "native IsSuspendedXP takes unit whichHero returns boolean",
           "scope": "source.vjass"
       },
        "fnSelectHeroSkill": {
           "prefix": "fnSelectHeroSkill",
           "body": "SelectHeroSkill(${1:integer abilcode},${2:unit whichHero})",
           "description": "native SelectHeroSkill takes unit whichHero, integer abilcode returns nothing",
           "scope": "source.vjass"
       },
        "fnGetUnitAbilityLevel": {
           "prefix": "fnGetUnitAbilityLevel",
           "body": "GetUnitAbilityLevel(${1:integer abilcode},${2:unit whichUnit})",
           "description": "native GetUnitAbilityLevel takes unit whichUnit, integer abilcode returns integer",
           "scope": "source.vjass"
       },
        "fnDecUnitAbilityLevel": {
           "prefix": "fnDecUnitAbilityLevel",
           "body": "DecUnitAbilityLevel(${1:integer abilcode},${2:unit whichUnit})",
           "description": "native DecUnitAbilityLevel takes unit whichUnit, integer abilcode returns integer",
           "scope": "source.vjass"
       },
        "fnIncUnitAbilityLevel": {
           "prefix": "fnIncUnitAbilityLevel",
           "body": "IncUnitAbilityLevel(${1:integer abilcode},${2:unit whichUnit})",
           "description": "native IncUnitAbilityLevel takes unit whichUnit, integer abilcode returns integer",
           "scope": "source.vjass"
       },
        "fnSetUnitAbilityLevel": {
           "prefix": "fnSetUnitAbilityLevel",
           "body": "SetUnitAbilityLevel(${1:integer level},${2:unit whichUnit})",
           "description": "native SetUnitAbilityLevel takes unit whichUnit, integer abilcode, integer level returns integer",
           "scope": "source.vjass"
       },
        "fnReviveHero": {
           "prefix": "fnReviveHero",
           "body": "ReviveHero(${1:real y},${2:boolean doEyecandy},${3:unit whichHero})",
           "description": "native ReviveHero takes unit whichHero, real x, real y, boolean doEyecandy returns boolean",
           "scope": "source.vjass"
       },
        "fnReviveHeroLoc": {
           "prefix": "fnReviveHeroLoc",
           "body": "ReviveHeroLoc(${1:boolean doEyecandy},${2:location loc},${3:unit whichHero})",
           "description": "native ReviveHeroLoc takes unit whichHero, location loc, boolean doEyecandy returns boolean",
           "scope": "source.vjass"
       },
        "fnSetUnitExploded": {
           "prefix": "fnSetUnitExploded",
           "body": "SetUnitExploded(${1:boolean exploded},${2:unit whichUnit})",
           "description": "native SetUnitExploded takes unit whichUnit, boolean exploded returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitInvulnerable": {
           "prefix": "fnSetUnitInvulnerable",
           "body": "SetUnitInvulnerable(${1:boolean flag},${2:unit whichUnit})",
           "description": "native SetUnitInvulnerable takes unit whichUnit, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnPauseUnit": {
           "prefix": "fnPauseUnit",
           "body": "PauseUnit(${1:boolean flag},${2:unit whichUnit})",
           "description": "native PauseUnit takes unit whichUnit, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnIsUnitPaused": {
           "prefix": "fnIsUnitPaused",
           "body": "IsUnitPaused(${1:unit whichHero})",
           "description": "native IsUnitPaused takes unit whichHero returns boolean",
           "scope": "source.vjass"
       },
        "fnSetUnitPathing": {
           "prefix": "fnSetUnitPathing",
           "body": "SetUnitPathing(${1:boolean flag},${2:unit whichUnit})",
           "description": "native SetUnitPathing takes unit whichUnit, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnClearSelection": {
           "prefix": "fnClearSelection",
           "body": "ClearSelection(${1:nothing})",
           "description": "native ClearSelection takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSelectUnit": {
           "prefix": "fnSelectUnit",
           "body": "SelectUnit(${1:boolean flag},${2:unit whichUnit})",
           "description": "native SelectUnit takes unit whichUnit, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnGetUnitPointValue": {
           "prefix": "fnGetUnitPointValue",
           "body": "GetUnitPointValue(${1:unit whichUnit})",
           "description": "native GetUnitPointValue takes unit whichUnit returns integer",
           "scope": "source.vjass"
       },
        "fnGetUnitPointValueByType": {
           "prefix": "fnGetUnitPointValueByType",
           "body": "GetUnitPointValueByType(${1:integer unitType})",
           "description": "native GetUnitPointValueByType takes integer unitType returns integer",
           "scope": "source.vjass"
       },
        "fnUnitAddItem": {
           "prefix": "fnUnitAddItem",
           "body": "UnitAddItem(${1:item whichItem},${2:unit whichUnit})",
           "description": "native UnitAddItem takes unit whichUnit, item whichItem returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitAddItemById": {
           "prefix": "fnUnitAddItemById",
           "body": "UnitAddItemById(${1:integer itemId},${2:unit whichUnit})",
           "description": "native UnitAddItemById takes unit whichUnit, integer itemId returns item",
           "scope": "source.vjass"
       },
        "fnUnitAddItemToSlotById": {
           "prefix": "fnUnitAddItemToSlotById",
           "body": "UnitAddItemToSlotById(${1:integer itemSlot},${2:unit whichUnit})",
           "description": "native UnitAddItemToSlotById takes unit whichUnit, integer itemId, integer itemSlot returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitRemoveItem": {
           "prefix": "fnUnitRemoveItem",
           "body": "UnitRemoveItem(${1:item whichItem},${2:unit whichUnit})",
           "description": "native UnitRemoveItem takes unit whichUnit, item whichItem returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitRemoveItemFromSlot": {
           "prefix": "fnUnitRemoveItemFromSlot",
           "body": "UnitRemoveItemFromSlot(${1:integer itemSlot},${2:unit whichUnit})",
           "description": "native UnitRemoveItemFromSlot takes unit whichUnit, integer itemSlot returns item",
           "scope": "source.vjass"
       },
        "fnUnitHasItem": {
           "prefix": "fnUnitHasItem",
           "body": "UnitHasItem(${1:item whichItem},${2:unit whichUnit})",
           "description": "native UnitHasItem takes unit whichUnit, item whichItem returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitItemInSlot": {
           "prefix": "fnUnitItemInSlot",
           "body": "UnitItemInSlot(${1:integer itemSlot},${2:unit whichUnit})",
           "description": "native UnitItemInSlot takes unit whichUnit, integer itemSlot returns item",
           "scope": "source.vjass"
       },
        "fnUnitInventorySize": {
           "prefix": "fnUnitInventorySize",
           "body": "UnitInventorySize(${1:unit whichUnit})",
           "description": "native UnitInventorySize takes unit whichUnit returns integer",
           "scope": "source.vjass"
       },
        "fnUnitDropItemPoint": {
           "prefix": "fnUnitDropItemPoint",
           "body": "UnitDropItemPoint(${1:real y},${2:item whichItem},${3:unit whichUnit})",
           "description": "native UnitDropItemPoint takes unit whichUnit, item whichItem, real x, real y returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitDropItemSlot": {
           "prefix": "fnUnitDropItemSlot",
           "body": "UnitDropItemSlot(${1:item whichItem},${2:unit whichUnit},${3:integer slot})",
           "description": "native UnitDropItemSlot takes unit whichUnit, item whichItem, integer slot returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitDropItemTarget": {
           "prefix": "fnUnitDropItemTarget",
           "body": "UnitDropItemTarget(${1:item whichItem},${2:widget target},${3:unit whichUnit})",
           "description": "native UnitDropItemTarget takes unit whichUnit, item whichItem, widget target returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitUseItem": {
           "prefix": "fnUnitUseItem",
           "body": "UnitUseItem(${1:item whichItem},${2:unit whichUnit})",
           "description": "native UnitUseItem takes unit whichUnit, item whichItem returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitUseItemPoint": {
           "prefix": "fnUnitUseItemPoint",
           "body": "UnitUseItemPoint(${1:real y},${2:item whichItem},${3:unit whichUnit})",
           "description": "native UnitUseItemPoint takes unit whichUnit, item whichItem, real x, real y returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitUseItemTarget": {
           "prefix": "fnUnitUseItemTarget",
           "body": "UnitUseItemTarget(${1:item whichItem},${2:widget target},${3:unit whichUnit})",
           "description": "native UnitUseItemTarget takes unit whichUnit, item whichItem, widget target returns boolean",
           "scope": "source.vjass"
       },
        "fnGetUnitX": {
           "prefix": "fnGetUnitX",
           "body": "GetUnitX(${1:unit whichUnit})",
           "description": "constant native GetUnitX takes unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnGetUnitY": {
           "prefix": "fnGetUnitY",
           "body": "GetUnitY(${1:unit whichUnit})",
           "description": "constant native GetUnitY takes unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnGetUnitLoc": {
           "prefix": "fnGetUnitLoc",
           "body": "GetUnitLoc(${1:unit whichUnit})",
           "description": "constant native GetUnitLoc takes unit whichUnit returns location",
           "scope": "source.vjass"
       },
        "fnGetUnitFacing": {
           "prefix": "fnGetUnitFacing",
           "body": "GetUnitFacing(${1:unit whichUnit})",
           "description": "constant native GetUnitFacing takes unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnGetUnitMoveSpeed": {
           "prefix": "fnGetUnitMoveSpeed",
           "body": "GetUnitMoveSpeed(${1:unit whichUnit})",
           "description": "constant native GetUnitMoveSpeed takes unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnGetUnitDefaultMoveSpeed": {
           "prefix": "fnGetUnitDefaultMoveSpeed",
           "body": "GetUnitDefaultMoveSpeed(${1:unit whichUnit})",
           "description": "constant native GetUnitDefaultMoveSpeed takes unit whichUnit returns real",
           "scope": "source.vjass"
       },
        "fnGetUnitState": {
           "prefix": "fnGetUnitState",
           "body": "GetUnitState(${1:unitstate whichUnitState},${2:unit whichUnit})",
           "description": "constant native GetUnitState takes unit whichUnit, unitstate whichUnitState returns real",
           "scope": "source.vjass"
       },
        "fnGetOwningPlayer": {
           "prefix": "fnGetOwningPlayer",
           "body": "GetOwningPlayer(${1:unit whichUnit})",
           "description": "constant native GetOwningPlayer takes unit whichUnit returns player",
           "scope": "source.vjass"
       },
        "fnGetUnitTypeId": {
           "prefix": "fnGetUnitTypeId",
           "body": "GetUnitTypeId(${1:unit whichUnit})",
           "description": "constant native GetUnitTypeId takes unit whichUnit returns integer",
           "scope": "source.vjass"
       },
        "fnGetUnitRace": {
           "prefix": "fnGetUnitRace",
           "body": "GetUnitRace(${1:unit whichUnit})",
           "description": "constant native GetUnitRace takes unit whichUnit returns race",
           "scope": "source.vjass"
       },
        "fnGetUnitName": {
           "prefix": "fnGetUnitName",
           "body": "GetUnitName(${1:unit whichUnit})",
           "description": "constant native GetUnitName takes unit whichUnit returns string",
           "scope": "source.vjass"
       },
        "fnGetUnitFoodUsed": {
           "prefix": "fnGetUnitFoodUsed",
           "body": "GetUnitFoodUsed(${1:unit whichUnit})",
           "description": "constant native GetUnitFoodUsed takes unit whichUnit returns integer",
           "scope": "source.vjass"
       },
        "fnGetUnitFoodMade": {
           "prefix": "fnGetUnitFoodMade",
           "body": "GetUnitFoodMade(${1:unit whichUnit})",
           "description": "constant native GetUnitFoodMade takes unit whichUnit returns integer",
           "scope": "source.vjass"
       },
        "fnGetFoodMade": {
           "prefix": "fnGetFoodMade",
           "body": "GetFoodMade(${1:integer unitId})",
           "description": "constant native GetFoodMade takes integer unitId returns integer",
           "scope": "source.vjass"
       },
        "fnGetFoodUsed": {
           "prefix": "fnGetFoodUsed",
           "body": "GetFoodUsed(${1:integer unitId})",
           "description": "constant native GetFoodUsed takes integer unitId returns integer",
           "scope": "source.vjass"
       },
        "fnSetUnitUseFood": {
           "prefix": "fnSetUnitUseFood",
           "body": "SetUnitUseFood(${1:boolean useFood},${2:unit whichUnit})",
           "description": "native SetUnitUseFood takes unit whichUnit, boolean useFood returns nothing",
           "scope": "source.vjass"
       },
        "fnGetUnitRallyPoint": {
           "prefix": "fnGetUnitRallyPoint",
           "body": "GetUnitRallyPoint(${1:unit whichUnit})",
           "description": "constant native GetUnitRallyPoint takes unit whichUnit returns location",
           "scope": "source.vjass"
       },
        "fnGetUnitRallyUnit": {
           "prefix": "fnGetUnitRallyUnit",
           "body": "GetUnitRallyUnit(${1:unit whichUnit})",
           "description": "constant native GetUnitRallyUnit takes unit whichUnit returns unit",
           "scope": "source.vjass"
       },
        "fnGetUnitRallyDestructable": {
           "prefix": "fnGetUnitRallyDestructable",
           "body": "GetUnitRallyDestructable(${1:unit whichUnit})",
           "description": "constant native GetUnitRallyDestructable takes unit whichUnit returns destructable",
           "scope": "source.vjass"
       },
        "fnIsUnitInGroup": {
           "prefix": "fnIsUnitInGroup",
           "body": "IsUnitInGroup(${1:group whichGroup},${2:unit whichUnit})",
           "description": "constant native IsUnitInGroup takes unit whichUnit, group whichGroup returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitInForce": {
           "prefix": "fnIsUnitInForce",
           "body": "IsUnitInForce(${1:force whichForce},${2:unit whichUnit})",
           "description": "constant native IsUnitInForce takes unit whichUnit, force whichForce returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitOwnedByPlayer": {
           "prefix": "fnIsUnitOwnedByPlayer",
           "body": "IsUnitOwnedByPlayer(${1:player whichPlayer},${2:unit whichUnit})",
           "description": "constant native IsUnitOwnedByPlayer takes unit whichUnit, player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitAlly": {
           "prefix": "fnIsUnitAlly",
           "body": "IsUnitAlly(${1:player whichPlayer},${2:unit whichUnit})",
           "description": "constant native IsUnitAlly takes unit whichUnit, player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitEnemy": {
           "prefix": "fnIsUnitEnemy",
           "body": "IsUnitEnemy(${1:player whichPlayer},${2:unit whichUnit})",
           "description": "constant native IsUnitEnemy takes unit whichUnit, player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitVisible": {
           "prefix": "fnIsUnitVisible",
           "body": "IsUnitVisible(${1:player whichPlayer},${2:unit whichUnit})",
           "description": "constant native IsUnitVisible takes unit whichUnit, player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitDetected": {
           "prefix": "fnIsUnitDetected",
           "body": "IsUnitDetected(${1:player whichPlayer},${2:unit whichUnit})",
           "description": "constant native IsUnitDetected takes unit whichUnit, player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitInvisible": {
           "prefix": "fnIsUnitInvisible",
           "body": "IsUnitInvisible(${1:player whichPlayer},${2:unit whichUnit})",
           "description": "constant native IsUnitInvisible takes unit whichUnit, player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitFogged": {
           "prefix": "fnIsUnitFogged",
           "body": "IsUnitFogged(${1:player whichPlayer},${2:unit whichUnit})",
           "description": "constant native IsUnitFogged takes unit whichUnit, player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitMasked": {
           "prefix": "fnIsUnitMasked",
           "body": "IsUnitMasked(${1:player whichPlayer},${2:unit whichUnit})",
           "description": "constant native IsUnitMasked takes unit whichUnit, player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitSelected": {
           "prefix": "fnIsUnitSelected",
           "body": "IsUnitSelected(${1:player whichPlayer},${2:unit whichUnit})",
           "description": "constant native IsUnitSelected takes unit whichUnit, player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitRace": {
           "prefix": "fnIsUnitRace",
           "body": "IsUnitRace(${1:race whichRace},${2:unit whichUnit})",
           "description": "constant native IsUnitRace takes unit whichUnit, race whichRace returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitType": {
           "prefix": "fnIsUnitType",
           "body": "IsUnitType(${1:unittype whichUnitType},${2:unit whichUnit})",
           "description": "constant native IsUnitType takes unit whichUnit, unittype whichUnitType returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnit": {
           "prefix": "fnIsUnit",
           "body": "IsUnit(${1:unit whichSpecifiedUnit})",
           "description": "constant native IsUnit takes unit whichUnit, unit whichSpecifiedUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitInRange": {
           "prefix": "fnIsUnitInRange",
           "body": "IsUnitInRange(${1:real distance},${2:unit otherUnit})",
           "description": "constant native IsUnitInRange takes unit whichUnit, unit otherUnit, real distance returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitInRangeXY": {
           "prefix": "fnIsUnitInRangeXY",
           "body": "IsUnitInRangeXY(${1:real distance},${2:unit whichUnit})",
           "description": "constant native IsUnitInRangeXY takes unit whichUnit, real x, real y, real distance returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitInRangeLoc": {
           "prefix": "fnIsUnitInRangeLoc",
           "body": "IsUnitInRangeLoc(${1:real distance},${2:location whichLocation},${3:unit whichUnit})",
           "description": "constant native IsUnitInRangeLoc takes unit whichUnit, location whichLocation, real distance returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitHidden": {
           "prefix": "fnIsUnitHidden",
           "body": "IsUnitHidden(${1:unit whichUnit})",
           "description": "constant native IsUnitHidden takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitIllusion": {
           "prefix": "fnIsUnitIllusion",
           "body": "IsUnitIllusion(${1:unit whichUnit})",
           "description": "constant native IsUnitIllusion takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitInTransport": {
           "prefix": "fnIsUnitInTransport",
           "body": "IsUnitInTransport(${1:unit whichTransport})",
           "description": "constant native IsUnitInTransport takes unit whichUnit, unit whichTransport returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitLoaded": {
           "prefix": "fnIsUnitLoaded",
           "body": "IsUnitLoaded(${1:unit whichUnit})",
           "description": "constant native IsUnitLoaded takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnIsHeroUnitId": {
           "prefix": "fnIsHeroUnitId",
           "body": "IsHeroUnitId(${1:integer unitId})",
           "description": "constant native IsHeroUnitId takes integer unitId returns boolean",
           "scope": "source.vjass"
       },
        "fnIsUnitIdType": {
           "prefix": "fnIsUnitIdType",
           "body": "IsUnitIdType(${1:integer unitId},${2:unittype whichUnitType})",
           "description": "constant native IsUnitIdType takes integer unitId, unittype whichUnitType returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitShareVision": {
           "prefix": "fnUnitShareVision",
           "body": "UnitShareVision(${1:player whichPlayer},${2:boolean share},${3:unit whichUnit})",
           "description": "native UnitShareVision takes unit whichUnit, player whichPlayer, boolean share returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitSuspendDecay": {
           "prefix": "fnUnitSuspendDecay",
           "body": "UnitSuspendDecay(${1:boolean suspend},${2:unit whichUnit})",
           "description": "native UnitSuspendDecay takes unit whichUnit, boolean suspend returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitAddType": {
           "prefix": "fnUnitAddType",
           "body": "UnitAddType(${1:unittype whichUnitType},${2:unit whichUnit})",
           "description": "native UnitAddType takes unit whichUnit, unittype whichUnitType returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitRemoveType": {
           "prefix": "fnUnitRemoveType",
           "body": "UnitRemoveType(${1:unittype whichUnitType},${2:unit whichUnit})",
           "description": "native UnitRemoveType takes unit whichUnit, unittype whichUnitType returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitAddAbility": {
           "prefix": "fnUnitAddAbility",
           "body": "UnitAddAbility(${1:integer abilityId},${2:unit whichUnit})",
           "description": "native UnitAddAbility takes unit whichUnit, integer abilityId returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitRemoveAbility": {
           "prefix": "fnUnitRemoveAbility",
           "body": "UnitRemoveAbility(${1:integer abilityId},${2:unit whichUnit})",
           "description": "native UnitRemoveAbility takes unit whichUnit, integer abilityId returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitMakeAbilityPermanent": {
           "prefix": "fnUnitMakeAbilityPermanent",
           "body": "UnitMakeAbilityPermanent(${1:integer abilityId},${2:boolean permanent},${3:unit whichUnit})",
           "description": "native UnitMakeAbilityPermanent takes unit whichUnit, boolean permanent, integer abilityId returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitRemoveBuffs": {
           "prefix": "fnUnitRemoveBuffs",
           "body": "UnitRemoveBuffs(${1:boolean removeNegative},${2:unit whichUnit})",
           "description": "native UnitRemoveBuffs takes unit whichUnit, boolean removePositive, boolean removeNegative returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitRemoveBuffsEx": {
           "prefix": "fnUnitRemoveBuffsEx",
           "body": "UnitRemoveBuffsEx(${1:boolean autoDispel},${2:unit whichUnit})",
           "description": "native UnitRemoveBuffsEx takes unit whichUnit, boolean removePositive, boolean removeNegative, boolean magic, boolean physical, boolean timedLife, boolean aura, boolean autoDispel returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitHasBuffsEx": {
           "prefix": "fnUnitHasBuffsEx",
           "body": "UnitHasBuffsEx(${1:boolean autoDispel},${2:unit whichUnit})",
           "description": "native UnitHasBuffsEx takes unit whichUnit, boolean removePositive, boolean removeNegative, boolean magic, boolean physical, boolean timedLife, boolean aura, boolean autoDispel returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitCountBuffsEx": {
           "prefix": "fnUnitCountBuffsEx",
           "body": "UnitCountBuffsEx(${1:boolean autoDispel},${2:unit whichUnit})",
           "description": "native UnitCountBuffsEx takes unit whichUnit, boolean removePositive, boolean removeNegative, boolean magic, boolean physical, boolean timedLife, boolean aura, boolean autoDispel returns integer",
           "scope": "source.vjass"
       },
        "fnUnitAddSleep": {
           "prefix": "fnUnitAddSleep",
           "body": "UnitAddSleep(${1:boolean add},${2:unit whichUnit})",
           "description": "native UnitAddSleep takes unit whichUnit, boolean add returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitCanSleep": {
           "prefix": "fnUnitCanSleep",
           "body": "UnitCanSleep(${1:unit whichUnit})",
           "description": "native UnitCanSleep takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitAddSleepPerm": {
           "prefix": "fnUnitAddSleepPerm",
           "body": "UnitAddSleepPerm(${1:boolean add},${2:unit whichUnit})",
           "description": "native UnitAddSleepPerm takes unit whichUnit, boolean add returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitCanSleepPerm": {
           "prefix": "fnUnitCanSleepPerm",
           "body": "UnitCanSleepPerm(${1:unit whichUnit})",
           "description": "native UnitCanSleepPerm takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitIsSleeping": {
           "prefix": "fnUnitIsSleeping",
           "body": "UnitIsSleeping(${1:unit whichUnit})",
           "description": "native UnitIsSleeping takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitWakeUp": {
           "prefix": "fnUnitWakeUp",
           "body": "UnitWakeUp(${1:unit whichUnit})",
           "description": "native UnitWakeUp takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitApplyTimedLife": {
           "prefix": "fnUnitApplyTimedLife",
           "body": "UnitApplyTimedLife(${1:real duration},${2:integer buffId},${3:unit whichUnit})",
           "description": "native UnitApplyTimedLife takes unit whichUnit, integer buffId, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitIgnoreAlarm": {
           "prefix": "fnUnitIgnoreAlarm",
           "body": "UnitIgnoreAlarm(${1:boolean flag},${2:unit whichUnit})",
           "description": "native UnitIgnoreAlarm takes unit whichUnit, boolean flag returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitIgnoreAlarmToggled": {
           "prefix": "fnUnitIgnoreAlarmToggled",
           "body": "UnitIgnoreAlarmToggled(${1:unit whichUnit})",
           "description": "native UnitIgnoreAlarmToggled takes unit whichUnit returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitResetCooldown": {
           "prefix": "fnUnitResetCooldown",
           "body": "UnitResetCooldown(${1:unit whichUnit})",
           "description": "native UnitResetCooldown takes unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitSetConstructionProgress": {
           "prefix": "fnUnitSetConstructionProgress",
           "body": "UnitSetConstructionProgress(${1:integer constructionPercentage},${2:unit whichUnit})",
           "description": "native UnitSetConstructionProgress takes unit whichUnit, integer constructionPercentage returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitSetUpgradeProgress": {
           "prefix": "fnUnitSetUpgradeProgress",
           "body": "UnitSetUpgradeProgress(${1:integer upgradePercentage},${2:unit whichUnit})",
           "description": "native UnitSetUpgradeProgress takes unit whichUnit, integer upgradePercentage returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitPauseTimedLife": {
           "prefix": "fnUnitPauseTimedLife",
           "body": "UnitPauseTimedLife(${1:boolean flag},${2:unit whichUnit})",
           "description": "native UnitPauseTimedLife takes unit whichUnit, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitSetUsesAltIcon": {
           "prefix": "fnUnitSetUsesAltIcon",
           "body": "UnitSetUsesAltIcon(${1:boolean flag},${2:unit whichUnit})",
           "description": "native UnitSetUsesAltIcon takes unit whichUnit, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitDamagePoint": {
           "prefix": "fnUnitDamagePoint",
           "body": "UnitDamagePoint(${1:real amount},${2:damagetype damageType},${3:weapontype weaponType},${4:boolean ranged},${5:attacktype attackType},${6:unit whichUnit})",
           "description": "native UnitDamagePoint takes unit whichUnit, real delay, real radius, real x, real y, real amount, boolean attack, boolean ranged, attacktype attackType, damagetype damageType, weapontype weaponType returns boolean",
           "scope": "source.vjass"
       },
        "fnUnitDamageTarget": {
           "prefix": "fnUnitDamageTarget",
           "body": "UnitDamageTarget(${1:real amount},${2:widget target},${3:damagetype damageType},${4:weapontype weaponType},${5:boolean ranged},${6:attacktype attackType},${7:unit whichUnit})",
           "description": "native UnitDamageTarget takes unit whichUnit, widget target, real amount, boolean attack, boolean ranged, attacktype attackType, damagetype damageType, weapontype weaponType returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueImmediateOrder": {
           "prefix": "fnIssueImmediateOrder",
           "body": "IssueImmediateOrder(${1:string order},${2:unit whichUnit})",
           "description": "native IssueImmediateOrder takes unit whichUnit, string order returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueImmediateOrderById": {
           "prefix": "fnIssueImmediateOrderById",
           "body": "IssueImmediateOrderById(${1:integer order},${2:unit whichUnit})",
           "description": "native IssueImmediateOrderById takes unit whichUnit, integer order returns boolean",
           "scope": "source.vjass"
       },
        "fnIssuePointOrder": {
           "prefix": "fnIssuePointOrder",
           "body": "IssuePointOrder(${1:real y},${2:string order},${3:unit whichUnit})",
           "description": "native IssuePointOrder takes unit whichUnit, string order, real x, real y returns boolean",
           "scope": "source.vjass"
       },
        "fnIssuePointOrderLoc": {
           "prefix": "fnIssuePointOrderLoc",
           "body": "IssuePointOrderLoc(${1:string order},${2:unit whichUnit},${3:location whichLocation})",
           "description": "native IssuePointOrderLoc takes unit whichUnit, string order, location whichLocation returns boolean",
           "scope": "source.vjass"
       },
        "fnIssuePointOrderById": {
           "prefix": "fnIssuePointOrderById",
           "body": "IssuePointOrderById(${1:real y},${2:integer order},${3:unit whichUnit})",
           "description": "native IssuePointOrderById takes unit whichUnit, integer order, real x, real y returns boolean",
           "scope": "source.vjass"
       },
        "fnIssuePointOrderByIdLoc": {
           "prefix": "fnIssuePointOrderByIdLoc",
           "body": "IssuePointOrderByIdLoc(${1:integer order},${2:location whichLocation},${3:unit whichUnit})",
           "description": "native IssuePointOrderByIdLoc takes unit whichUnit, integer order, location whichLocation returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueTargetOrder": {
           "prefix": "fnIssueTargetOrder",
           "body": "IssueTargetOrder(${1:widget targetWidget},${2:string order},${3:unit whichUnit})",
           "description": "native IssueTargetOrder takes unit whichUnit, string order, widget targetWidget returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueTargetOrderById": {
           "prefix": "fnIssueTargetOrderById",
           "body": "IssueTargetOrderById(${1:integer order},${2:widget targetWidget},${3:unit whichUnit})",
           "description": "native IssueTargetOrderById takes unit whichUnit, integer order, widget targetWidget returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueInstantPointOrder": {
           "prefix": "fnIssueInstantPointOrder",
           "body": "IssueInstantPointOrder(${1:real y},${2:widget instantTargetWidget},${3:string order},${4:unit whichUnit})",
           "description": "native IssueInstantPointOrder takes unit whichUnit, string order, real x, real y, widget instantTargetWidget returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueInstantPointOrderById": {
           "prefix": "fnIssueInstantPointOrderById",
           "body": "IssueInstantPointOrderById(${1:real y},${2:integer order},${3:widget instantTargetWidget},${4:unit whichUnit})",
           "description": "native IssueInstantPointOrderById takes unit whichUnit, integer order, real x, real y, widget instantTargetWidget returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueInstantTargetOrder": {
           "prefix": "fnIssueInstantTargetOrder",
           "body": "IssueInstantTargetOrder(${1:widget instantTargetWidget},${2:string order},${3:unit whichUnit})",
           "description": "native IssueInstantTargetOrder takes unit whichUnit, string order, widget targetWidget, widget instantTargetWidget returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueInstantTargetOrderById": {
           "prefix": "fnIssueInstantTargetOrderById",
           "body": "IssueInstantTargetOrderById(${1:integer order},${2:widget instantTargetWidget},${3:unit whichUnit})",
           "description": "native IssueInstantTargetOrderById takes unit whichUnit, integer order, widget targetWidget, widget instantTargetWidget returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueBuildOrder": {
           "prefix": "fnIssueBuildOrder",
           "body": "IssueBuildOrder(${1:real y},${2:string unitToBuild},${3:unit whichPeon})",
           "description": "native IssueBuildOrder takes unit whichPeon, string unitToBuild, real x, real y returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueBuildOrderById": {
           "prefix": "fnIssueBuildOrderById",
           "body": "IssueBuildOrderById(${1:real y},${2:integer unitId},${3:unit whichPeon})",
           "description": "native IssueBuildOrderById takes unit whichPeon, integer unitId, real x, real y returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueNeutralImmediateOrder": {
           "prefix": "fnIssueNeutralImmediateOrder",
           "body": "IssueNeutralImmediateOrder(${1:player forWhichPlayer},${2:string unitToBuild},${3:unit neutralStructure})",
           "description": "native IssueNeutralImmediateOrder takes player forWhichPlayer, unit neutralStructure, string unitToBuild returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueNeutralImmediateOrderById": {
           "prefix": "fnIssueNeutralImmediateOrderById",
           "body": "IssueNeutralImmediateOrderById(${1:player forWhichPlayerunit},${2:neutralStructure, integer})",
           "description": "native IssueNeutralImmediateOrderById takes player forWhichPlayer,unit neutralStructure, integer unitId returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueNeutralPointOrder": {
           "prefix": "fnIssueNeutralPointOrder",
           "body": "IssueNeutralPointOrder(${1:unitToBuild, real},${2:player forWhichPlayerunit},${3:x, real},${4:neutralStructure, string})",
           "description": "native IssueNeutralPointOrder takes player forWhichPlayer,unit neutralStructure, string unitToBuild, real x, real y returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueNeutralPointOrderById": {
           "prefix": "fnIssueNeutralPointOrderById",
           "body": "IssueNeutralPointOrderById(${1:unitId, real},${2:player forWhichPlayerunit},${3:x, real},${4:neutralStructure, integer})",
           "description": "native IssueNeutralPointOrderById takes player forWhichPlayer,unit neutralStructure, integer unitId, real x, real y returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueNeutralTargetOrder": {
           "prefix": "fnIssueNeutralTargetOrder",
           "body": "IssueNeutralTargetOrder(${1:unitToBuild, widget},${2:player forWhichPlayerunit},${3:neutralStructure, string})",
           "description": "native IssueNeutralTargetOrder takes player forWhichPlayer,unit neutralStructure, string unitToBuild, widget target returns boolean",
           "scope": "source.vjass"
       },
        "fnIssueNeutralTargetOrderById": {
           "prefix": "fnIssueNeutralTargetOrderById",
           "body": "IssueNeutralTargetOrderById(${1:unitId, widget},${2:player forWhichPlayerunit},${3:neutralStructure, integer})",
           "description": "native IssueNeutralTargetOrderById takes player forWhichPlayer,unit neutralStructure, integer unitId, widget target returns boolean",
           "scope": "source.vjass"
       },
        "fnGetUnitCurrentOrder": {
           "prefix": "fnGetUnitCurrentOrder",
           "body": "GetUnitCurrentOrder(${1:unit whichUnit})",
           "description": "native GetUnitCurrentOrder takes unit whichUnit returns integer",
           "scope": "source.vjass"
       },
        "fnSetResourceAmount": {
           "prefix": "fnSetResourceAmount",
           "body": "SetResourceAmount(${1:integer amount},${2:unit whichUnit})",
           "description": "native SetResourceAmount takes unit whichUnit, integer amount returns nothing",
           "scope": "source.vjass"
       },
        "fnAddResourceAmount": {
           "prefix": "fnAddResourceAmount",
           "body": "AddResourceAmount(${1:integer amount},${2:unit whichUnit})",
           "description": "native AddResourceAmount takes unit whichUnit, integer amount returns nothing",
           "scope": "source.vjass"
       },
        "fnGetResourceAmount": {
           "prefix": "fnGetResourceAmount",
           "body": "GetResourceAmount(${1:unit whichUnit})",
           "description": "native GetResourceAmount takes unit whichUnit returns integer",
           "scope": "source.vjass"
       },
        "fnWaygateGetDestinationX": {
           "prefix": "fnWaygateGetDestinationX",
           "body": "WaygateGetDestinationX(${1:unit waygate})",
           "description": "native WaygateGetDestinationX takes unit waygate returns real",
           "scope": "source.vjass"
       },
        "fnWaygateGetDestinationY": {
           "prefix": "fnWaygateGetDestinationY",
           "body": "WaygateGetDestinationY(${1:unit waygate})",
           "description": "native WaygateGetDestinationY takes unit waygate returns real",
           "scope": "source.vjass"
       },
        "fnWaygateSetDestination": {
           "prefix": "fnWaygateSetDestination",
           "body": "WaygateSetDestination(${1:real y},${2:unit waygate})",
           "description": "native WaygateSetDestination takes unit waygate, real x, real y returns nothing",
           "scope": "source.vjass"
       },
        "fnWaygateActivate": {
           "prefix": "fnWaygateActivate",
           "body": "WaygateActivate(${1:boolean activate},${2:unit waygate})",
           "description": "native WaygateActivate takes unit waygate, boolean activate returns nothing",
           "scope": "source.vjass"
       },
        "fnWaygateIsActive": {
           "prefix": "fnWaygateIsActive",
           "body": "WaygateIsActive(${1:unit waygate})",
           "description": "native WaygateIsActive takes unit waygate returns boolean",
           "scope": "source.vjass"
       },
        "fnAddItemToAllStock": {
           "prefix": "fnAddItemToAllStock",
           "body": "AddItemToAllStock(${1:integer stockMax})",
           "description": "native AddItemToAllStock takes integer itemId, integer currentStock, integer stockMax returns nothing",
           "scope": "source.vjass"
       },
        "fnAddItemToStock": {
           "prefix": "fnAddItemToStock",
           "body": "AddItemToStock(${1:integer stockMax},${2:unit whichUnit})",
           "description": "native AddItemToStock takes unit whichUnit, integer itemId, integer currentStock, integer stockMax returns nothing",
           "scope": "source.vjass"
       },
        "fnAddUnitToAllStock": {
           "prefix": "fnAddUnitToAllStock",
           "body": "AddUnitToAllStock(${1:integer stockMax})",
           "description": "native AddUnitToAllStock takes integer unitId, integer currentStock, integer stockMax returns nothing",
           "scope": "source.vjass"
       },
        "fnAddUnitToStock": {
           "prefix": "fnAddUnitToStock",
           "body": "AddUnitToStock(${1:integer stockMax},${2:unit whichUnit})",
           "description": "native AddUnitToStock takes unit whichUnit, integer unitId, integer currentStock, integer stockMax returns nothing",
           "scope": "source.vjass"
       },
        "fnRemoveItemFromAllStock": {
           "prefix": "fnRemoveItemFromAllStock",
           "body": "RemoveItemFromAllStock(${1:integer itemId})",
           "description": "native RemoveItemFromAllStock takes integer itemId returns nothing",
           "scope": "source.vjass"
       },
        "fnRemoveItemFromStock": {
           "prefix": "fnRemoveItemFromStock",
           "body": "RemoveItemFromStock(${1:integer itemId},${2:unit whichUnit})",
           "description": "native RemoveItemFromStock takes unit whichUnit, integer itemId returns nothing",
           "scope": "source.vjass"
       },
        "fnRemoveUnitFromAllStock": {
           "prefix": "fnRemoveUnitFromAllStock",
           "body": "RemoveUnitFromAllStock(${1:integer unitId})",
           "description": "native RemoveUnitFromAllStock takes integer unitId returns nothing",
           "scope": "source.vjass"
       },
        "fnRemoveUnitFromStock": {
           "prefix": "fnRemoveUnitFromStock",
           "body": "RemoveUnitFromStock(${1:integer unitId},${2:unit whichUnit})",
           "description": "native RemoveUnitFromStock takes unit whichUnit, integer unitId returns nothing",
           "scope": "source.vjass"
       },
        "fnSetAllItemTypeSlots": {
           "prefix": "fnSetAllItemTypeSlots",
           "body": "SetAllItemTypeSlots(${1:integer slots})",
           "description": "native SetAllItemTypeSlots takes integer slots returns nothing",
           "scope": "source.vjass"
       },
        "fnSetAllUnitTypeSlots": {
           "prefix": "fnSetAllUnitTypeSlots",
           "body": "SetAllUnitTypeSlots(${1:integer slots})",
           "description": "native SetAllUnitTypeSlots takes integer slots returns nothing",
           "scope": "source.vjass"
       },
        "fnSetItemTypeSlots": {
           "prefix": "fnSetItemTypeSlots",
           "body": "SetItemTypeSlots(${1:integer slots},${2:unit whichUnit})",
           "description": "native SetItemTypeSlots takes unit whichUnit, integer slots returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitTypeSlots": {
           "prefix": "fnSetUnitTypeSlots",
           "body": "SetUnitTypeSlots(${1:integer slots},${2:unit whichUnit})",
           "description": "native SetUnitTypeSlots takes unit whichUnit, integer slots returns nothing",
           "scope": "source.vjass"
       },
        "fnGetUnitUserData": {
           "prefix": "fnGetUnitUserData",
           "body": "GetUnitUserData(${1:unit whichUnit})",
           "description": "native GetUnitUserData takes unit whichUnit returns integer",
           "scope": "source.vjass"
       },
        "fnSetUnitUserData": {
           "prefix": "fnSetUnitUserData",
           "body": "SetUnitUserData(${1:integer data},${2:unit whichUnit})",
           "description": "native SetUnitUserData takes unit whichUnit, integer data returns nothing",
           "scope": "source.vjass"
       },
        "fnPlayer": {
           "prefix": "fnPlayer",
           "body": "Player(${1:integer number})",
           "description": "constant native Player takes integer number returns player",
           "scope": "source.vjass"
       },
        "fnGetLocalPlayer": {
           "prefix": "fnGetLocalPlayer",
           "body": "GetLocalPlayer(${1:nothing})",
           "description": "constant native GetLocalPlayer takes nothing returns player",
           "scope": "source.vjass"
       },
        "fnIsPlayerAlly": {
           "prefix": "fnIsPlayerAlly",
           "body": "IsPlayerAlly(${1:player otherPlayer})",
           "description": "constant native IsPlayerAlly takes player whichPlayer, player otherPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnIsPlayerEnemy": {
           "prefix": "fnIsPlayerEnemy",
           "body": "IsPlayerEnemy(${1:player otherPlayer})",
           "description": "constant native IsPlayerEnemy takes player whichPlayer, player otherPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnIsPlayerInForce": {
           "prefix": "fnIsPlayerInForce",
           "body": "IsPlayerInForce(${1:player whichPlayer},${2:force whichForce})",
           "description": "constant native IsPlayerInForce takes player whichPlayer, force whichForce returns boolean",
           "scope": "source.vjass"
       },
        "fnIsPlayerObserver": {
           "prefix": "fnIsPlayerObserver",
           "body": "IsPlayerObserver(${1:player whichPlayer})",
           "description": "constant native IsPlayerObserver takes player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnIsVisibleToPlayer": {
           "prefix": "fnIsVisibleToPlayer",
           "body": "IsVisibleToPlayer(${1:real y},${2:player whichPlayer})",
           "description": "constant native IsVisibleToPlayer takes real x, real y, player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnIsLocationVisibleToPlayer": {
           "prefix": "fnIsLocationVisibleToPlayer",
           "body": "IsLocationVisibleToPlayer(${1:player whichPlayer},${2:location whichLocation})",
           "description": "constant native IsLocationVisibleToPlayer takes location whichLocation, player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnIsFoggedToPlayer": {
           "prefix": "fnIsFoggedToPlayer",
           "body": "IsFoggedToPlayer(${1:real y},${2:player whichPlayer})",
           "description": "constant native IsFoggedToPlayer takes real x, real y, player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnIsLocationFoggedToPlayer": {
           "prefix": "fnIsLocationFoggedToPlayer",
           "body": "IsLocationFoggedToPlayer(${1:player whichPlayer},${2:location whichLocation})",
           "description": "constant native IsLocationFoggedToPlayer takes location whichLocation, player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnIsMaskedToPlayer": {
           "prefix": "fnIsMaskedToPlayer",
           "body": "IsMaskedToPlayer(${1:real y},${2:player whichPlayer})",
           "description": "constant native IsMaskedToPlayer takes real x, real y, player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnIsLocationMaskedToPlayer": {
           "prefix": "fnIsLocationMaskedToPlayer",
           "body": "IsLocationMaskedToPlayer(${1:player whichPlayer},${2:location whichLocation})",
           "description": "constant native IsLocationMaskedToPlayer takes location whichLocation, player whichPlayer returns boolean",
           "scope": "source.vjass"
       },
        "fnGetPlayerRace": {
           "prefix": "fnGetPlayerRace",
           "body": "GetPlayerRace(${1:player whichPlayer})",
           "description": "constant native GetPlayerRace takes player whichPlayer returns race",
           "scope": "source.vjass"
       },
        "fnGetPlayerId": {
           "prefix": "fnGetPlayerId",
           "body": "GetPlayerId(${1:player whichPlayer})",
           "description": "constant native GetPlayerId takes player whichPlayer returns integer",
           "scope": "source.vjass"
       },
        "fnGetPlayerUnitCount": {
           "prefix": "fnGetPlayerUnitCount",
           "body": "GetPlayerUnitCount(${1:player whichPlayer},${2:boolean includeIncomplete})",
           "description": "constant native GetPlayerUnitCount takes player whichPlayer, boolean includeIncomplete returns integer",
           "scope": "source.vjass"
       },
        "fnGetPlayerTypedUnitCount": {
           "prefix": "fnGetPlayerTypedUnitCount",
           "body": "GetPlayerTypedUnitCount(${1:player whichPlayer},${2:boolean includeUpgrades},${3:string unitName})",
           "description": "constant native GetPlayerTypedUnitCount takes player whichPlayer, string unitName, boolean includeIncomplete, boolean includeUpgrades returns integer",
           "scope": "source.vjass"
       },
        "fnGetPlayerStructureCount": {
           "prefix": "fnGetPlayerStructureCount",
           "body": "GetPlayerStructureCount(${1:player whichPlayer},${2:boolean includeIncomplete})",
           "description": "constant native GetPlayerStructureCount takes player whichPlayer, boolean includeIncomplete returns integer",
           "scope": "source.vjass"
       },
        "fnGetPlayerState": {
           "prefix": "fnGetPlayerState",
           "body": "GetPlayerState(${1:player whichPlayer},${2:playerstate whichPlayerState})",
           "description": "constant native GetPlayerState takes player whichPlayer, playerstate whichPlayerState returns integer",
           "scope": "source.vjass"
       },
        "fnGetPlayerScore": {
           "prefix": "fnGetPlayerScore",
           "body": "GetPlayerScore(${1:player whichPlayer},${2:playerscore whichPlayerScore})",
           "description": "constant native GetPlayerScore takes player whichPlayer, playerscore whichPlayerScore returns integer",
           "scope": "source.vjass"
       },
        "fnGetPlayerAlliance": {
           "prefix": "fnGetPlayerAlliance",
           "body": "GetPlayerAlliance(${1:player otherPlayer},${2:alliancetype whichAllianceSetting})",
           "description": "constant native GetPlayerAlliance takes player sourcePlayer, player otherPlayer, alliancetype whichAllianceSetting returns boolean",
           "scope": "source.vjass"
       },
        "fnGetPlayerHandicap": {
           "prefix": "fnGetPlayerHandicap",
           "body": "GetPlayerHandicap(${1:player whichPlayer})",
           "description": "constant native GetPlayerHandicap takes player whichPlayer returns real",
           "scope": "source.vjass"
       },
        "fnGetPlayerHandicapXP": {
           "prefix": "fnGetPlayerHandicapXP",
           "body": "GetPlayerHandicapXP(${1:player whichPlayer})",
           "description": "constant native GetPlayerHandicapXP takes player whichPlayer returns real",
           "scope": "source.vjass"
       },
        "fnSetPlayerHandicap": {
           "prefix": "fnSetPlayerHandicap",
           "body": "SetPlayerHandicap(${1:real handicap},${2:player whichPlayer})",
           "description": "constant native SetPlayerHandicap takes player whichPlayer, real handicap returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerHandicapXP": {
           "prefix": "fnSetPlayerHandicapXP",
           "body": "SetPlayerHandicapXP(${1:real handicap},${2:player whichPlayer})",
           "description": "constant native SetPlayerHandicapXP takes player whichPlayer, real handicap returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerTechMaxAllowed": {
           "prefix": "fnSetPlayerTechMaxAllowed",
           "body": "SetPlayerTechMaxAllowed(${1:player whichPlayer},${2:integer maximum})",
           "description": "constant native SetPlayerTechMaxAllowed takes player whichPlayer, integer techid, integer maximum returns nothing",
           "scope": "source.vjass"
       },
        "fnGetPlayerTechMaxAllowed": {
           "prefix": "fnGetPlayerTechMaxAllowed",
           "body": "GetPlayerTechMaxAllowed(${1:player whichPlayer},${2:integer techid})",
           "description": "constant native GetPlayerTechMaxAllowed takes player whichPlayer, integer techid returns integer",
           "scope": "source.vjass"
       },
        "fnAddPlayerTechResearched": {
           "prefix": "fnAddPlayerTechResearched",
           "body": "AddPlayerTechResearched(${1:player whichPlayer},${2:integer levels})",
           "description": "constant native AddPlayerTechResearched takes player whichPlayer, integer techid, integer levels returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerTechResearched": {
           "prefix": "fnSetPlayerTechResearched",
           "body": "SetPlayerTechResearched(${1:player whichPlayer},${2:integer setToLevel})",
           "description": "constant native SetPlayerTechResearched takes player whichPlayer, integer techid, integer setToLevel returns nothing",
           "scope": "source.vjass"
       },
        "fnGetPlayerTechResearched": {
           "prefix": "fnGetPlayerTechResearched",
           "body": "GetPlayerTechResearched(${1:player whichPlayer},${2:boolean specificonly},${3:integer techid})",
           "description": "constant native GetPlayerTechResearched takes player whichPlayer, integer techid, boolean specificonly returns boolean",
           "scope": "source.vjass"
       },
        "fnGetPlayerTechCount": {
           "prefix": "fnGetPlayerTechCount",
           "body": "GetPlayerTechCount(${1:player whichPlayer},${2:boolean specificonly},${3:integer techid})",
           "description": "constant native GetPlayerTechCount takes player whichPlayer, integer techid, boolean specificonly returns integer",
           "scope": "source.vjass"
       },
        "fnSetPlayerUnitsOwner": {
           "prefix": "fnSetPlayerUnitsOwner",
           "body": "SetPlayerUnitsOwner(${1:player whichPlayer},${2:integer newOwner})",
           "description": "native SetPlayerUnitsOwner takes player whichPlayer, integer newOwner returns nothing",
           "scope": "source.vjass"
       },
        "fnCripplePlayer": {
           "prefix": "fnCripplePlayer",
           "body": "CripplePlayer(${1:player whichPlayer},${2:boolean flag},${3:force toWhichPlayers})",
           "description": "native CripplePlayer takes player whichPlayer, force toWhichPlayers, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerAbilityAvailable": {
           "prefix": "fnSetPlayerAbilityAvailable",
           "body": "SetPlayerAbilityAvailable(${1:player whichPlayer},${2:boolean avail},${3:integer abilid})",
           "description": "native SetPlayerAbilityAvailable takes player whichPlayer, integer abilid, boolean avail returns nothing",
           "scope": "source.vjass"
       },
        "fnSetPlayerState": {
           "prefix": "fnSetPlayerState",
           "body": "SetPlayerState(${1:player whichPlayer},${2:integer value},${3:playerstate whichPlayerState})",
           "description": "native SetPlayerState takes player whichPlayer, playerstate whichPlayerState, integer value returns nothing",
           "scope": "source.vjass"
       },
        "fnRemovePlayer": {
           "prefix": "fnRemovePlayer",
           "body": "RemovePlayer(${1:player whichPlayer},${2:playergameresult gameResult})",
           "description": "native RemovePlayer takes player whichPlayer, playergameresult gameResult returns nothing",
           "scope": "source.vjass"
       },
        "fnCachePlayerHeroData": {
           "prefix": "fnCachePlayerHeroData",
           "body": "CachePlayerHeroData(${1:player whichPlayer})",
           "description": "native CachePlayerHeroData takes player whichPlayer returns nothing",
           "scope": "source.vjass"
       },
        "fnSetFogStateRect": {
           "prefix": "fnSetFogStateRect",
           "body": "SetFogStateRect(${1:player forWhichPlayer},${2:boolean useSharedVision},${3:rect where},${4:fogstate whichState})",
           "description": "native SetFogStateRect takes player forWhichPlayer, fogstate whichState, rect where, boolean useSharedVision returns nothing",
           "scope": "source.vjass"
       },
        "fnSetFogStateRadius": {
           "prefix": "fnSetFogStateRadius",
           "body": "SetFogStateRadius(${1:real radius},${2:player forWhichPlayer},${3:boolean useSharedVision},${4:fogstate whichState})",
           "description": "native SetFogStateRadius takes player forWhichPlayer, fogstate whichState, real centerx, real centerY, real radius, boolean useSharedVision returns nothing",
           "scope": "source.vjass"
       },
        "fnSetFogStateRadiusLoc": {
           "prefix": "fnSetFogStateRadiusLoc",
           "body": "SetFogStateRadiusLoc(${1:real radius},${2:player forWhichPlayer},${3:boolean useSharedVision},${4:location center},${5:fogstate whichState})",
           "description": "native SetFogStateRadiusLoc takes player forWhichPlayer, fogstate whichState, location center, real radius, boolean useSharedVision returns nothing",
           "scope": "source.vjass"
       },
        "fnFogMaskEnable": {
           "prefix": "fnFogMaskEnable",
           "body": "FogMaskEnable(${1:boolean enable})",
           "description": "native FogMaskEnable takes boolean enable returns nothing",
           "scope": "source.vjass"
       },
        "fnIsFogMaskEnabled": {
           "prefix": "fnIsFogMaskEnabled",
           "body": "IsFogMaskEnabled(${1:nothing})",
           "description": "native IsFogMaskEnabled takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnFogEnable": {
           "prefix": "fnFogEnable",
           "body": "FogEnable(${1:boolean enable})",
           "description": "native FogEnable takes boolean enable returns nothing",
           "scope": "source.vjass"
       },
        "fnIsFogEnabled": {
           "prefix": "fnIsFogEnabled",
           "body": "IsFogEnabled(${1:nothing})",
           "description": "native IsFogEnabled takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnCreateFogModifierRect": {
           "prefix": "fnCreateFogModifierRect",
           "body": "CreateFogModifierRect(${1:player forWhichPlayer},${2:boolean afterUnits},${3:rect where},${4:fogstate whichState})",
           "description": "native CreateFogModifierRect takes player forWhichPlayer, fogstate whichState, rect where, boolean useSharedVision, boolean afterUnits returns fogmodifier",
           "scope": "source.vjass"
       },
        "fnCreateFogModifierRadius": {
           "prefix": "fnCreateFogModifierRadius",
           "body": "CreateFogModifierRadius(${1:real radius},${2:player forWhichPlayer},${3:boolean afterUnits},${4:fogstate whichState})",
           "description": "native CreateFogModifierRadius takes player forWhichPlayer, fogstate whichState, real centerx, real centerY, real radius, boolean useSharedVision, boolean afterUnits returns fogmodifier",
           "scope": "source.vjass"
       },
        "fnCreateFogModifierRadiusLoc": {
           "prefix": "fnCreateFogModifierRadiusLoc",
           "body": "CreateFogModifierRadiusLoc(${1:real radius},${2:player forWhichPlayer},${3:boolean afterUnits},${4:location center},${5:fogstate whichState})",
           "description": "native CreateFogModifierRadiusLoc takes player forWhichPlayer, fogstate whichState, location center, real radius, boolean useSharedVision, boolean afterUnits returns fogmodifier",
           "scope": "source.vjass"
       },
        "fnDestroyFogModifier": {
           "prefix": "fnDestroyFogModifier",
           "body": "DestroyFogModifier(${1:fogmodifier whichFogModifier})",
           "description": "native DestroyFogModifier takes fogmodifier whichFogModifier returns nothing",
           "scope": "source.vjass"
       },
        "fnFogModifierStart": {
           "prefix": "fnFogModifierStart",
           "body": "FogModifierStart(${1:fogmodifier whichFogModifier})",
           "description": "native FogModifierStart takes fogmodifier whichFogModifier returns nothing",
           "scope": "source.vjass"
       },
        "fnFogModifierStop": {
           "prefix": "fnFogModifierStop",
           "body": "FogModifierStop(${1:fogmodifier whichFogModifier})",
           "description": "native FogModifierStop takes fogmodifier whichFogModifier returns nothing",
           "scope": "source.vjass"
       },
        "fnVersionGet": {
           "prefix": "fnVersionGet",
           "body": "VersionGet(${1:nothing})",
           "description": "native VersionGet takes nothing returns version",
           "scope": "source.vjass"
       },
        "fnVersionCompatible": {
           "prefix": "fnVersionCompatible",
           "body": "VersionCompatible(${1:version whichVersion})",
           "description": "native VersionCompatible takes version whichVersion returns boolean",
           "scope": "source.vjass"
       },
        "fnVersionSupported": {
           "prefix": "fnVersionSupported",
           "body": "VersionSupported(${1:version whichVersion})",
           "description": "native VersionSupported takes version whichVersion returns boolean",
           "scope": "source.vjass"
       },
        "fnEndGame": {
           "prefix": "fnEndGame",
           "body": "EndGame(${1:boolean doScoreScreen})",
           "description": "native EndGame takes boolean doScoreScreen returns nothing",
           "scope": "source.vjass"
       },
        "fnChangeLevel": {
           "prefix": "fnChangeLevel",
           "body": "ChangeLevel(${1:boolean doScoreScreen},${2:string newLevel})",
           "description": "native ChangeLevel takes string newLevel, boolean doScoreScreen returns nothing",
           "scope": "source.vjass"
       },
        "fnRestartGame": {
           "prefix": "fnRestartGame",
           "body": "RestartGame(${1:boolean doScoreScreen})",
           "description": "native RestartGame takes boolean doScoreScreen returns nothing",
           "scope": "source.vjass"
       },
        "fnReloadGame": {
           "prefix": "fnReloadGame",
           "body": "ReloadGame(${1:nothing})",
           "description": "native ReloadGame takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCampaignMenuRace": {
           "prefix": "fnSetCampaignMenuRace",
           "body": "SetCampaignMenuRace(${1:race r})",
           "description": "native SetCampaignMenuRace takes race r returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCampaignMenuRaceEx": {
           "prefix": "fnSetCampaignMenuRaceEx",
           "body": "SetCampaignMenuRaceEx(${1:integer campaignIndex})",
           "description": "native SetCampaignMenuRaceEx takes integer campaignIndex returns nothing",
           "scope": "source.vjass"
       },
        "fnForceCampaignSelectScreen": {
           "prefix": "fnForceCampaignSelectScreen",
           "body": "ForceCampaignSelectScreen(${1:nothing})",
           "description": "native ForceCampaignSelectScreen takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnLoadGame": {
           "prefix": "fnLoadGame",
           "body": "LoadGame(${1:boolean doScoreScreen},${2:string saveFileName})",
           "description": "native LoadGame takes string saveFileName, boolean doScoreScreen returns nothing",
           "scope": "source.vjass"
       },
        "fnSaveGame": {
           "prefix": "fnSaveGame",
           "body": "SaveGame(${1:string saveFileName})",
           "description": "native SaveGame takes string saveFileName returns nothing",
           "scope": "source.vjass"
       },
        "fnRenameSaveDirectory": {
           "prefix": "fnRenameSaveDirectory",
           "body": "RenameSaveDirectory(${1:string destDirName})",
           "description": "native RenameSaveDirectory takes string sourceDirName, string destDirName returns boolean",
           "scope": "source.vjass"
       },
        "fnRemoveSaveDirectory": {
           "prefix": "fnRemoveSaveDirectory",
           "body": "RemoveSaveDirectory(${1:string sourceDirName})",
           "description": "native RemoveSaveDirectory takes string sourceDirName returns boolean",
           "scope": "source.vjass"
       },
        "fnCopySaveGame": {
           "prefix": "fnCopySaveGame",
           "body": "CopySaveGame(${1:string destSaveName})",
           "description": "native CopySaveGame takes string sourceSaveName, string destSaveName returns boolean",
           "scope": "source.vjass"
       },
        "fnSaveGameExists": {
           "prefix": "fnSaveGameExists",
           "body": "SaveGameExists(${1:string saveName})",
           "description": "native SaveGameExists takes string saveName returns boolean",
           "scope": "source.vjass"
       },
        "fnSyncSelections": {
           "prefix": "fnSyncSelections",
           "body": "SyncSelections(${1:nothing})",
           "description": "native SyncSelections takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetFloatGameState": {
           "prefix": "fnSetFloatGameState",
           "body": "SetFloatGameState(${1:real value},${2:fgamestate whichFloatGameState})",
           "description": "native SetFloatGameState takes fgamestate whichFloatGameState, real value returns nothing",
           "scope": "source.vjass"
       },
        "fnGetFloatGameState": {
           "prefix": "fnGetFloatGameState",
           "body": "GetFloatGameState(${1:fgamestate whichFloatGameState})",
           "description": "constant native GetFloatGameState takes fgamestate whichFloatGameState returns real",
           "scope": "source.vjass"
       },
        "fnSetIntegerGameState": {
           "prefix": "fnSetIntegerGameState",
           "body": "SetIntegerGameState(${1:integer value},${2:igamestate whichIntegerGameState})",
           "description": "native SetIntegerGameState takes igamestate whichIntegerGameState, integer value returns nothing",
           "scope": "source.vjass"
       },
        "fnGetIntegerGameState": {
           "prefix": "fnGetIntegerGameState",
           "body": "GetIntegerGameState(${1:igamestate whichIntegerGameState})",
           "description": "constant native GetIntegerGameState takes igamestate whichIntegerGameState returns integer",
           "scope": "source.vjass"
       },
        "fnSetTutorialCleared": {
           "prefix": "fnSetTutorialCleared",
           "body": "SetTutorialCleared(${1:boolean cleared})",
           "description": "native SetTutorialCleared takes boolean cleared returns nothing",
           "scope": "source.vjass"
       },
        "fnSetMissionAvailable": {
           "prefix": "fnSetMissionAvailable",
           "body": "SetMissionAvailable(${1:integer missionNumber},${2:boolean available})",
           "description": "native SetMissionAvailable takes integer campaignNumber, integer missionNumber, boolean available returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCampaignAvailable": {
           "prefix": "fnSetCampaignAvailable",
           "body": "SetCampaignAvailable(${1:integer campaignNumber},${2:boolean available})",
           "description": "native SetCampaignAvailable takes integer campaignNumber, boolean available returns nothing",
           "scope": "source.vjass"
       },
        "fnSetOpCinematicAvailable": {
           "prefix": "fnSetOpCinematicAvailable",
           "body": "SetOpCinematicAvailable(${1:integer campaignNumber},${2:boolean available})",
           "description": "native SetOpCinematicAvailable takes integer campaignNumber, boolean available returns nothing",
           "scope": "source.vjass"
       },
        "fnSetEdCinematicAvailable": {
           "prefix": "fnSetEdCinematicAvailable",
           "body": "SetEdCinematicAvailable(${1:integer campaignNumber},${2:boolean available})",
           "description": "native SetEdCinematicAvailable takes integer campaignNumber, boolean available returns nothing",
           "scope": "source.vjass"
       },
        "fnGetDefaultDifficulty": {
           "prefix": "fnGetDefaultDifficulty",
           "body": "GetDefaultDifficulty(${1:nothing})",
           "description": "native GetDefaultDifficulty takes nothing returns gamedifficulty",
           "scope": "source.vjass"
       },
        "fnSetDefaultDifficulty": {
           "prefix": "fnSetDefaultDifficulty",
           "body": "SetDefaultDifficulty(${1:gamedifficulty g})",
           "description": "native SetDefaultDifficulty takes gamedifficulty g returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCustomCampaignButtonVisible": {
           "prefix": "fnSetCustomCampaignButtonVisible",
           "body": "SetCustomCampaignButtonVisible(${1:integer whichButton},${2:boolean visible})",
           "description": "native SetCustomCampaignButtonVisible takes integer whichButton, boolean visible returns nothing",
           "scope": "source.vjass"
       },
        "fnGetCustomCampaignButtonVisible": {
           "prefix": "fnGetCustomCampaignButtonVisible",
           "body": "GetCustomCampaignButtonVisible(${1:integer whichButton})",
           "description": "native GetCustomCampaignButtonVisible takes integer whichButton returns boolean",
           "scope": "source.vjass"
       },
        "fnDoNotSaveReplay": {
           "prefix": "fnDoNotSaveReplay",
           "body": "DoNotSaveReplay(${1:nothing})",
           "description": "native DoNotSaveReplay takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnDialogCreate": {
           "prefix": "fnDialogCreate",
           "body": "DialogCreate(${1:nothing})",
           "description": "native DialogCreate takes nothing returns dialog",
           "scope": "source.vjass"
       },
        "fnDialogDestroy": {
           "prefix": "fnDialogDestroy",
           "body": "DialogDestroy(${1:dialog whichDialog})",
           "description": "native DialogDestroy takes dialog whichDialog returns nothing",
           "scope": "source.vjass"
       },
        "fnDialogClear": {
           "prefix": "fnDialogClear",
           "body": "DialogClear(${1:dialog whichDialog})",
           "description": "native DialogClear takes dialog whichDialog returns nothing",
           "scope": "source.vjass"
       },
        "fnDialogSetMessage": {
           "prefix": "fnDialogSetMessage",
           "body": "DialogSetMessage(${1:string messageText},${2:dialog whichDialog})",
           "description": "native DialogSetMessage takes dialog whichDialog, string messageText returns nothing",
           "scope": "source.vjass"
       },
        "fnDialogAddButton": {
           "prefix": "fnDialogAddButton",
           "body": "DialogAddButton(${1:integer hotkey},${2:string buttonText},${3:dialog whichDialog})",
           "description": "native DialogAddButton takes dialog whichDialog, string buttonText, integer hotkey returns button",
           "scope": "source.vjass"
       },
        "fnDialogAddQuitButton": {
           "prefix": "fnDialogAddQuitButton",
           "body": "DialogAddQuitButton(${1:integer hotkey},${2:boolean doScoreScreen},${3:string buttonText},${4:dialog whichDialog})",
           "description": "native DialogAddQuitButton takes dialog whichDialog, boolean doScoreScreen, string buttonText, integer hotkey returns button",
           "scope": "source.vjass"
       },
        "fnDialogDisplay": {
           "prefix": "fnDialogDisplay",
           "body": "DialogDisplay(${1:player whichPlayer},${2:boolean flag},${3:dialog whichDialog})",
           "description": "native DialogDisplay takes player whichPlayer, dialog whichDialog, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnReloadGameCachesFromDisk": {
           "prefix": "fnReloadGameCachesFromDisk",
           "body": "ReloadGameCachesFromDisk(${1:nothing})",
           "description": "native ReloadGameCachesFromDisk takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnInitGameCache": {
           "prefix": "fnInitGameCache",
           "body": "InitGameCache(${1:string campaignFile})",
           "description": "native InitGameCache takes string campaignFile returns gamecache",
           "scope": "source.vjass"
       },
        "fnSaveGameCache": {
           "prefix": "fnSaveGameCache",
           "body": "SaveGameCache(${1:gamecache whichCache})",
           "description": "native SaveGameCache takes gamecache whichCache returns boolean",
           "scope": "source.vjass"
       },
        "fnSyncStoredInteger": {
           "prefix": "fnSyncStoredInteger",
           "body": "SyncStoredInteger(${1:gamecache cache},${2:string key})",
           "description": "native SyncStoredInteger takes gamecache cache, string missionKey, string key returns nothing",
           "scope": "source.vjass"
       },
        "fnSyncStoredReal": {
           "prefix": "fnSyncStoredReal",
           "body": "SyncStoredReal(${1:gamecache cache},${2:string key})",
           "description": "native SyncStoredReal takes gamecache cache, string missionKey, string key returns nothing",
           "scope": "source.vjass"
       },
        "fnSyncStoredBoolean": {
           "prefix": "fnSyncStoredBoolean",
           "body": "SyncStoredBoolean(${1:gamecache cache},${2:string key})",
           "description": "native SyncStoredBoolean takes gamecache cache, string missionKey, string key returns nothing",
           "scope": "source.vjass"
       },
        "fnSyncStoredUnit": {
           "prefix": "fnSyncStoredUnit",
           "body": "SyncStoredUnit(${1:gamecache cache},${2:string key})",
           "description": "native SyncStoredUnit takes gamecache cache, string missionKey, string key returns nothing",
           "scope": "source.vjass"
       },
        "fnSyncStoredString": {
           "prefix": "fnSyncStoredString",
           "body": "SyncStoredString(${1:gamecache cache},${2:string key})",
           "description": "native SyncStoredString takes gamecache cache, string missionKey, string key returns nothing",
           "scope": "source.vjass"
       },
        "fnInitHashtable": {
           "prefix": "fnInitHashtable",
           "body": "InitHashtable(${1:nothing})",
           "description": "native InitHashtable takes nothing returns hashtable",
           "scope": "source.vjass"
       },
        "fnLoadBoolean": {
           "prefix": "fnLoadBoolean",
           "body": "LoadBoolean(${1:integer childKey},${2:hashtable table})",
           "description": "native LoadBoolean takes hashtable table, integer parentKey, integer childKey returns boolean",
           "scope": "source.vjass"
       },
        "fnHaveSavedString": {
           "prefix": "fnHaveSavedString",
           "body": "HaveSavedString(${1:integer childKey},${2:hashtable table})",
           "description": "native HaveSavedString takes hashtable table, integer parentKey, integer childKey returns boolean",
           "scope": "source.vjass"
       },
        "fnGetRandomInt": {
           "prefix": "fnGetRandomInt",
           "body": "GetRandomInt(${1:integer highBound})",
           "description": "native GetRandomInt takes integer lowBound, integer highBound returns integer",
           "scope": "source.vjass"
       },
        "fnGetRandomReal": {
           "prefix": "fnGetRandomReal",
           "body": "GetRandomReal(${1:real highBound})",
           "description": "native GetRandomReal takes real lowBound, real highBound returns real",
           "scope": "source.vjass"
       },
        "fnCreateUnitPool": {
           "prefix": "fnCreateUnitPool",
           "body": "CreateUnitPool(${1:nothing})",
           "description": "native CreateUnitPool takes nothing returns unitpool",
           "scope": "source.vjass"
       },
        "fnDestroyUnitPool": {
           "prefix": "fnDestroyUnitPool",
           "body": "DestroyUnitPool(${1:unitpool whichPool})",
           "description": "native DestroyUnitPool takes unitpool whichPool returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitPoolAddUnitType": {
           "prefix": "fnUnitPoolAddUnitType",
           "body": "UnitPoolAddUnitType(${1:real weight},${2:integer unitId},${3:unitpool whichPool})",
           "description": "native UnitPoolAddUnitType takes unitpool whichPool, integer unitId, real weight returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitPoolRemoveUnitType": {
           "prefix": "fnUnitPoolRemoveUnitType",
           "body": "UnitPoolRemoveUnitType(${1:integer unitId},${2:unitpool whichPool})",
           "description": "native UnitPoolRemoveUnitType takes unitpool whichPool, integer unitId returns nothing",
           "scope": "source.vjass"
       },
        "fnPlaceRandomUnit": {
           "prefix": "fnPlaceRandomUnit",
           "body": "PlaceRandomUnit(${1:real facing},${2:player forWhichPlayer},${3:unitpool whichPool})",
           "description": "native PlaceRandomUnit takes unitpool whichPool, player forWhichPlayer, real x, real y, real facing returns unit",
           "scope": "source.vjass"
       },
        "fnCreateItemPool": {
           "prefix": "fnCreateItemPool",
           "body": "CreateItemPool(${1:nothing})",
           "description": "native CreateItemPool takes nothing returns itempool",
           "scope": "source.vjass"
       },
        "fnDestroyItemPool": {
           "prefix": "fnDestroyItemPool",
           "body": "DestroyItemPool(${1:itempool whichItemPool})",
           "description": "native DestroyItemPool takes itempool whichItemPool returns nothing",
           "scope": "source.vjass"
       },
        "fnItemPoolAddItemType": {
           "prefix": "fnItemPoolAddItemType",
           "body": "ItemPoolAddItemType(${1:real weight},${2:integer itemId},${3:itempool whichItemPool})",
           "description": "native ItemPoolAddItemType takes itempool whichItemPool, integer itemId, real weight returns nothing",
           "scope": "source.vjass"
       },
        "fnItemPoolRemoveItemType": {
           "prefix": "fnItemPoolRemoveItemType",
           "body": "ItemPoolRemoveItemType(${1:integer itemId},${2:itempool whichItemPool})",
           "description": "native ItemPoolRemoveItemType takes itempool whichItemPool, integer itemId returns nothing",
           "scope": "source.vjass"
       },
        "fnPlaceRandomItem": {
           "prefix": "fnPlaceRandomItem",
           "body": "PlaceRandomItem(${1:real y},${2:itempool whichItemPool})",
           "description": "native PlaceRandomItem takes itempool whichItemPool, real x, real y returns item",
           "scope": "source.vjass"
       },
        "fnChooseRandomCreep": {
           "prefix": "fnChooseRandomCreep",
           "body": "ChooseRandomCreep(${1:integer level})",
           "description": "native ChooseRandomCreep takes integer level returns integer",
           "scope": "source.vjass"
       },
        "fnChooseRandomNPBuilding": {
           "prefix": "fnChooseRandomNPBuilding",
           "body": "ChooseRandomNPBuilding(${1:nothing})",
           "description": "native ChooseRandomNPBuilding takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnChooseRandomItem": {
           "prefix": "fnChooseRandomItem",
           "body": "ChooseRandomItem(${1:integer level})",
           "description": "native ChooseRandomItem takes integer level returns integer",
           "scope": "source.vjass"
       },
        "fnChooseRandomItemEx": {
           "prefix": "fnChooseRandomItemEx",
           "body": "ChooseRandomItemEx(${1:integer level},${2:itemtype whichType})",
           "description": "native ChooseRandomItemEx takes itemtype whichType, integer level returns integer",
           "scope": "source.vjass"
       },
        "fnSetRandomSeed": {
           "prefix": "fnSetRandomSeed",
           "body": "SetRandomSeed(${1:integer seed})",
           "description": "native SetRandomSeed takes integer seed returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTerrainFog": {
           "prefix": "fnSetTerrainFog",
           "body": "SetTerrainFog(${1:real e})",
           "description": "native SetTerrainFog takes real a, real b, real c, real d, real e returns nothing",
           "scope": "source.vjass"
       },
        "fnResetTerrainFog": {
           "prefix": "fnResetTerrainFog",
           "body": "ResetTerrainFog(${1:nothing})",
           "description": "native ResetTerrainFog takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUnitFog": {
           "prefix": "fnSetUnitFog",
           "body": "SetUnitFog(${1:real e})",
           "description": "native SetUnitFog takes real a, real b, real c, real d, real e returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTerrainFogEx": {
           "prefix": "fnSetTerrainFogEx",
           "body": "SetTerrainFogEx(${1:real blue},${2:integer style})",
           "description": "native SetTerrainFogEx takes integer style, real zstart, real zend, real density, real red, real green, real blue returns nothing",
           "scope": "source.vjass"
       },
        "fnDisplayTextToPlayer": {
           "prefix": "fnDisplayTextToPlayer",
           "body": "DisplayTextToPlayer(${1:real y},${2:player toPlayer},${3:string message})",
           "description": "native DisplayTextToPlayer takes player toPlayer, real x, real y, string message returns nothing",
           "scope": "source.vjass"
       },
        "fnDisplayTimedTextToPlayer": {
           "prefix": "fnDisplayTimedTextToPlayer",
           "body": "DisplayTimedTextToPlayer(${1:real duration},${2:player toPlayer},${3:string message})",
           "description": "native DisplayTimedTextToPlayer takes player toPlayer, real x, real y, real duration, string message returns nothing",
           "scope": "source.vjass"
       },
        "fnDisplayTimedTextFromPlayer": {
           "prefix": "fnDisplayTimedTextFromPlayer",
           "body": "DisplayTimedTextFromPlayer(${1:real duration},${2:player toPlayer},${3:string message})",
           "description": "native DisplayTimedTextFromPlayer takes player toPlayer, real x, real y, real duration, string message returns nothing",
           "scope": "source.vjass"
       },
        "fnClearTextMessages": {
           "prefix": "fnClearTextMessages",
           "body": "ClearTextMessages(${1:nothing})",
           "description": "native ClearTextMessages takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDayNightModels": {
           "prefix": "fnSetDayNightModels",
           "body": "SetDayNightModels(${1:string unitDNCFile})",
           "description": "native SetDayNightModels takes string terrainDNCFile, string unitDNCFile returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSkyModel": {
           "prefix": "fnSetSkyModel",
           "body": "SetSkyModel(${1:string skyModelFile})",
           "description": "native SetSkyModel takes string skyModelFile returns nothing",
           "scope": "source.vjass"
       },
        "fnEnableUserControl": {
           "prefix": "fnEnableUserControl",
           "body": "EnableUserControl(${1:boolean b})",
           "description": "native EnableUserControl takes boolean b returns nothing",
           "scope": "source.vjass"
       },
        "fnEnableUserUI": {
           "prefix": "fnEnableUserUI",
           "body": "EnableUserUI(${1:boolean b})",
           "description": "native EnableUserUI takes boolean b returns nothing",
           "scope": "source.vjass"
       },
        "fnSuspendTimeOfDay": {
           "prefix": "fnSuspendTimeOfDay",
           "body": "SuspendTimeOfDay(${1:boolean b})",
           "description": "native SuspendTimeOfDay takes boolean b returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTimeOfDayScale": {
           "prefix": "fnSetTimeOfDayScale",
           "body": "SetTimeOfDayScale(${1:real r})",
           "description": "native SetTimeOfDayScale takes real r returns nothing",
           "scope": "source.vjass"
       },
        "fnGetTimeOfDayScale": {
           "prefix": "fnGetTimeOfDayScale",
           "body": "GetTimeOfDayScale(${1:nothing})",
           "description": "native GetTimeOfDayScale takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnShowInterface": {
           "prefix": "fnShowInterface",
           "body": "ShowInterface(${1:real fadeDuration},${2:boolean flag})",
           "description": "native ShowInterface takes boolean flag, real fadeDuration returns nothing",
           "scope": "source.vjass"
       },
        "fnPauseGame": {
           "prefix": "fnPauseGame",
           "body": "PauseGame(${1:boolean flag})",
           "description": "native PauseGame takes boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnUnitAddIndicator": {
           "prefix": "fnUnitAddIndicator",
           "body": "UnitAddIndicator(${1:integer alpha},${2:unit whichUnit})",
           "description": "native UnitAddIndicator takes unit whichUnit, integer red, integer green, integer blue, integer alpha returns nothing",
           "scope": "source.vjass"
       },
        "fnAddIndicator": {
           "prefix": "fnAddIndicator",
           "body": "AddIndicator(${1:integer alpha},${2:widget whichWidget})",
           "description": "native AddIndicator takes widget whichWidget, integer red, integer green, integer blue, integer alpha returns nothing",
           "scope": "source.vjass"
       },
        "fnPingMinimap": {
           "prefix": "fnPingMinimap",
           "body": "PingMinimap(${1:real duration})",
           "description": "native PingMinimap takes real x, real y, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnPingMinimapEx": {
           "prefix": "fnPingMinimapEx",
           "body": "PingMinimapEx(${1:real duration},${2:integer blue},${3:boolean extraEffects})",
           "description": "native PingMinimapEx takes real x, real y, real duration, integer red, integer green, integer blue, boolean extraEffects returns nothing",
           "scope": "source.vjass"
       },
        "fnEnableOcclusion": {
           "prefix": "fnEnableOcclusion",
           "body": "EnableOcclusion(${1:boolean flag})",
           "description": "native EnableOcclusion takes boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetIntroShotText": {
           "prefix": "fnSetIntroShotText",
           "body": "SetIntroShotText(${1:string introText})",
           "description": "native SetIntroShotText takes string introText returns nothing",
           "scope": "source.vjass"
       },
        "fnSetIntroShotModel": {
           "prefix": "fnSetIntroShotModel",
           "body": "SetIntroShotModel(${1:string introModelPath})",
           "description": "native SetIntroShotModel takes string introModelPath returns nothing",
           "scope": "source.vjass"
       },
        "fnEnableWorldFogBoundary": {
           "prefix": "fnEnableWorldFogBoundary",
           "body": "EnableWorldFogBoundary(${1:boolean b})",
           "description": "native EnableWorldFogBoundary takes boolean b returns nothing",
           "scope": "source.vjass"
       },
        "fnPlayModelCinematic": {
           "prefix": "fnPlayModelCinematic",
           "body": "PlayModelCinematic(${1:string modelName})",
           "description": "native PlayModelCinematic takes string modelName returns nothing",
           "scope": "source.vjass"
       },
        "fnPlayCinematic": {
           "prefix": "fnPlayCinematic",
           "body": "PlayCinematic(${1:string movieName})",
           "description": "native PlayCinematic takes string movieName returns nothing",
           "scope": "source.vjass"
       },
        "fnForceUIKey": {
           "prefix": "fnForceUIKey",
           "body": "ForceUIKey(${1:string key})",
           "description": "native ForceUIKey takes string key returns nothing",
           "scope": "source.vjass"
       },
        "fnForceUICancel": {
           "prefix": "fnForceUICancel",
           "body": "ForceUICancel(${1:nothing})",
           "description": "native ForceUICancel takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnDisplayLoadDialog": {
           "prefix": "fnDisplayLoadDialog",
           "body": "DisplayLoadDialog(${1:nothing})",
           "description": "native DisplayLoadDialog takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetAltMinimapIcon": {
           "prefix": "fnSetAltMinimapIcon",
           "body": "SetAltMinimapIcon(${1:string iconPath})",
           "description": "native SetAltMinimapIcon takes string iconPath returns nothing",
           "scope": "source.vjass"
       },
        "fnDisableRestartMission": {
           "prefix": "fnDisableRestartMission",
           "body": "DisableRestartMission(${1:boolean flag})",
           "description": "native DisableRestartMission takes boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnCreateTextTag": {
           "prefix": "fnCreateTextTag",
           "body": "CreateTextTag(${1:nothing})",
           "description": "native CreateTextTag takes nothing returns texttag",
           "scope": "source.vjass"
       },
        "fnDestroyTextTag": {
           "prefix": "fnDestroyTextTag",
           "body": "DestroyTextTag(${1:texttag t})",
           "description": "native DestroyTextTag takes texttag t returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagText": {
           "prefix": "fnSetTextTagText",
           "body": "SetTextTagText(${1:texttag t},${2:real height},${3:string s})",
           "description": "native SetTextTagText takes texttag t, string s, real height returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagPos": {
           "prefix": "fnSetTextTagPos",
           "body": "SetTextTagPos(${1:texttag t},${2:real heightOffset})",
           "description": "native SetTextTagPos takes texttag t, real x, real y, real heightOffset returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagPosUnit": {
           "prefix": "fnSetTextTagPosUnit",
           "body": "SetTextTagPosUnit(${1:texttag t},${2:real heightOffset},${3:unit whichUnit})",
           "description": "native SetTextTagPosUnit takes texttag t, unit whichUnit, real heightOffset returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagColor": {
           "prefix": "fnSetTextTagColor",
           "body": "SetTextTagColor(${1:texttag t},${2:integer alpha})",
           "description": "native SetTextTagColor takes texttag t, integer red, integer green, integer blue, integer alpha returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagVelocity": {
           "prefix": "fnSetTextTagVelocity",
           "body": "SetTextTagVelocity(${1:texttag t},${2:real yvel})",
           "description": "native SetTextTagVelocity takes texttag t, real xvel, real yvel returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagVisibility": {
           "prefix": "fnSetTextTagVisibility",
           "body": "SetTextTagVisibility(${1:texttag t},${2:boolean flag})",
           "description": "native SetTextTagVisibility takes texttag t, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagSuspended": {
           "prefix": "fnSetTextTagSuspended",
           "body": "SetTextTagSuspended(${1:texttag t},${2:boolean flag})",
           "description": "native SetTextTagSuspended takes texttag t, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagPermanent": {
           "prefix": "fnSetTextTagPermanent",
           "body": "SetTextTagPermanent(${1:texttag t},${2:boolean flag})",
           "description": "native SetTextTagPermanent takes texttag t, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagAge": {
           "prefix": "fnSetTextTagAge",
           "body": "SetTextTagAge(${1:texttag t},${2:real age})",
           "description": "native SetTextTagAge takes texttag t, real age returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagLifespan": {
           "prefix": "fnSetTextTagLifespan",
           "body": "SetTextTagLifespan(${1:texttag t},${2:real lifespan})",
           "description": "native SetTextTagLifespan takes texttag t, real lifespan returns nothing",
           "scope": "source.vjass"
       },
        "fnSetTextTagFadepoint": {
           "prefix": "fnSetTextTagFadepoint",
           "body": "SetTextTagFadepoint(${1:texttag t},${2:real fadepoint})",
           "description": "native SetTextTagFadepoint takes texttag t, real fadepoint returns nothing",
           "scope": "source.vjass"
       },
        "fnSetReservedLocalHeroButtons": {
           "prefix": "fnSetReservedLocalHeroButtons",
           "body": "SetReservedLocalHeroButtons(${1:integer reserved})",
           "description": "native SetReservedLocalHeroButtons takes integer reserved returns nothing",
           "scope": "source.vjass"
       },
        "fnGetAllyColorFilterState": {
           "prefix": "fnGetAllyColorFilterState",
           "body": "GetAllyColorFilterState(${1:nothing})",
           "description": "native GetAllyColorFilterState takes nothing returns integer",
           "scope": "source.vjass"
       },
        "fnSetAllyColorFilterState": {
           "prefix": "fnSetAllyColorFilterState",
           "body": "SetAllyColorFilterState(${1:integer state})",
           "description": "native SetAllyColorFilterState takes integer state returns nothing",
           "scope": "source.vjass"
       },
        "fnGetCreepCampFilterState": {
           "prefix": "fnGetCreepCampFilterState",
           "body": "GetCreepCampFilterState(${1:nothing})",
           "description": "native GetCreepCampFilterState takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnSetCreepCampFilterState": {
           "prefix": "fnSetCreepCampFilterState",
           "body": "SetCreepCampFilterState(${1:boolean state})",
           "description": "native SetCreepCampFilterState takes boolean state returns nothing",
           "scope": "source.vjass"
       },
        "fnEnableMinimapFilterButtons": {
           "prefix": "fnEnableMinimapFilterButtons",
           "body": "EnableMinimapFilterButtons(${1:boolean enableCreep})",
           "description": "native EnableMinimapFilterButtons takes boolean enableAlly, boolean enableCreep returns nothing",
           "scope": "source.vjass"
       },
        "fnEnableDragSelect": {
           "prefix": "fnEnableDragSelect",
           "body": "EnableDragSelect(${1:boolean ui})",
           "description": "native EnableDragSelect takes boolean state, boolean ui returns nothing",
           "scope": "source.vjass"
       },
        "fnEnablePreSelect": {
           "prefix": "fnEnablePreSelect",
           "body": "EnablePreSelect(${1:boolean ui})",
           "description": "native EnablePreSelect takes boolean state, boolean ui returns nothing",
           "scope": "source.vjass"
       },
        "fnEnableSelect": {
           "prefix": "fnEnableSelect",
           "body": "EnableSelect(${1:boolean ui})",
           "description": "native EnableSelect takes boolean state, boolean ui returns nothing",
           "scope": "source.vjass"
       },
        "fnCreateTrackable": {
           "prefix": "fnCreateTrackable",
           "body": "CreateTrackable(${1:real facing},${2:string trackableModelPath})",
           "description": "native CreateTrackable takes string trackableModelPath, real x, real y, real facing returns trackable",
           "scope": "source.vjass"
       },
        "fnCreateQuest": {
           "prefix": "fnCreateQuest",
           "body": "CreateQuest(${1:nothing})",
           "description": "native CreateQuest takes nothing returns quest",
           "scope": "source.vjass"
       },
        "fnDestroyQuest": {
           "prefix": "fnDestroyQuest",
           "body": "DestroyQuest(${1:quest whichQuest})",
           "description": "native DestroyQuest takes quest whichQuest returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestSetTitle": {
           "prefix": "fnQuestSetTitle",
           "body": "QuestSetTitle(${1:quest whichQuest},${2:string title})",
           "description": "native QuestSetTitle takes quest whichQuest, string title returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestSetDescription": {
           "prefix": "fnQuestSetDescription",
           "body": "QuestSetDescription(${1:quest whichQuest},${2:string description})",
           "description": "native QuestSetDescription takes quest whichQuest, string description returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestSetIconPath": {
           "prefix": "fnQuestSetIconPath",
           "body": "QuestSetIconPath(${1:quest whichQuest},${2:string iconPath})",
           "description": "native QuestSetIconPath takes quest whichQuest, string iconPath returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestSetRequired": {
           "prefix": "fnQuestSetRequired",
           "body": "QuestSetRequired(${1:boolean required},${2:quest whichQuest})",
           "description": "native QuestSetRequired takes quest whichQuest, boolean required returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestSetCompleted": {
           "prefix": "fnQuestSetCompleted",
           "body": "QuestSetCompleted(${1:boolean completed},${2:quest whichQuest})",
           "description": "native QuestSetCompleted takes quest whichQuest, boolean completed returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestSetDiscovered": {
           "prefix": "fnQuestSetDiscovered",
           "body": "QuestSetDiscovered(${1:boolean discovered},${2:quest whichQuest})",
           "description": "native QuestSetDiscovered takes quest whichQuest, boolean discovered returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestSetFailed": {
           "prefix": "fnQuestSetFailed",
           "body": "QuestSetFailed(${1:boolean failed},${2:quest whichQuest})",
           "description": "native QuestSetFailed takes quest whichQuest, boolean failed returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestSetEnabled": {
           "prefix": "fnQuestSetEnabled",
           "body": "QuestSetEnabled(${1:boolean enabled},${2:quest whichQuest})",
           "description": "native QuestSetEnabled takes quest whichQuest, boolean enabled returns nothing",
           "scope": "source.vjass"
       },
        "fnIsQuestRequired": {
           "prefix": "fnIsQuestRequired",
           "body": "IsQuestRequired(${1:quest whichQuest})",
           "description": "native IsQuestRequired takes quest whichQuest returns boolean",
           "scope": "source.vjass"
       },
        "fnIsQuestCompleted": {
           "prefix": "fnIsQuestCompleted",
           "body": "IsQuestCompleted(${1:quest whichQuest})",
           "description": "native IsQuestCompleted takes quest whichQuest returns boolean",
           "scope": "source.vjass"
       },
        "fnIsQuestDiscovered": {
           "prefix": "fnIsQuestDiscovered",
           "body": "IsQuestDiscovered(${1:quest whichQuest})",
           "description": "native IsQuestDiscovered takes quest whichQuest returns boolean",
           "scope": "source.vjass"
       },
        "fnIsQuestFailed": {
           "prefix": "fnIsQuestFailed",
           "body": "IsQuestFailed(${1:quest whichQuest})",
           "description": "native IsQuestFailed takes quest whichQuest returns boolean",
           "scope": "source.vjass"
       },
        "fnIsQuestEnabled": {
           "prefix": "fnIsQuestEnabled",
           "body": "IsQuestEnabled(${1:quest whichQuest})",
           "description": "native IsQuestEnabled takes quest whichQuest returns boolean",
           "scope": "source.vjass"
       },
        "fnQuestCreateItem": {
           "prefix": "fnQuestCreateItem",
           "body": "QuestCreateItem(${1:quest whichQuest})",
           "description": "native QuestCreateItem takes quest whichQuest returns questitem",
           "scope": "source.vjass"
       },
        "fnQuestItemSetDescription": {
           "prefix": "fnQuestItemSetDescription",
           "body": "QuestItemSetDescription(${1:questitem whichQuestItem},${2:string description})",
           "description": "native QuestItemSetDescription takes questitem whichQuestItem, string description returns nothing",
           "scope": "source.vjass"
       },
        "fnQuestItemSetCompleted": {
           "prefix": "fnQuestItemSetCompleted",
           "body": "QuestItemSetCompleted(${1:questitem whichQuestItem},${2:boolean completed})",
           "description": "native QuestItemSetCompleted takes questitem whichQuestItem, boolean completed returns nothing",
           "scope": "source.vjass"
       },
        "fnIsQuestItemCompleted": {
           "prefix": "fnIsQuestItemCompleted",
           "body": "IsQuestItemCompleted(${1:questitem whichQuestItem})",
           "description": "native IsQuestItemCompleted takes questitem whichQuestItem returns boolean",
           "scope": "source.vjass"
       },
        "fnCreateDefeatCondition": {
           "prefix": "fnCreateDefeatCondition",
           "body": "CreateDefeatCondition(${1:nothing})",
           "description": "native CreateDefeatCondition takes nothing returns defeatcondition",
           "scope": "source.vjass"
       },
        "fnDestroyDefeatCondition": {
           "prefix": "fnDestroyDefeatCondition",
           "body": "DestroyDefeatCondition(${1:defeatcondition whichCondition})",
           "description": "native DestroyDefeatCondition takes defeatcondition whichCondition returns nothing",
           "scope": "source.vjass"
       },
        "fnDefeatConditionSetDescription": {
           "prefix": "fnDefeatConditionSetDescription",
           "body": "DefeatConditionSetDescription(${1:defeatcondition whichCondition},${2:string description})",
           "description": "native DefeatConditionSetDescription takes defeatcondition whichCondition, string description returns nothing",
           "scope": "source.vjass"
       },
        "fnFlashQuestDialogButton": {
           "prefix": "fnFlashQuestDialogButton",
           "body": "FlashQuestDialogButton(${1:nothing})",
           "description": "native FlashQuestDialogButton takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnForceQuestDialogUpdate": {
           "prefix": "fnForceQuestDialogUpdate",
           "body": "ForceQuestDialogUpdate(${1:nothing})",
           "description": "native ForceQuestDialogUpdate takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnCreateTimerDialog": {
           "prefix": "fnCreateTimerDialog",
           "body": "CreateTimerDialog(${1:timer t})",
           "description": "native CreateTimerDialog takes timer t returns timerdialog",
           "scope": "source.vjass"
       },
        "fnDestroyTimerDialog": {
           "prefix": "fnDestroyTimerDialog",
           "body": "DestroyTimerDialog(${1:timerdialog whichDialog})",
           "description": "native DestroyTimerDialog takes timerdialog whichDialog returns nothing",
           "scope": "source.vjass"
       },
        "fnTimerDialogSetTitle": {
           "prefix": "fnTimerDialogSetTitle",
           "body": "TimerDialogSetTitle(${1:timerdialog whichDialog},${2:string title})",
           "description": "native TimerDialogSetTitle takes timerdialog whichDialog, string title returns nothing",
           "scope": "source.vjass"
       },
        "fnTimerDialogSetTitleColor": {
           "prefix": "fnTimerDialogSetTitleColor",
           "body": "TimerDialogSetTitleColor(${1:integer alpha},${2:timerdialog whichDialog})",
           "description": "native TimerDialogSetTitleColor takes timerdialog whichDialog, integer red, integer green, integer blue, integer alpha returns nothing",
           "scope": "source.vjass"
       },
        "fnTimerDialogSetTimeColor": {
           "prefix": "fnTimerDialogSetTimeColor",
           "body": "TimerDialogSetTimeColor(${1:integer alpha},${2:timerdialog whichDialog})",
           "description": "native TimerDialogSetTimeColor takes timerdialog whichDialog, integer red, integer green, integer blue, integer alpha returns nothing",
           "scope": "source.vjass"
       },
        "fnTimerDialogSetSpeed": {
           "prefix": "fnTimerDialogSetSpeed",
           "body": "TimerDialogSetSpeed(${1:real speedMultFactor},${2:timerdialog whichDialog})",
           "description": "native TimerDialogSetSpeed takes timerdialog whichDialog, real speedMultFactor returns nothing",
           "scope": "source.vjass"
       },
        "fnTimerDialogDisplay": {
           "prefix": "fnTimerDialogDisplay",
           "body": "TimerDialogDisplay(${1:boolean display},${2:timerdialog whichDialog})",
           "description": "native TimerDialogDisplay takes timerdialog whichDialog, boolean display returns nothing",
           "scope": "source.vjass"
       },
        "fnIsTimerDialogDisplayed": {
           "prefix": "fnIsTimerDialogDisplayed",
           "body": "IsTimerDialogDisplayed(${1:timerdialog whichDialog})",
           "description": "native IsTimerDialogDisplayed takes timerdialog whichDialog returns boolean",
           "scope": "source.vjass"
       },
        "fnTimerDialogSetRealTimeRemaining": {
           "prefix": "fnTimerDialogSetRealTimeRemaining",
           "body": "TimerDialogSetRealTimeRemaining(${1:real timeRemaining},${2:timerdialog whichDialog})",
           "description": "native TimerDialogSetRealTimeRemaining takes timerdialog whichDialog, real timeRemaining returns nothing",
           "scope": "source.vjass"
       },
        "fnCreateLeaderboard": {
           "prefix": "fnCreateLeaderboard",
           "body": "CreateLeaderboard(${1:nothing})",
           "description": "native CreateLeaderboard takes nothing returns leaderboard",
           "scope": "source.vjass"
       },
        "fnDestroyLeaderboard": {
           "prefix": "fnDestroyLeaderboard",
           "body": "DestroyLeaderboard(${1:leaderboard lb})",
           "description": "native DestroyLeaderboard takes leaderboard lb returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardDisplay": {
           "prefix": "fnLeaderboardDisplay",
           "body": "LeaderboardDisplay(${1:boolean show},${2:leaderboard lb})",
           "description": "native LeaderboardDisplay takes leaderboard lb, boolean show returns nothing",
           "scope": "source.vjass"
       },
        "fnIsLeaderboardDisplayed": {
           "prefix": "fnIsLeaderboardDisplayed",
           "body": "IsLeaderboardDisplayed(${1:leaderboard lb})",
           "description": "native IsLeaderboardDisplayed takes leaderboard lb returns boolean",
           "scope": "source.vjass"
       },
        "fnLeaderboardGetItemCount": {
           "prefix": "fnLeaderboardGetItemCount",
           "body": "LeaderboardGetItemCount(${1:leaderboard lb})",
           "description": "native LeaderboardGetItemCount takes leaderboard lb returns integer",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetSizeByItemCount": {
           "prefix": "fnLeaderboardSetSizeByItemCount",
           "body": "LeaderboardSetSizeByItemCount(${1:integer count},${2:leaderboard lb})",
           "description": "native LeaderboardSetSizeByItemCount takes leaderboard lb, integer count returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardAddItem": {
           "prefix": "fnLeaderboardAddItem",
           "body": "LeaderboardAddItem(${1:integer value},${2:string label},${3:leaderboard lb},${4:player p})",
           "description": "native LeaderboardAddItem takes leaderboard lb, string label, integer value, player p returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardRemoveItem": {
           "prefix": "fnLeaderboardRemoveItem",
           "body": "LeaderboardRemoveItem(${1:integer index},${2:leaderboard lb})",
           "description": "native LeaderboardRemoveItem takes leaderboard lb, integer index returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardRemovePlayerItem": {
           "prefix": "fnLeaderboardRemovePlayerItem",
           "body": "LeaderboardRemovePlayerItem(${1:player p},${2:leaderboard lb})",
           "description": "native LeaderboardRemovePlayerItem takes leaderboard lb, player p returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardClear": {
           "prefix": "fnLeaderboardClear",
           "body": "LeaderboardClear(${1:leaderboard lb})",
           "description": "native LeaderboardClear takes leaderboard lb returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSortItemsByValue": {
           "prefix": "fnLeaderboardSortItemsByValue",
           "body": "LeaderboardSortItemsByValue(${1:boolean ascending},${2:leaderboard lb})",
           "description": "native LeaderboardSortItemsByValue takes leaderboard lb, boolean ascending returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSortItemsByPlayer": {
           "prefix": "fnLeaderboardSortItemsByPlayer",
           "body": "LeaderboardSortItemsByPlayer(${1:boolean ascending},${2:leaderboard lb})",
           "description": "native LeaderboardSortItemsByPlayer takes leaderboard lb, boolean ascending returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSortItemsByLabel": {
           "prefix": "fnLeaderboardSortItemsByLabel",
           "body": "LeaderboardSortItemsByLabel(${1:boolean ascending},${2:leaderboard lb})",
           "description": "native LeaderboardSortItemsByLabel takes leaderboard lb, boolean ascending returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardHasPlayerItem": {
           "prefix": "fnLeaderboardHasPlayerItem",
           "body": "LeaderboardHasPlayerItem(${1:player p},${2:leaderboard lb})",
           "description": "native LeaderboardHasPlayerItem takes leaderboard lb, player p returns boolean",
           "scope": "source.vjass"
       },
        "fnLeaderboardGetPlayerIndex": {
           "prefix": "fnLeaderboardGetPlayerIndex",
           "body": "LeaderboardGetPlayerIndex(${1:player p},${2:leaderboard lb})",
           "description": "native LeaderboardGetPlayerIndex takes leaderboard lb, player p returns integer",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetLabel": {
           "prefix": "fnLeaderboardSetLabel",
           "body": "LeaderboardSetLabel(${1:string label},${2:leaderboard lb})",
           "description": "native LeaderboardSetLabel takes leaderboard lb, string label returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardGetLabelText": {
           "prefix": "fnLeaderboardGetLabelText",
           "body": "LeaderboardGetLabelText(${1:leaderboard lb})",
           "description": "native LeaderboardGetLabelText takes leaderboard lb returns string",
           "scope": "source.vjass"
       },
        "fnPlayerSetLeaderboard": {
           "prefix": "fnPlayerSetLeaderboard",
           "body": "PlayerSetLeaderboard(${1:player toPlayer},${2:leaderboard lb})",
           "description": "native PlayerSetLeaderboard takes player toPlayer, leaderboard lb returns nothing",
           "scope": "source.vjass"
       },
        "fnPlayerGetLeaderboard": {
           "prefix": "fnPlayerGetLeaderboard",
           "body": "PlayerGetLeaderboard(${1:player toPlayer})",
           "description": "native PlayerGetLeaderboard takes player toPlayer returns leaderboard",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetLabelColor": {
           "prefix": "fnLeaderboardSetLabelColor",
           "body": "LeaderboardSetLabelColor(${1:integer alpha},${2:leaderboard lb})",
           "description": "native LeaderboardSetLabelColor takes leaderboard lb, integer red, integer green, integer blue, integer alpha returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetValueColor": {
           "prefix": "fnLeaderboardSetValueColor",
           "body": "LeaderboardSetValueColor(${1:integer alpha},${2:leaderboard lb})",
           "description": "native LeaderboardSetValueColor takes leaderboard lb, integer red, integer green, integer blue, integer alpha returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetStyle": {
           "prefix": "fnLeaderboardSetStyle",
           "body": "LeaderboardSetStyle(${1:boolean showIcons},${2:leaderboard lb})",
           "description": "native LeaderboardSetStyle takes leaderboard lb, boolean showLabel, boolean showNames, boolean showValues, boolean showIcons returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetItemValue": {
           "prefix": "fnLeaderboardSetItemValue",
           "body": "LeaderboardSetItemValue(${1:integer val},${2:leaderboard lb})",
           "description": "native LeaderboardSetItemValue takes leaderboard lb, integer whichItem, integer val returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetItemLabel": {
           "prefix": "fnLeaderboardSetItemLabel",
           "body": "LeaderboardSetItemLabel(${1:integer whichItem},${2:string val},${3:leaderboard lb})",
           "description": "native LeaderboardSetItemLabel takes leaderboard lb, integer whichItem, string val returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetItemStyle": {
           "prefix": "fnLeaderboardSetItemStyle",
           "body": "LeaderboardSetItemStyle(${1:integer whichItem},${2:boolean showIcon},${3:leaderboard lb})",
           "description": "native LeaderboardSetItemStyle takes leaderboard lb, integer whichItem, boolean showLabel, boolean showValue, boolean showIcon returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetItemLabelColor": {
           "prefix": "fnLeaderboardSetItemLabelColor",
           "body": "LeaderboardSetItemLabelColor(${1:integer alpha},${2:leaderboard lb})",
           "description": "native LeaderboardSetItemLabelColor takes leaderboard lb, integer whichItem, integer red, integer green, integer blue, integer alpha returns nothing",
           "scope": "source.vjass"
       },
        "fnLeaderboardSetItemValueColor": {
           "prefix": "fnLeaderboardSetItemValueColor",
           "body": "LeaderboardSetItemValueColor(${1:integer alpha},${2:leaderboard lb})",
           "description": "native LeaderboardSetItemValueColor takes leaderboard lb, integer whichItem, integer red, integer green, integer blue, integer alpha returns nothing",
           "scope": "source.vjass"
       },
        "fnCreateMultiboard": {
           "prefix": "fnCreateMultiboard",
           "body": "CreateMultiboard(${1:nothing})",
           "description": "native CreateMultiboard takes nothing returns multiboard",
           "scope": "source.vjass"
       },
        "fnDestroyMultiboard": {
           "prefix": "fnDestroyMultiboard",
           "body": "DestroyMultiboard(${1:multiboard lb})",
           "description": "native DestroyMultiboard takes multiboard lb returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardDisplay": {
           "prefix": "fnMultiboardDisplay",
           "body": "MultiboardDisplay(${1:boolean show},${2:multiboard lb})",
           "description": "native MultiboardDisplay takes multiboard lb, boolean show returns nothing",
           "scope": "source.vjass"
       },
        "fnIsMultiboardDisplayed": {
           "prefix": "fnIsMultiboardDisplayed",
           "body": "IsMultiboardDisplayed(${1:multiboard lb})",
           "description": "native IsMultiboardDisplayed takes multiboard lb returns boolean",
           "scope": "source.vjass"
       },
        "fnMultiboardMinimize": {
           "prefix": "fnMultiboardMinimize",
           "body": "MultiboardMinimize(${1:boolean minimize},${2:multiboard lb})",
           "description": "native MultiboardMinimize takes multiboard lb, boolean minimize returns nothing",
           "scope": "source.vjass"
       },
        "fnIsMultiboardMinimized": {
           "prefix": "fnIsMultiboardMinimized",
           "body": "IsMultiboardMinimized(${1:multiboard lb})",
           "description": "native IsMultiboardMinimized takes multiboard lb returns boolean",
           "scope": "source.vjass"
       },
        "fnMultiboardClear": {
           "prefix": "fnMultiboardClear",
           "body": "MultiboardClear(${1:multiboard lb})",
           "description": "native MultiboardClear takes multiboard lb returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetTitleText": {
           "prefix": "fnMultiboardSetTitleText",
           "body": "MultiboardSetTitleText(${1:multiboard lb},${2:string label})",
           "description": "native MultiboardSetTitleText takes multiboard lb, string label returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardGetTitleText": {
           "prefix": "fnMultiboardGetTitleText",
           "body": "MultiboardGetTitleText(${1:multiboard lb})",
           "description": "native MultiboardGetTitleText takes multiboard lb returns string",
           "scope": "source.vjass"
       },
        "fnMultiboardSetTitleTextColor": {
           "prefix": "fnMultiboardSetTitleTextColor",
           "body": "MultiboardSetTitleTextColor(${1:integer alpha},${2:multiboard lb})",
           "description": "native MultiboardSetTitleTextColor takes multiboard lb, integer red, integer green, integer blue, integer alpha returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardGetRowCount": {
           "prefix": "fnMultiboardGetRowCount",
           "body": "MultiboardGetRowCount(${1:multiboard lb})",
           "description": "native MultiboardGetRowCount takes multiboard lb returns integer",
           "scope": "source.vjass"
       },
        "fnMultiboardGetColumnCount": {
           "prefix": "fnMultiboardGetColumnCount",
           "body": "MultiboardGetColumnCount(${1:multiboard lb})",
           "description": "native MultiboardGetColumnCount takes multiboard lb returns integer",
           "scope": "source.vjass"
       },
        "fnMultiboardSetColumnCount": {
           "prefix": "fnMultiboardSetColumnCount",
           "body": "MultiboardSetColumnCount(${1:integer count},${2:multiboard lb})",
           "description": "native MultiboardSetColumnCount takes multiboard lb, integer count returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetRowCount": {
           "prefix": "fnMultiboardSetRowCount",
           "body": "MultiboardSetRowCount(${1:integer count},${2:multiboard lb})",
           "description": "native MultiboardSetRowCount takes multiboard lb, integer count returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemsStyle": {
           "prefix": "fnMultiboardSetItemsStyle",
           "body": "MultiboardSetItemsStyle(${1:boolean showIcons},${2:multiboard lb})",
           "description": "native MultiboardSetItemsStyle takes multiboard lb, boolean showValues, boolean showIcons returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemsValue": {
           "prefix": "fnMultiboardSetItemsValue",
           "body": "MultiboardSetItemsValue(${1:multiboard lb},${2:string value})",
           "description": "native MultiboardSetItemsValue takes multiboard lb, string value returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemsValueColor": {
           "prefix": "fnMultiboardSetItemsValueColor",
           "body": "MultiboardSetItemsValueColor(${1:integer alpha},${2:multiboard lb})",
           "description": "native MultiboardSetItemsValueColor takes multiboard lb, integer red, integer green, integer blue, integer alpha returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemsWidth": {
           "prefix": "fnMultiboardSetItemsWidth",
           "body": "MultiboardSetItemsWidth(${1:real width},${2:multiboard lb})",
           "description": "native MultiboardSetItemsWidth takes multiboard lb, real width returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemsIcon": {
           "prefix": "fnMultiboardSetItemsIcon",
           "body": "MultiboardSetItemsIcon(${1:multiboard lb},${2:string iconPath})",
           "description": "native MultiboardSetItemsIcon takes multiboard lb, string iconPath returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardGetItem": {
           "prefix": "fnMultiboardGetItem",
           "body": "MultiboardGetItem(${1:integer column},${2:multiboard lb})",
           "description": "native MultiboardGetItem takes multiboard lb, integer row, integer column returns multiboarditem",
           "scope": "source.vjass"
       },
        "fnMultiboardReleaseItem": {
           "prefix": "fnMultiboardReleaseItem",
           "body": "MultiboardReleaseItem(${1:multiboarditem mbi})",
           "description": "native MultiboardReleaseItem takes multiboarditem mbi returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemStyle": {
           "prefix": "fnMultiboardSetItemStyle",
           "body": "MultiboardSetItemStyle(${1:multiboarditem mbi},${2:boolean showIcon})",
           "description": "native MultiboardSetItemStyle takes multiboarditem mbi, boolean showValue, boolean showIcon returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemValue": {
           "prefix": "fnMultiboardSetItemValue",
           "body": "MultiboardSetItemValue(${1:multiboarditem mbi},${2:string val})",
           "description": "native MultiboardSetItemValue takes multiboarditem mbi, string val returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemValueColor": {
           "prefix": "fnMultiboardSetItemValueColor",
           "body": "MultiboardSetItemValueColor(${1:integer alpha},${2:multiboarditem mbi})",
           "description": "native MultiboardSetItemValueColor takes multiboarditem mbi, integer red, integer green, integer blue, integer alpha returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemWidth": {
           "prefix": "fnMultiboardSetItemWidth",
           "body": "MultiboardSetItemWidth(${1:real width},${2:multiboarditem mbi})",
           "description": "native MultiboardSetItemWidth takes multiboarditem mbi, real width returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSetItemIcon": {
           "prefix": "fnMultiboardSetItemIcon",
           "body": "MultiboardSetItemIcon(${1:multiboarditem mbi},${2:string iconFileName})",
           "description": "native MultiboardSetItemIcon takes multiboarditem mbi, string iconFileName returns nothing",
           "scope": "source.vjass"
       },
        "fnMultiboardSuppressDisplay": {
           "prefix": "fnMultiboardSuppressDisplay",
           "body": "MultiboardSuppressDisplay(${1:boolean flag})",
           "description": "native MultiboardSuppressDisplay takes boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraPosition": {
           "prefix": "fnSetCameraPosition",
           "body": "SetCameraPosition(${1:real y})",
           "description": "native SetCameraPosition takes real x, real y returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraQuickPosition": {
           "prefix": "fnSetCameraQuickPosition",
           "body": "SetCameraQuickPosition(${1:real y})",
           "description": "native SetCameraQuickPosition takes real x, real y returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraBounds": {
           "prefix": "fnSetCameraBounds",
           "body": "SetCameraBounds(${1:real y4})",
           "description": "native SetCameraBounds takes real x1, real y1, real x2, real y2, real x3, real y3, real x4, real y4 returns nothing",
           "scope": "source.vjass"
       },
        "fnStopCamera": {
           "prefix": "fnStopCamera",
           "body": "StopCamera(${1:nothing})",
           "description": "native StopCamera takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnResetToGameCamera": {
           "prefix": "fnResetToGameCamera",
           "body": "ResetToGameCamera(${1:real duration})",
           "description": "native ResetToGameCamera takes real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnPanCameraTo": {
           "prefix": "fnPanCameraTo",
           "body": "PanCameraTo(${1:real y})",
           "description": "native PanCameraTo takes real x, real y returns nothing",
           "scope": "source.vjass"
       },
        "fnPanCameraToTimed": {
           "prefix": "fnPanCameraToTimed",
           "body": "PanCameraToTimed(${1:real duration})",
           "description": "native PanCameraToTimed takes real x, real y, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnPanCameraToWithZ": {
           "prefix": "fnPanCameraToWithZ",
           "body": "PanCameraToWithZ(${1:real zOffsetDest})",
           "description": "native PanCameraToWithZ takes real x, real y, real zOffsetDest returns nothing",
           "scope": "source.vjass"
       },
        "fnPanCameraToTimedWithZ": {
           "prefix": "fnPanCameraToTimedWithZ",
           "body": "PanCameraToTimedWithZ(${1:real duration})",
           "description": "native PanCameraToTimedWithZ takes real x, real y, real zOffsetDest, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCinematicCamera": {
           "prefix": "fnSetCinematicCamera",
           "body": "SetCinematicCamera(${1:string cameraModelFile})",
           "description": "native SetCinematicCamera takes string cameraModelFile returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraRotateMode": {
           "prefix": "fnSetCameraRotateMode",
           "body": "SetCameraRotateMode(${1:real duration})",
           "description": "native SetCameraRotateMode takes real x, real y, real radiansToSweep, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraField": {
           "prefix": "fnSetCameraField",
           "body": "SetCameraField(${1:camerafield whichField},${2:real duration})",
           "description": "native SetCameraField takes camerafield whichField, real value, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnAdjustCameraField": {
           "prefix": "fnAdjustCameraField",
           "body": "AdjustCameraField(${1:camerafield whichField},${2:real duration})",
           "description": "native AdjustCameraField takes camerafield whichField, real offset, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraTargetController": {
           "prefix": "fnSetCameraTargetController",
           "body": "SetCameraTargetController(${1:real yoffset},${2:boolean inheritOrientation},${3:unit whichUnit})",
           "description": "native SetCameraTargetController takes unit whichUnit, real xoffset, real yoffset, boolean inheritOrientation returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCameraOrientController": {
           "prefix": "fnSetCameraOrientController",
           "body": "SetCameraOrientController(${1:real yoffset},${2:unit whichUnit})",
           "description": "native SetCameraOrientController takes unit whichUnit, real xoffset, real yoffset returns nothing",
           "scope": "source.vjass"
       },
        "fnCreateCameraSetup": {
           "prefix": "fnCreateCameraSetup",
           "body": "CreateCameraSetup(${1:nothing})",
           "description": "native CreateCameraSetup takes nothing returns camerasetup",
           "scope": "source.vjass"
       },
        "fnCameraSetupSetField": {
           "prefix": "fnCameraSetupSetField",
           "body": "CameraSetupSetField(${1:camerafield whichField},${2:real duration},${3:camerasetup whichSetup})",
           "description": "native CameraSetupSetField takes camerasetup whichSetup, camerafield whichField, real value, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraSetupGetField": {
           "prefix": "fnCameraSetupGetField",
           "body": "CameraSetupGetField(${1:camerafield whichField},${2:camerasetup whichSetup})",
           "description": "native CameraSetupGetField takes camerasetup whichSetup, camerafield whichField returns real",
           "scope": "source.vjass"
       },
        "fnCameraSetupSetDestPosition": {
           "prefix": "fnCameraSetupSetDestPosition",
           "body": "CameraSetupSetDestPosition(${1:real duration},${2:camerasetup whichSetup})",
           "description": "native CameraSetupSetDestPosition takes camerasetup whichSetup, real x, real y, real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraSetupGetDestPositionLoc": {
           "prefix": "fnCameraSetupGetDestPositionLoc",
           "body": "CameraSetupGetDestPositionLoc(${1:camerasetup whichSetup})",
           "description": "native CameraSetupGetDestPositionLoc takes camerasetup whichSetup returns location",
           "scope": "source.vjass"
       },
        "fnCameraSetupGetDestPositionX": {
           "prefix": "fnCameraSetupGetDestPositionX",
           "body": "CameraSetupGetDestPositionX(${1:camerasetup whichSetup})",
           "description": "native CameraSetupGetDestPositionX takes camerasetup whichSetup returns real",
           "scope": "source.vjass"
       },
        "fnCameraSetupGetDestPositionY": {
           "prefix": "fnCameraSetupGetDestPositionY",
           "body": "CameraSetupGetDestPositionY(${1:camerasetup whichSetup})",
           "description": "native CameraSetupGetDestPositionY takes camerasetup whichSetup returns real",
           "scope": "source.vjass"
       },
        "fnCameraSetupApply": {
           "prefix": "fnCameraSetupApply",
           "body": "CameraSetupApply(${1:boolean panTimed},${2:camerasetup whichSetup})",
           "description": "native CameraSetupApply takes camerasetup whichSetup, boolean doPan, boolean panTimed returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraSetupApplyWithZ": {
           "prefix": "fnCameraSetupApplyWithZ",
           "body": "CameraSetupApplyWithZ(${1:real zDestOffset},${2:camerasetup whichSetup})",
           "description": "native CameraSetupApplyWithZ takes camerasetup whichSetup, real zDestOffset returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraSetupApplyForceDuration": {
           "prefix": "fnCameraSetupApplyForceDuration",
           "body": "CameraSetupApplyForceDuration(${1:boolean doPan},${2:real forceDuration},${3:camerasetup whichSetup})",
           "description": "native CameraSetupApplyForceDuration takes camerasetup whichSetup, boolean doPan, real forceDuration returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraSetupApplyForceDurationWithZ": {
           "prefix": "fnCameraSetupApplyForceDurationWithZ",
           "body": "CameraSetupApplyForceDurationWithZ(${1:real forceDuration},${2:camerasetup whichSetup})",
           "description": "native CameraSetupApplyForceDurationWithZ takes camerasetup whichSetup, real zDestOffset, real forceDuration returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraSetTargetNoise": {
           "prefix": "fnCameraSetTargetNoise",
           "body": "CameraSetTargetNoise(${1:real velocity})",
           "description": "native CameraSetTargetNoise takes real mag, real velocity returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraSetSourceNoise": {
           "prefix": "fnCameraSetSourceNoise",
           "body": "CameraSetSourceNoise(${1:real velocity})",
           "description": "native CameraSetSourceNoise takes real mag, real velocity returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraSetTargetNoiseEx": {
           "prefix": "fnCameraSetTargetNoiseEx",
           "body": "CameraSetTargetNoiseEx(${1:real velocity},${2:boolean vertOnly})",
           "description": "native CameraSetTargetNoiseEx takes real mag, real velocity, boolean vertOnly returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraSetSourceNoiseEx": {
           "prefix": "fnCameraSetSourceNoiseEx",
           "body": "CameraSetSourceNoiseEx(${1:real velocity},${2:boolean vertOnly})",
           "description": "native CameraSetSourceNoiseEx takes real mag, real velocity, boolean vertOnly returns nothing",
           "scope": "source.vjass"
       },
        "fnCameraSetSmoothingFactor": {
           "prefix": "fnCameraSetSmoothingFactor",
           "body": "CameraSetSmoothingFactor(${1:real factor})",
           "description": "native CameraSetSmoothingFactor takes real factor returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCineFilterTexture": {
           "prefix": "fnSetCineFilterTexture",
           "body": "SetCineFilterTexture(${1:string filename})",
           "description": "native SetCineFilterTexture takes string filename returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCineFilterBlendMode": {
           "prefix": "fnSetCineFilterBlendMode",
           "body": "SetCineFilterBlendMode(${1:blendmode whichMode})",
           "description": "native SetCineFilterBlendMode takes blendmode whichMode returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCineFilterTexMapFlags": {
           "prefix": "fnSetCineFilterTexMapFlags",
           "body": "SetCineFilterTexMapFlags(${1:texmapflags whichFlags})",
           "description": "native SetCineFilterTexMapFlags takes texmapflags whichFlags returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCineFilterStartUV": {
           "prefix": "fnSetCineFilterStartUV",
           "body": "SetCineFilterStartUV(${1:real maxv})",
           "description": "native SetCineFilterStartUV takes real minu, real minv, real maxu, real maxv returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCineFilterEndUV": {
           "prefix": "fnSetCineFilterEndUV",
           "body": "SetCineFilterEndUV(${1:real maxv})",
           "description": "native SetCineFilterEndUV takes real minu, real minv, real maxu, real maxv returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCineFilterStartColor": {
           "prefix": "fnSetCineFilterStartColor",
           "body": "SetCineFilterStartColor(${1:integer alpha})",
           "description": "native SetCineFilterStartColor takes integer red, integer green, integer blue, integer alpha returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCineFilterEndColor": {
           "prefix": "fnSetCineFilterEndColor",
           "body": "SetCineFilterEndColor(${1:integer alpha})",
           "description": "native SetCineFilterEndColor takes integer red, integer green, integer blue, integer alpha returns nothing",
           "scope": "source.vjass"
       },
        "fnSetCineFilterDuration": {
           "prefix": "fnSetCineFilterDuration",
           "body": "SetCineFilterDuration(${1:real duration})",
           "description": "native SetCineFilterDuration takes real duration returns nothing",
           "scope": "source.vjass"
       },
        "fnDisplayCineFilter": {
           "prefix": "fnDisplayCineFilter",
           "body": "DisplayCineFilter(${1:boolean flag})",
           "description": "native DisplayCineFilter takes boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnIsCineFilterDisplayed": {
           "prefix": "fnIsCineFilterDisplayed",
           "body": "IsCineFilterDisplayed(${1:nothing})",
           "description": "native IsCineFilterDisplayed takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnSetCinematicScene": {
           "prefix": "fnSetCinematicScene",
           "body": "SetCinematicScene(${1:real voiceoverDuration},${2:integer portraitUnitId},${3:playercolor color},${4:string text})",
           "description": "native SetCinematicScene takes integer portraitUnitId, playercolor color, string speakerTitle, string text, real sceneDuration, real voiceoverDuration returns nothing",
           "scope": "source.vjass"
       },
        "fnEndCinematicScene": {
           "prefix": "fnEndCinematicScene",
           "body": "EndCinematicScene(${1:nothing})",
           "description": "native EndCinematicScene takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnForceCinematicSubtitles": {
           "prefix": "fnForceCinematicSubtitles",
           "body": "ForceCinematicSubtitles(${1:boolean flag})",
           "description": "native ForceCinematicSubtitles takes boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnGetCameraMargin": {
           "prefix": "fnGetCameraMargin",
           "body": "GetCameraMargin(${1:integer whichMargin})",
           "description": "native GetCameraMargin takes integer whichMargin returns real",
           "scope": "source.vjass"
       },
        "fnGetCameraBoundMinX": {
           "prefix": "fnGetCameraBoundMinX",
           "body": "GetCameraBoundMinX(${1:nothing})",
           "description": "constant native GetCameraBoundMinX takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnGetCameraBoundMinY": {
           "prefix": "fnGetCameraBoundMinY",
           "body": "GetCameraBoundMinY(${1:nothing})",
           "description": "constant native GetCameraBoundMinY takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnGetCameraBoundMaxX": {
           "prefix": "fnGetCameraBoundMaxX",
           "body": "GetCameraBoundMaxX(${1:nothing})",
           "description": "constant native GetCameraBoundMaxX takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnGetCameraBoundMaxY": {
           "prefix": "fnGetCameraBoundMaxY",
           "body": "GetCameraBoundMaxY(${1:nothing})",
           "description": "constant native GetCameraBoundMaxY takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnGetCameraField": {
           "prefix": "fnGetCameraField",
           "body": "GetCameraField(${1:camerafield whichField})",
           "description": "constant native GetCameraField takes camerafield whichField returns real",
           "scope": "source.vjass"
       },
        "fnGetCameraTargetPositionX": {
           "prefix": "fnGetCameraTargetPositionX",
           "body": "GetCameraTargetPositionX(${1:nothing})",
           "description": "constant native GetCameraTargetPositionX takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnGetCameraTargetPositionY": {
           "prefix": "fnGetCameraTargetPositionY",
           "body": "GetCameraTargetPositionY(${1:nothing})",
           "description": "constant native GetCameraTargetPositionY takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnGetCameraTargetPositionZ": {
           "prefix": "fnGetCameraTargetPositionZ",
           "body": "GetCameraTargetPositionZ(${1:nothing})",
           "description": "constant native GetCameraTargetPositionZ takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnGetCameraTargetPositionLoc": {
           "prefix": "fnGetCameraTargetPositionLoc",
           "body": "GetCameraTargetPositionLoc(${1:nothing})",
           "description": "constant native GetCameraTargetPositionLoc takes nothing returns location",
           "scope": "source.vjass"
       },
        "fnGetCameraEyePositionX": {
           "prefix": "fnGetCameraEyePositionX",
           "body": "GetCameraEyePositionX(${1:nothing})",
           "description": "constant native GetCameraEyePositionX takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnGetCameraEyePositionY": {
           "prefix": "fnGetCameraEyePositionY",
           "body": "GetCameraEyePositionY(${1:nothing})",
           "description": "constant native GetCameraEyePositionY takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnGetCameraEyePositionZ": {
           "prefix": "fnGetCameraEyePositionZ",
           "body": "GetCameraEyePositionZ(${1:nothing})",
           "description": "constant native GetCameraEyePositionZ takes nothing returns real",
           "scope": "source.vjass"
       },
        "fnGetCameraEyePositionLoc": {
           "prefix": "fnGetCameraEyePositionLoc",
           "body": "GetCameraEyePositionLoc(${1:nothing})",
           "description": "constant native GetCameraEyePositionLoc takes nothing returns location",
           "scope": "source.vjass"
       },
        "fnNewSoundEnvironment": {
           "prefix": "fnNewSoundEnvironment",
           "body": "NewSoundEnvironment(${1:string environmentName})",
           "description": "native NewSoundEnvironment takes string environmentName returns nothing",
           "scope": "source.vjass"
       },
        "fnCreateSound": {
           "prefix": "fnCreateSound",
           "body": "CreateSound(${1:integer fadeOutRate},${2:boolean stopwhenoutofrange},${3:string eaxSetting})",
           "description": "native CreateSound takes string fileName, boolean looping, boolean is3D, boolean stopwhenoutofrange, integer fadeInRate, integer fadeOutRate, string eaxSetting returns sound",
           "scope": "source.vjass"
       },
        "fnCreateSoundFilenameWithLabel": {
           "prefix": "fnCreateSoundFilenameWithLabel",
           "body": "CreateSoundFilenameWithLabel(${1:integer fadeOutRate},${2:boolean stopwhenoutofrange},${3:string SLKEntryName})",
           "description": "native CreateSoundFilenameWithLabel takes string fileName, boolean looping, boolean is3D, boolean stopwhenoutofrange, integer fadeInRate, integer fadeOutRate, string SLKEntryName returns sound",
           "scope": "source.vjass"
       },
        "fnCreateSoundFromLabel": {
           "prefix": "fnCreateSoundFromLabel",
           "body": "CreateSoundFromLabel(${1:integer fadeOutRate},${2:boolean stopwhenoutofrange},${3:string soundLabel})",
           "description": "native CreateSoundFromLabel takes string soundLabel, boolean looping, boolean is3D, boolean stopwhenoutofrange, integer fadeInRate, integer fadeOutRate returns sound",
           "scope": "source.vjass"
       },
        "fnCreateMIDISound": {
           "prefix": "fnCreateMIDISound",
           "body": "CreateMIDISound(${1:integer fadeOutRate},${2:string soundLabel})",
           "description": "native CreateMIDISound takes string soundLabel, integer fadeInRate, integer fadeOutRate returns sound",
           "scope": "source.vjass"
       },
        "fnSetSoundParamsFromLabel": {
           "prefix": "fnSetSoundParamsFromLabel",
           "body": "SetSoundParamsFromLabel(${1:sound soundHandle},${2:string soundLabel})",
           "description": "native SetSoundParamsFromLabel takes sound soundHandle, string soundLabel returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundDistanceCutoff": {
           "prefix": "fnSetSoundDistanceCutoff",
           "body": "SetSoundDistanceCutoff(${1:sound soundHandle},${2:real cutoff})",
           "description": "native SetSoundDistanceCutoff takes sound soundHandle, real cutoff returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundChannel": {
           "prefix": "fnSetSoundChannel",
           "body": "SetSoundChannel(${1:sound soundHandle},${2:integer channel})",
           "description": "native SetSoundChannel takes sound soundHandle, integer channel returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundVolume": {
           "prefix": "fnSetSoundVolume",
           "body": "SetSoundVolume(${1:sound soundHandle},${2:integer volume})",
           "description": "native SetSoundVolume takes sound soundHandle, integer volume returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundPitch": {
           "prefix": "fnSetSoundPitch",
           "body": "SetSoundPitch(${1:sound soundHandle},${2:real pitch})",
           "description": "native SetSoundPitch takes sound soundHandle, real pitch returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundPlayPosition": {
           "prefix": "fnSetSoundPlayPosition",
           "body": "SetSoundPlayPosition(${1:sound soundHandle},${2:integer millisecs})",
           "description": "native SetSoundPlayPosition takes sound soundHandle, integer millisecs returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundDistances": {
           "prefix": "fnSetSoundDistances",
           "body": "SetSoundDistances(${1:sound soundHandle},${2:real maxDist})",
           "description": "native SetSoundDistances takes sound soundHandle, real minDist, real maxDist returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundConeAngles": {
           "prefix": "fnSetSoundConeAngles",
           "body": "SetSoundConeAngles(${1:sound soundHandle},${2:real outside},${3:integer outsideVolume})",
           "description": "native SetSoundConeAngles takes sound soundHandle, real inside, real outside, integer outsideVolume returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundConeOrientation": {
           "prefix": "fnSetSoundConeOrientation",
           "body": "SetSoundConeOrientation(${1:sound soundHandle},${2:real z})",
           "description": "native SetSoundConeOrientation takes sound soundHandle, real x, real y, real z returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundPosition": {
           "prefix": "fnSetSoundPosition",
           "body": "SetSoundPosition(${1:sound soundHandle},${2:real z})",
           "description": "native SetSoundPosition takes sound soundHandle, real x, real y, real z returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundVelocity": {
           "prefix": "fnSetSoundVelocity",
           "body": "SetSoundVelocity(${1:sound soundHandle},${2:real z})",
           "description": "native SetSoundVelocity takes sound soundHandle, real x, real y, real z returns nothing",
           "scope": "source.vjass"
       },
        "fnAttachSoundToUnit": {
           "prefix": "fnAttachSoundToUnit",
           "body": "AttachSoundToUnit(${1:sound soundHandle},${2:unit whichUnit})",
           "description": "native AttachSoundToUnit takes sound soundHandle, unit whichUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnStartSound": {
           "prefix": "fnStartSound",
           "body": "StartSound(${1:sound soundHandle})",
           "description": "native StartSound takes sound soundHandle returns nothing",
           "scope": "source.vjass"
       },
        "fnStopSound": {
           "prefix": "fnStopSound",
           "body": "StopSound(${1:sound soundHandle},${2:boolean fadeOut})",
           "description": "native StopSound takes sound soundHandle, boolean killWhenDone, boolean fadeOut returns nothing",
           "scope": "source.vjass"
       },
        "fnKillSoundWhenDone": {
           "prefix": "fnKillSoundWhenDone",
           "body": "KillSoundWhenDone(${1:sound soundHandle})",
           "description": "native KillSoundWhenDone takes sound soundHandle returns nothing",
           "scope": "source.vjass"
       },
        "fnSetMapMusic": {
           "prefix": "fnSetMapMusic",
           "body": "SetMapMusic(${1:integer index},${2:boolean random},${3:string musicName})",
           "description": "native SetMapMusic takes string musicName, boolean random, integer index returns nothing",
           "scope": "source.vjass"
       },
        "fnClearMapMusic": {
           "prefix": "fnClearMapMusic",
           "body": "ClearMapMusic(${1:nothing})",
           "description": "native ClearMapMusic takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnPlayMusic": {
           "prefix": "fnPlayMusic",
           "body": "PlayMusic(${1:string musicName})",
           "description": "native PlayMusic takes string musicName returns nothing",
           "scope": "source.vjass"
       },
        "fnPlayMusicEx": {
           "prefix": "fnPlayMusicEx",
           "body": "PlayMusicEx(${1:integer fadeinmsecs},${2:string musicName})",
           "description": "native PlayMusicEx takes string musicName, integer frommsecs, integer fadeinmsecs returns nothing",
           "scope": "source.vjass"
       },
        "fnStopMusic": {
           "prefix": "fnStopMusic",
           "body": "StopMusic(${1:boolean fadeOut})",
           "description": "native StopMusic takes boolean fadeOut returns nothing",
           "scope": "source.vjass"
       },
        "fnResumeMusic": {
           "prefix": "fnResumeMusic",
           "body": "ResumeMusic(${1:nothing})",
           "description": "native ResumeMusic takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnPlayThematicMusic": {
           "prefix": "fnPlayThematicMusic",
           "body": "PlayThematicMusic(${1:string musicFileName})",
           "description": "native PlayThematicMusic takes string musicFileName returns nothing",
           "scope": "source.vjass"
       },
        "fnPlayThematicMusicEx": {
           "prefix": "fnPlayThematicMusicEx",
           "body": "PlayThematicMusicEx(${1:integer frommsecs},${2:string musicFileName})",
           "description": "native PlayThematicMusicEx takes string musicFileName, integer frommsecs returns nothing",
           "scope": "source.vjass"
       },
        "fnEndThematicMusic": {
           "prefix": "fnEndThematicMusic",
           "body": "EndThematicMusic(${1:nothing})",
           "description": "native EndThematicMusic takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnSetMusicVolume": {
           "prefix": "fnSetMusicVolume",
           "body": "SetMusicVolume(${1:integer volume})",
           "description": "native SetMusicVolume takes integer volume returns nothing",
           "scope": "source.vjass"
       },
        "fnSetMusicPlayPosition": {
           "prefix": "fnSetMusicPlayPosition",
           "body": "SetMusicPlayPosition(${1:integer millisecs})",
           "description": "native SetMusicPlayPosition takes integer millisecs returns nothing",
           "scope": "source.vjass"
       },
        "fnSetThematicMusicPlayPosition": {
           "prefix": "fnSetThematicMusicPlayPosition",
           "body": "SetThematicMusicPlayPosition(${1:integer millisecs})",
           "description": "native SetThematicMusicPlayPosition takes integer millisecs returns nothing",
           "scope": "source.vjass"
       },
        "fnSetSoundDuration": {
           "prefix": "fnSetSoundDuration",
           "body": "SetSoundDuration(${1:sound soundHandle},${2:integer duration})",
           "description": "native SetSoundDuration takes sound soundHandle, integer duration returns nothing",
           "scope": "source.vjass"
       },
        "fnGetSoundDuration": {
           "prefix": "fnGetSoundDuration",
           "body": "GetSoundDuration(${1:sound soundHandle})",
           "description": "native GetSoundDuration takes sound soundHandle returns integer",
           "scope": "source.vjass"
       },
        "fnGetSoundFileDuration": {
           "prefix": "fnGetSoundFileDuration",
           "body": "GetSoundFileDuration(${1:string musicFileName})",
           "description": "native GetSoundFileDuration takes string musicFileName returns integer",
           "scope": "source.vjass"
       },
        "fnVolumeGroupSetVolume": {
           "prefix": "fnVolumeGroupSetVolume",
           "body": "VolumeGroupSetVolume(${1:real scale},${2:volumegroup vgroup})",
           "description": "native VolumeGroupSetVolume takes volumegroup vgroup, real scale returns nothing",
           "scope": "source.vjass"
       },
        "fnVolumeGroupReset": {
           "prefix": "fnVolumeGroupReset",
           "body": "VolumeGroupReset(${1:nothing})",
           "description": "native VolumeGroupReset takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnGetSoundIsPlaying": {
           "prefix": "fnGetSoundIsPlaying",
           "body": "GetSoundIsPlaying(${1:sound soundHandle})",
           "description": "native GetSoundIsPlaying takes sound soundHandle returns boolean",
           "scope": "source.vjass"
       },
        "fnGetSoundIsLoading": {
           "prefix": "fnGetSoundIsLoading",
           "body": "GetSoundIsLoading(${1:sound soundHandle})",
           "description": "native GetSoundIsLoading takes sound soundHandle returns boolean",
           "scope": "source.vjass"
       },
        "fnRegisterStackedSound": {
           "prefix": "fnRegisterStackedSound",
           "body": "RegisterStackedSound(${1:sound soundHandle},${2:real rectheight},${3:boolean byPosition})",
           "description": "native RegisterStackedSound takes sound soundHandle, boolean byPosition, real rectwidth, real rectheight returns nothing",
           "scope": "source.vjass"
       },
        "fnUnregisterStackedSound": {
           "prefix": "fnUnregisterStackedSound",
           "body": "UnregisterStackedSound(${1:sound soundHandle},${2:real rectheight},${3:boolean byPosition})",
           "description": "native UnregisterStackedSound takes sound soundHandle, boolean byPosition, real rectwidth, real rectheight returns nothing",
           "scope": "source.vjass"
       },
        "fnAddWeatherEffect": {
           "prefix": "fnAddWeatherEffect",
           "body": "AddWeatherEffect(${1:integer effectID},${2:rect where})",
           "description": "native AddWeatherEffect takes rect where, integer effectID returns weathereffect",
           "scope": "source.vjass"
       },
        "fnRemoveWeatherEffect": {
           "prefix": "fnRemoveWeatherEffect",
           "body": "RemoveWeatherEffect(${1:weathereffect whichEffect})",
           "description": "native RemoveWeatherEffect takes weathereffect whichEffect returns nothing",
           "scope": "source.vjass"
       },
        "fnEnableWeatherEffect": {
           "prefix": "fnEnableWeatherEffect",
           "body": "EnableWeatherEffect(${1:weathereffect whichEffect},${2:boolean enable})",
           "description": "native EnableWeatherEffect takes weathereffect whichEffect, boolean enable returns nothing",
           "scope": "source.vjass"
       },
        "fnTerrainDeformCrater": {
           "prefix": "fnTerrainDeformCrater",
           "body": "TerrainDeformCrater(${1:real depth},${2:integer duration},${3:boolean permanent})",
           "description": "native TerrainDeformCrater takes real x, real y, real radius, real depth, integer duration, boolean permanent returns terraindeformation",
           "scope": "source.vjass"
       },
        "fnTerrainDeformRipple": {
           "prefix": "fnTerrainDeformRipple",
           "body": "TerrainDeformRipple(${1:real radiusStartPct},${2:integer count},${3:boolean limitNeg})",
           "description": "native TerrainDeformRipple takes real x, real y, real radius, real depth, integer duration, integer count, real spaceWaves, real timeWaves, real radiusStartPct, boolean limitNeg returns terraindeformation",
           "scope": "source.vjass"
       },
        "fnTerrainDeformWave": {
           "prefix": "fnTerrainDeformWave",
           "body": "TerrainDeformWave(${1:real depth},${2:integer count})",
           "description": "native TerrainDeformWave takes real x, real y, real dirX, real dirY, real distance, real speed, real radius, real depth, integer trailTime, integer count returns terraindeformation",
           "scope": "source.vjass"
       },
        "fnTerrainDeformRandom": {
           "prefix": "fnTerrainDeformRandom",
           "body": "TerrainDeformRandom(${1:real maxDelta},${2:integer updateInterval})",
           "description": "native TerrainDeformRandom takes real x, real y, real radius, real minDelta, real maxDelta, integer duration, integer updateInterval returns terraindeformation",
           "scope": "source.vjass"
       },
        "fnTerrainDeformStop": {
           "prefix": "fnTerrainDeformStop",
           "body": "TerrainDeformStop(${1:integer duration},${2:terraindeformation deformation})",
           "description": "native TerrainDeformStop takes terraindeformation deformation, integer duration returns nothing",
           "scope": "source.vjass"
       },
        "fnTerrainDeformStopAll": {
           "prefix": "fnTerrainDeformStopAll",
           "body": "TerrainDeformStopAll(${1:nothing})",
           "description": "native TerrainDeformStopAll takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnAddSpecialEffect": {
           "prefix": "fnAddSpecialEffect",
           "body": "AddSpecialEffect(${1:real y},${2:string modelName})",
           "description": "native AddSpecialEffect takes string modelName, real x, real y returns effect",
           "scope": "source.vjass"
       },
        "fnAddSpecialEffectLoc": {
           "prefix": "fnAddSpecialEffectLoc",
           "body": "AddSpecialEffectLoc(${1:string modelName},${2:location where})",
           "description": "native AddSpecialEffectLoc takes string modelName, location where returns effect",
           "scope": "source.vjass"
       },
        "fnAddSpecialEffectTarget": {
           "prefix": "fnAddSpecialEffectTarget",
           "body": "AddSpecialEffectTarget(${1:widget targetWidget},${2:string attachPointName})",
           "description": "native AddSpecialEffectTarget takes string modelName, widget targetWidget, string attachPointName returns effect",
           "scope": "source.vjass"
       },
        "fnDestroyEffect": {
           "prefix": "fnDestroyEffect",
           "body": "DestroyEffect(${1:effect whichEffect})",
           "description": "native DestroyEffect takes effect whichEffect returns nothing",
           "scope": "source.vjass"
       },
        "fnAddSpellEffect": {
           "prefix": "fnAddSpellEffect",
           "body": "AddSpellEffect(${1:real y},${2:effecttype t},${3:string abilityString})",
           "description": "native AddSpellEffect takes string abilityString, effecttype t, real x, real y returns effect",
           "scope": "source.vjass"
       },
        "fnAddSpellEffectLoc": {
           "prefix": "fnAddSpellEffectLoc",
           "body": "AddSpellEffectLoc(${1:effecttype tlocation},${2:string abilityString})",
           "description": "native AddSpellEffectLoc takes string abilityString, effecttype t,location where returns effect",
           "scope": "source.vjass"
       },
        "fnAddSpellEffectById": {
           "prefix": "fnAddSpellEffectById",
           "body": "AddSpellEffectById(${1:integer abilityId},${2:x, real},${3:effecttype treal})",
           "description": "native AddSpellEffectById takes integer abilityId, effecttype t,real x, real y returns effect",
           "scope": "source.vjass"
       },
        "fnAddSpellEffectByIdLoc": {
           "prefix": "fnAddSpellEffectByIdLoc",
           "body": "AddSpellEffectByIdLoc(${1:integer abilityId},${2:effecttype tlocation})",
           "description": "native AddSpellEffectByIdLoc takes integer abilityId, effecttype t,location where returns effect",
           "scope": "source.vjass"
       },
        "fnAddSpellEffectTarget": {
           "prefix": "fnAddSpellEffectTarget",
           "body": "AddSpellEffectTarget(${1:effecttype t},${2:widget targetWidget},${3:string attachPoint})",
           "description": "native AddSpellEffectTarget takes string modelName, effecttype t, widget targetWidget, string attachPoint returns effect",
           "scope": "source.vjass"
       },
        "fnAddSpellEffectTargetById": {
           "prefix": "fnAddSpellEffectTargetById",
           "body": "AddSpellEffectTargetById(${1:integer abilityId},${2:widget targetWidget},${3:string attachPoint},${4:effecttype t})",
           "description": "native AddSpellEffectTargetById takes integer abilityId, effecttype t, widget targetWidget, string attachPoint returns effect",
           "scope": "source.vjass"
       },
        "fnAddLightning": {
           "prefix": "fnAddLightning",
           "body": "AddLightning(${1:real y2},${2:boolean checkVisibility},${3:string codeName})",
           "description": "native AddLightning takes string codeName, boolean checkVisibility, real x1, real y1, real x2, real y2 returns lightning",
           "scope": "source.vjass"
       },
        "fnAddLightningEx": {
           "prefix": "fnAddLightningEx",
           "body": "AddLightningEx(${1:real z2},${2:boolean checkVisibility},${3:string codeName})",
           "description": "native AddLightningEx takes string codeName, boolean checkVisibility, real x1, real y1, real z1, real x2, real y2, real z2 returns lightning",
           "scope": "source.vjass"
       },
        "fnDestroyLightning": {
           "prefix": "fnDestroyLightning",
           "body": "DestroyLightning(${1:lightning whichBolt})",
           "description": "native DestroyLightning takes lightning whichBolt returns boolean",
           "scope": "source.vjass"
       },
        "fnMoveLightning": {
           "prefix": "fnMoveLightning",
           "body": "MoveLightning(${1:real y2},${2:boolean checkVisibility},${3:lightning whichBolt})",
           "description": "native MoveLightning takes lightning whichBolt, boolean checkVisibility, real x1, real y1, real x2, real y2 returns boolean",
           "scope": "source.vjass"
       },
        "fnMoveLightningEx": {
           "prefix": "fnMoveLightningEx",
           "body": "MoveLightningEx(${1:real z2},${2:boolean checkVisibility},${3:lightning whichBolt})",
           "description": "native MoveLightningEx takes lightning whichBolt, boolean checkVisibility, real x1, real y1, real z1, real x2, real y2, real z2 returns boolean",
           "scope": "source.vjass"
       },
        "fnGetLightningColorA": {
           "prefix": "fnGetLightningColorA",
           "body": "GetLightningColorA(${1:lightning whichBolt})",
           "description": "native GetLightningColorA takes lightning whichBolt returns real",
           "scope": "source.vjass"
       },
        "fnGetLightningColorR": {
           "prefix": "fnGetLightningColorR",
           "body": "GetLightningColorR(${1:lightning whichBolt})",
           "description": "native GetLightningColorR takes lightning whichBolt returns real",
           "scope": "source.vjass"
       },
        "fnGetLightningColorG": {
           "prefix": "fnGetLightningColorG",
           "body": "GetLightningColorG(${1:lightning whichBolt})",
           "description": "native GetLightningColorG takes lightning whichBolt returns real",
           "scope": "source.vjass"
       },
        "fnGetLightningColorB": {
           "prefix": "fnGetLightningColorB",
           "body": "GetLightningColorB(${1:lightning whichBolt})",
           "description": "native GetLightningColorB takes lightning whichBolt returns real",
           "scope": "source.vjass"
       },
        "fnSetLightningColor": {
           "prefix": "fnSetLightningColor",
           "body": "SetLightningColor(${1:real a},${2:lightning whichBolt})",
           "description": "native SetLightningColor takes lightning whichBolt, real r, real g, real b, real a returns boolean",
           "scope": "source.vjass"
       },
        "fnGetAbilityEffect": {
           "prefix": "fnGetAbilityEffect",
           "body": "GetAbilityEffect(${1:effecttype t},${2:string abilityString},${3:integer index})",
           "description": "native GetAbilityEffect takes string abilityString, effecttype t, integer index returns string",
           "scope": "source.vjass"
       },
        "fnGetAbilityEffectById": {
           "prefix": "fnGetAbilityEffectById",
           "body": "GetAbilityEffectById(${1:integer index},${2:effecttype t})",
           "description": "native GetAbilityEffectById takes integer abilityId, effecttype t, integer index returns string",
           "scope": "source.vjass"
       },
        "fnGetAbilitySound": {
           "prefix": "fnGetAbilitySound",
           "body": "GetAbilitySound(${1:soundtype t},${2:string abilityString})",
           "description": "native GetAbilitySound takes string abilityString, soundtype t returns string",
           "scope": "source.vjass"
       },
        "fnGetAbilitySoundById": {
           "prefix": "fnGetAbilitySoundById",
           "body": "GetAbilitySoundById(${1:integer abilityId},${2:soundtype t})",
           "description": "native GetAbilitySoundById takes integer abilityId, soundtype t returns string",
           "scope": "source.vjass"
       },
        "fnGetTerrainCliffLevel": {
           "prefix": "fnGetTerrainCliffLevel",
           "body": "GetTerrainCliffLevel(${1:real y})",
           "description": "native GetTerrainCliffLevel takes real x, real y returns integer",
           "scope": "source.vjass"
       },
        "fnSetWaterBaseColor": {
           "prefix": "fnSetWaterBaseColor",
           "body": "SetWaterBaseColor(${1:integer alpha})",
           "description": "native SetWaterBaseColor takes integer red, integer green, integer blue, integer alpha returns nothing",
           "scope": "source.vjass"
       },
        "fnSetWaterDeforms": {
           "prefix": "fnSetWaterDeforms",
           "body": "SetWaterDeforms(${1:boolean val})",
           "description": "native SetWaterDeforms takes boolean val returns nothing",
           "scope": "source.vjass"
       },
        "fnGetTerrainType": {
           "prefix": "fnGetTerrainType",
           "body": "GetTerrainType(${1:real y})",
           "description": "native GetTerrainType takes real x, real y returns integer",
           "scope": "source.vjass"
       },
        "fnGetTerrainVariance": {
           "prefix": "fnGetTerrainVariance",
           "body": "GetTerrainVariance(${1:real y})",
           "description": "native GetTerrainVariance takes real x, real y returns integer",
           "scope": "source.vjass"
       },
        "fnSetTerrainType": {
           "prefix": "fnSetTerrainType",
           "body": "SetTerrainType(${1:real y},${2:integer shape})",
           "description": "native SetTerrainType takes real x, real y, integer terrainType, integer variation, integer area, integer shape returns nothing",
           "scope": "source.vjass"
       },
        "fnIsTerrainPathable": {
           "prefix": "fnIsTerrainPathable",
           "body": "IsTerrainPathable(${1:real y},${2:pathingtype t})",
           "description": "native IsTerrainPathable takes real x, real y, pathingtype t returns boolean",
           "scope": "source.vjass"
       },
        "fnSetTerrainPathable": {
           "prefix": "fnSetTerrainPathable",
           "body": "SetTerrainPathable(${1:real y},${2:pathingtype t},${3:boolean flag})",
           "description": "native SetTerrainPathable takes real x, real y, pathingtype t, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnCreateImage": {
           "prefix": "fnCreateImage",
           "body": "CreateImage(${1:real originZ},${2:integer imageType},${3:string file})",
           "description": "native CreateImage takes string file, real sizeX, real sizeY, real sizeZ, real posX, real posY, real posZ, real originX, real originY, real originZ, integer imageType returns image",
           "scope": "source.vjass"
       },
        "fnDestroyImage": {
           "prefix": "fnDestroyImage",
           "body": "DestroyImage(${1:image whichImage})",
           "description": "native DestroyImage takes image whichImage returns nothing",
           "scope": "source.vjass"
       },
        "fnShowImage": {
           "prefix": "fnShowImage",
           "body": "ShowImage(${1:image whichImage},${2:boolean flag})",
           "description": "native ShowImage takes image whichImage, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetImageConstantHeight": {
           "prefix": "fnSetImageConstantHeight",
           "body": "SetImageConstantHeight(${1:real height},${2:image whichImage},${3:boolean flag})",
           "description": "native SetImageConstantHeight takes image whichImage, boolean flag, real height returns nothing",
           "scope": "source.vjass"
       },
        "fnSetImagePosition": {
           "prefix": "fnSetImagePosition",
           "body": "SetImagePosition(${1:real z},${2:image whichImage})",
           "description": "native SetImagePosition takes image whichImage, real x, real y, real z returns nothing",
           "scope": "source.vjass"
       },
        "fnSetImageColor": {
           "prefix": "fnSetImageColor",
           "body": "SetImageColor(${1:integer alpha},${2:image whichImage})",
           "description": "native SetImageColor takes image whichImage, integer red, integer green, integer blue, integer alpha returns nothing",
           "scope": "source.vjass"
       },
        "fnSetImageRender": {
           "prefix": "fnSetImageRender",
           "body": "SetImageRender(${1:image whichImage},${2:boolean flag})",
           "description": "native SetImageRender takes image whichImage, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetImageRenderAlways": {
           "prefix": "fnSetImageRenderAlways",
           "body": "SetImageRenderAlways(${1:image whichImage},${2:boolean flag})",
           "description": "native SetImageRenderAlways takes image whichImage, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetImageAboveWater": {
           "prefix": "fnSetImageAboveWater",
           "body": "SetImageAboveWater(${1:image whichImage},${2:boolean useWaterAlpha})",
           "description": "native SetImageAboveWater takes image whichImage, boolean flag, boolean useWaterAlpha returns nothing",
           "scope": "source.vjass"
       },
        "fnSetImageType": {
           "prefix": "fnSetImageType",
           "body": "SetImageType(${1:integer imageType},${2:image whichImage})",
           "description": "native SetImageType takes image whichImage, integer imageType returns nothing",
           "scope": "source.vjass"
       },
        "fnCreateUbersplat": {
           "prefix": "fnCreateUbersplat",
           "body": "CreateUbersplat(${1:real y},${2:integer alpha},${3:boolean noBirthTime},${4:string name})",
           "description": "native CreateUbersplat takes real x, real y, string name, integer red, integer green, integer blue, integer alpha, boolean forcePaused, boolean noBirthTime returns ubersplat",
           "scope": "source.vjass"
       },
        "fnDestroyUbersplat": {
           "prefix": "fnDestroyUbersplat",
           "body": "DestroyUbersplat(${1:ubersplat whichSplat})",
           "description": "native DestroyUbersplat takes ubersplat whichSplat returns nothing",
           "scope": "source.vjass"
       },
        "fnResetUbersplat": {
           "prefix": "fnResetUbersplat",
           "body": "ResetUbersplat(${1:ubersplat whichSplat})",
           "description": "native ResetUbersplat takes ubersplat whichSplat returns nothing",
           "scope": "source.vjass"
       },
        "fnFinishUbersplat": {
           "prefix": "fnFinishUbersplat",
           "body": "FinishUbersplat(${1:ubersplat whichSplat})",
           "description": "native FinishUbersplat takes ubersplat whichSplat returns nothing",
           "scope": "source.vjass"
       },
        "fnShowUbersplat": {
           "prefix": "fnShowUbersplat",
           "body": "ShowUbersplat(${1:boolean flag},${2:ubersplat whichSplat})",
           "description": "native ShowUbersplat takes ubersplat whichSplat, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUbersplatRender": {
           "prefix": "fnSetUbersplatRender",
           "body": "SetUbersplatRender(${1:boolean flag},${2:ubersplat whichSplat})",
           "description": "native SetUbersplatRender takes ubersplat whichSplat, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetUbersplatRenderAlways": {
           "prefix": "fnSetUbersplatRenderAlways",
           "body": "SetUbersplatRenderAlways(${1:boolean flag},${2:ubersplat whichSplat})",
           "description": "native SetUbersplatRenderAlways takes ubersplat whichSplat, boolean flag returns nothing",
           "scope": "source.vjass"
       },
        "fnSetBlight": {
           "prefix": "fnSetBlight",
           "body": "SetBlight(${1:real radius},${2:player whichPlayer},${3:boolean addBlight})",
           "description": "native SetBlight takes player whichPlayer, real x, real y, real radius, boolean addBlight returns nothing",
           "scope": "source.vjass"
       },
        "fnSetBlightRect": {
           "prefix": "fnSetBlightRect",
           "body": "SetBlightRect(${1:player whichPlayer},${2:boolean addBlight},${3:rect r})",
           "description": "native SetBlightRect takes player whichPlayer, rect r, boolean addBlight returns nothing",
           "scope": "source.vjass"
       },
        "fnSetBlightPoint": {
           "prefix": "fnSetBlightPoint",
           "body": "SetBlightPoint(${1:real y},${2:player whichPlayer},${3:boolean addBlight})",
           "description": "native SetBlightPoint takes player whichPlayer, real x, real y, boolean addBlight returns nothing",
           "scope": "source.vjass"
       },
        "fnSetBlightLoc": {
           "prefix": "fnSetBlightLoc",
           "body": "SetBlightLoc(${1:real radius},${2:player whichPlayer},${3:boolean addBlight},${4:location whichLocation})",
           "description": "native SetBlightLoc takes player whichPlayer, location whichLocation, real radius, boolean addBlight returns nothing",
           "scope": "source.vjass"
       },
        "fnCreateBlightedGoldmine": {
           "prefix": "fnCreateBlightedGoldmine",
           "body": "CreateBlightedGoldmine(${1:real face},${2:player id})",
           "description": "native CreateBlightedGoldmine takes player id, real x, real y, real face returns unit",
           "scope": "source.vjass"
       },
        "fnIsPointBlighted": {
           "prefix": "fnIsPointBlighted",
           "body": "IsPointBlighted(${1:real y})",
           "description": "native IsPointBlighted takes real x, real y returns boolean",
           "scope": "source.vjass"
       },
        "fnSetDoodadAnimation": {
           "prefix": "fnSetDoodadAnimation",
           "body": "SetDoodadAnimation(${1:real radius},${2:integer doodadID},${3:boolean animRandom},${4:string animName})",
           "description": "native SetDoodadAnimation takes real x, real y, real radius, integer doodadID, boolean nearestOnly, string animName, boolean animRandom returns nothing",
           "scope": "source.vjass"
       },
        "fnSetDoodadAnimationRect": {
           "prefix": "fnSetDoodadAnimationRect",
           "body": "SetDoodadAnimationRect(${1:integer doodadID},${2:boolean animRandom},${3:string animName},${4:rect r})",
           "description": "native SetDoodadAnimationRect takes rect r, integer doodadID, string animName, boolean animRandom returns nothing",
           "scope": "source.vjass"
       },
        "fnStartMeleeAI": {
           "prefix": "fnStartMeleeAI",
           "body": "StartMeleeAI(${1:player num},${2:string script})",
           "description": "native StartMeleeAI takes player num, string script returns nothing",
           "scope": "source.vjass"
       },
        "fnStartCampaignAI": {
           "prefix": "fnStartCampaignAI",
           "body": "StartCampaignAI(${1:player num},${2:string script})",
           "description": "native StartCampaignAI takes player num, string script returns nothing",
           "scope": "source.vjass"
       },
        "fnCommandAI": {
           "prefix": "fnCommandAI",
           "body": "CommandAI(${1:player num},${2:integer data})",
           "description": "native CommandAI takes player num, integer command, integer data returns nothing",
           "scope": "source.vjass"
       },
        "fnPauseCompAI": {
           "prefix": "fnPauseCompAI",
           "body": "PauseCompAI(${1:player p},${2:boolean pause})",
           "description": "native PauseCompAI takes player p, boolean pause returns nothing",
           "scope": "source.vjass"
       },
        "fnGetAIDifficulty": {
           "prefix": "fnGetAIDifficulty",
           "body": "GetAIDifficulty(${1:player num})",
           "description": "native GetAIDifficulty takes player num returns aidifficulty",
           "scope": "source.vjass"
       },
        "fnRemoveGuardPosition": {
           "prefix": "fnRemoveGuardPosition",
           "body": "RemoveGuardPosition(${1:unit hUnit})",
           "description": "native RemoveGuardPosition takes unit hUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnRecycleGuardPosition": {
           "prefix": "fnRecycleGuardPosition",
           "body": "RecycleGuardPosition(${1:unit hUnit})",
           "description": "native RecycleGuardPosition takes unit hUnit returns nothing",
           "scope": "source.vjass"
       },
        "fnRemoveAllGuardPositions": {
           "prefix": "fnRemoveAllGuardPositions",
           "body": "RemoveAllGuardPositions(${1:player num})",
           "description": "native RemoveAllGuardPositions takes player num returns nothing",
           "scope": "source.vjass"
       },
        "fnCheat": {
           "prefix": "fnCheat",
           "body": "Cheat(${1:string cheatStr})",
           "description": "native Cheat takes string cheatStr returns nothing",
           "scope": "source.vjass"
       },
        "fnIsNoVictoryCheat": {
           "prefix": "fnIsNoVictoryCheat",
           "body": "IsNoVictoryCheat(${1:nothing})",
           "description": "native IsNoVictoryCheat takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnIsNoDefeatCheat": {
           "prefix": "fnIsNoDefeatCheat",
           "body": "IsNoDefeatCheat(${1:nothing})",
           "description": "native IsNoDefeatCheat takes nothing returns boolean",
           "scope": "source.vjass"
       },
        "fnPreload": {
           "prefix": "fnPreload",
           "body": "Preload(${1:string filename})",
           "description": "native Preload takes string filename returns nothing",
           "scope": "source.vjass"
       },
        "fnPreloadEnd": {
           "prefix": "fnPreloadEnd",
           "body": "PreloadEnd(${1:real timeout})",
           "description": "native PreloadEnd takes real timeout returns nothing",
           "scope": "source.vjass"
       },
        "fnPreloadStart": {
           "prefix": "fnPreloadStart",
           "body": "PreloadStart(${1:nothing})",
           "description": "native PreloadStart takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnPreloadRefresh": {
           "prefix": "fnPreloadRefresh",
           "body": "PreloadRefresh(${1:nothing})",
           "description": "native PreloadRefresh takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnPreloadEndEx": {
           "prefix": "fnPreloadEndEx",
           "body": "PreloadEndEx(${1:nothing})",
           "description": "native PreloadEndEx takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnPreloadGenClear": {
           "prefix": "fnPreloadGenClear",
           "body": "PreloadGenClear(${1:nothing})",
           "description": "native PreloadGenClear takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnPreloadGenStart": {
           "prefix": "fnPreloadGenStart",
           "body": "PreloadGenStart(${1:nothing})",
           "description": "native PreloadGenStart takes nothing returns nothing",
           "scope": "source.vjass"
       },
        "fnPreloadGenEnd": {
           "prefix": "fnPreloadGenEnd",
           "body": "PreloadGenEnd(${1:string filename})",
           "description": "native PreloadGenEnd takes string filename returns nothing",
           "scope": "source.vjass"
       },
        "fnPreloader": {
           "prefix": "fnPreloader",
           "body": "Preloader(${1:string filename})",
           "description": "native Preloader takes string filename returns nothing",
           "scope": "source.vjass"
       }
}
